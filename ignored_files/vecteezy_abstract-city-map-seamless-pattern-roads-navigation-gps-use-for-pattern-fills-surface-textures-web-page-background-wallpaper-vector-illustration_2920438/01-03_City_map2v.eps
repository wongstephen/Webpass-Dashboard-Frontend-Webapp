%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 01-03 City map_2.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: kossva
%%CreationDate: 1/4/2020
%%BoundingBox: 0 0 5000 5000
%%HiResBoundingBox: 0 0 5000 5000
%%CropBox: 0 0 5000 5000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.3 x585 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-01-04T00:12:25+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-01-04T00:12:26+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-01-04T00:12:26+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8AlWlaxqWlXAuLCdoZP2gN1YeDKdiM2Eog83k8WaWM3E0zCz80eXtXompJ+i79&#xA;v+PqIFoHPiy9V/z3zU6rsqM947F22HtCEtp+k/YjLrQb+GMTRBbq2YVWeA+opHjtmjzaLJj6W51b&#xA;WNwl2YaHYq7FXYqmWm6De3tJCPQtf2p5NhT2r1zL0+jnk8h3shFG+fdVbQvL9vpli5jmuax8xswi&#xA;UfG23QsSPxzptJhEQB0Di9oZzjgIjmXlOZ7oGX+RPKH6SnXUtQXjpkLfCG2Ezg/Z3/ZB6/d45Rmy&#xA;8Ip2Oh0fiHil9I+16NfLMJquPhOyU6UzXTu3ooobIsnYq7FXYq7FXYq7FUVejmkU4/bWjfMZOXex&#xA;CFyDJ2KuxV2KuxV2KoyOGO2QSzish/u4/wCuTArcsbtDTTPK5dzv2HYZEm0gLMCV0cjxuHQ0YYQa&#xA;Qx/zP5KtdYD3umhbfU/tSwdI5j4j+Vv8z45mYdR0LqtZ2eJ+qP1fe81uba4tp3guI2imjNHjcUIP&#xA;yOZgNuhlExNHmm/mDyhq+isXlT1rMn4LuLdDXpy/lPzyEMgk5Oo0k8XPl3pJljio7TNc1bS5Odhd&#xA;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&#xA;abXGHplvH7Q//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:6d42b683-553f-354b-b8df-27926a628730</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:6d42b683-553f-354b-b8df-27926a628730</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:ddcd816c-0ad4-8e43-9ef8-cfcdc6e82032</stRef:instanceID>
            <stRef:documentID>xmp.did:ddcd816c-0ad4-8e43-9ef8-cfcdc6e82032</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3deb2f10-eb55-824f-b86d-f503746adcb8</stEvt:instanceID>
                  <stEvt:when>2020-01-03T16:50:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6d42b683-553f-354b-b8df-27926a628730</stEvt:instanceID>
                  <stEvt:when>2020-01-04T00:12:26+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5000.000000</stDim:w>
            <stDim:h>5000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=185 G=214 B=229</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>185</xmpG:red>
                           <xmpG:green>214</xmpG:green>
                           <xmpG:blue>229</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=220 B=161</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>220</xmpG:green>
                           <xmpG:blue>161</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=91 G=175 B=178</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>91</xmpG:red>
                           <xmpG:green>175</xmpG:green>
                           <xmpG:blue>178</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Оттенки серого</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -5000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 5000 li
5000 5000 li
5000 0 li
cp
clp
gsave
5000 5000 mo
0 5000 li
0 0 li
5000 0 li
5000 5000 li
cp
clp
3500 5000 mo
-1500 5000 li
-1500 0 li
3500 0 li
3500 5000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.929412 .905882 .858824 rgb
f
-600 4460 mo
48.5 5073.5 735 5483 1296 5104 cv
1459 4665 li
1104 4327 li
691 4705 li
-285 4219 li
-600 4460 li
cp
.709804 .827451 .47451 rgb
f
-632 -447 mo
16.5 166.5 677 533 1250 247 cv
1434 -268 li
1090 -593 li
691 -295 li
-283 -721 li
-632 -447 li
cp
f
1995 3915 mo
1995 4056.94 1879.94 4172 1738 4172 cv
1596.06 4172 1481 4056.94 1481 3915 cv
1481 3773.06 1596.06 3658 1738 3658 cv
1879.94 3658 1995 3773.06 1995 3915 cv
cp
f
1153 2684 mo
1433 3268 li
1942 3145 li
1819 2875 li
2753 2276 li
2178 1463 li
1153 2684 li
cp
f
338 432.575 mo
361 824.371 li
1067 720 li
1153.42 488.055 li
338 432.575 li
cp
f
50 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
1103.97 4326.56 mo
671 4643 li
-301 4219 li
-563 4440 li
1 1 1 rgb
@
2177.73 1463.34 mo
3670 3569 li
@
2753 2276 mo
1819 2875 li
1942 3145 li
1433 3268 li
@
1942 3145 mo
3323.77 3080.45 li
@
902 1165 mo
1935 1752.48 li
@
-1833.81 2858.11 mo
-1300 2500 li
-561 2410 li
305 2772 li
1153 2684 li
2858 653 li
3076 275 li
2580 -1236 li
2514 -1882 li
@
4439 2410 mo
3700 2500 li
3166.19 2858.11 li
@
-1355 3807 mo
-362.5 3865.75 li
440 3663 li
@
185 4431 mo
598 3813 li
1541 3455 li
@
2514 3118 mo
2580 3764 li
3076 5275 li
@
338 390 mo
361 1060 li
@
4093 1303 mo
2478.98 1888.42 li
@
902 2728 mo
811.233 3732.05 li
@
270 2931 mo
863 3159.41 li
@
1793.53 1672.02 mo
2399 670 li
1670 69 li
@
1541 702 mo
2178 1036 li
2312.01 1303.39 li
@
4093 149 mo
3324 859 li
3075.59 1672.02 li
3360.14 2728 li
@
-922 162.798 mo
811 1375 li
@
23.96 824.371 mo
-135 1438 li
105 2688.4 li
-170 3362 li
@
3076 275 mo
3802.6 417.123 li
@
3565 4580 mo
2931 4833 li
1942 4643 li
@
361 824.371 mo
1067 720 li
@
-1613.36 3886.13 mo
-1540.93 3892.78 -1468.53 3904.38 -1397.29 3921.48 cv
-1370.6 3927.98 li
-1361.74 3930.31 -1352.93 3932.84 -1344.1 3935.27 cv
-1330.86 3938.97 li
-1324.25 3940.82 li
-1322.04 3941.43 -1319.87 3942.17 -1317.68 3942.84 cv
-1291.46 3951.05 li
-1278.36 3955.18 li
-1265.39 3959.7 li
-1239.48 3968.78 li
-1235.14 3970.24 -1230.9 3971.94 -1226.63 3973.57 cv
-1213.83 3978.5 li
-1201.04 3983.43 li
-1196.78 3985.1 -1192.48 3986.67 -1188.3 3988.49 cv
-1163.07 3999.12 li
-1150.47 4004.46 li
-1138.04 4010.14 li
-1113.2 4021.51 li
-1110.1 4022.93 li
-1107.04 4024.44 li
-1100.93 4027.44 li
-1088.71 4033.47 li
-1076.49 4039.5 li
-1070.39 4042.52 li
-1064.38 4045.7 li
-1040.37 4058.4 li
-1032.31 4062.57 -1024.5 4067.07 -1016.63 4071.49 cv
-1008.77 4075.93 -1000.88 4080.33 -993.06 4084.82 cv
-969.905 4098.67 li
-958.334 4105.6 li
-954.508 4107.95 -950.75 4110.38 -946.956 4112.76 cv
-924.252 4127.15 li
-920.436 4129.51 -916.785 4132.04 -913.05 4134.49 cv
-901.905 4141.9 li
-890.765 4149.32 li
-888.915 4150.56 -887.036 4151.78 -885.212 4153.04 cv
-879.746 4156.86 li
-857.892 4172.11 li
-852.431 4175.93 li
-850.618 4177.21 -848.851 4178.53 -847.058 4179.82 cv
-836.34 4187.64 li
-825.626 4195.46 li
-822.068 4198.08 -818.448 4200.65 -814.974 4203.34 cv
-793.932 4219.3 li
-790.44 4221.97 -786.886 4224.6 -783.447 4227.31 cv
-773.119 4235.44 li
-752.483 4251.71 li
-732.207 4268.24 li
-722.072 4276.51 li
-712.103 4284.88 li
-692.176 4301.63 li
-672.544 4318.54 li
-666.006 4324.18 -659.448 4329.81 -653.057 4335.52 cv
-601.457 4381.01 -551.781 4427.41 -503.518 4473.7 cv
-467.488 4508.38 li
-431.915 4542.75 li
-408.88 4565.01 -385.69 4587.01 -362.34 4608.75 cv
-315.602 4652.2 -268.055 4694.46 -219.568 4735.22 cv
-122.632 4816.73 -21.8823 4892.36 82.439 4959.26 cv
134.606 4992.64 187.6 5023.92 241.328 5052.4 cv
268.193 5066.64 295.208 5080.26 322.394 5093.04 cv
349.583 5105.81 376.9 5117.88 404.319 5129.1 cv
431.754 5140.26 459.281 5150.6 486.868 5160.01 cv
490.311 5161.23 493.772 5162.3 497.219 5163.46 cv
507.566 5166.88 li
517.925 5170.15 li
521.376 5171.25 524.827 5172.34 528.285 5173.34 cv
538.646 5176.46 li
542.096 5177.52 545.557 5178.45 549.01 5179.45 cv
552.465 5180.42 555.916 5181.45 559.372 5182.38 cv
569.74 5185.16 li
574.92 5186.57 li
580.103 5187.88 li
590.463 5190.51 li
593.917 5191.38 597.373 5192.15 600.826 5192.98 cv
604.279 5193.78 607.729 5194.67 611.184 5195.4 cv
618.088 5196.89 624.985 5198.54 631.884 5199.87 cv
642.227 5201.99 li
652.565 5203.91 li
680.118 5209.08 707.594 5212.96 734.91 5215.59 cv
741.746 5216.32 748.555 5216.81 755.368 5217.36 cv
758.777 5217.67 762.172 5217.82 765.57 5218.03 cv
775.762 5218.63 li
789.32 5219.18 802.86 5219.71 816.313 5219.61 cv
829.79 5219.68 843.172 5219.21 856.531 5218.63 cv
869.85 5217.8 883.153 5216.92 896.333 5215.4 cv
909.549 5214.07 922.638 5212.13 935.704 5210.11 cv
945.459 5208.39 li
948.706 5207.8 951.976 5207.3 955.198 5206.6 cv
961.657 5205.27 968.153 5204.09 974.563 5202.55 cv
1000.29 5196.74 1025.72 5189.72 1050.68 5180.97 cv
1075.66 5172.27 1100.26 5162.22 1124.43 5150.77 cv
1126.71 5149.72 li
1128.96 5148.6 li
1133.46 5146.37 li
1142.48 5141.93 li
1151.41 5137.24 li
1155.88 5134.91 li
1157.38 5134.14 1158.87 5133.36 1160.34 5132.53 cv
1172.17 5126.05 1183.95 5119.37 1195.55 5112.25 cv
1242.03 5083.91 1286.6 5050.41 1329.01 5012.76 cv
1350.21 4993.93 1370.86 4974.05 1390.96 4953.28 cv
1411.07 4932.51 1430.69 4910.92 1449.72 4888.5 cv
1468.72 4866.05 1487.17 4842.84 1505.15 4819.03 cv
1511.87 4810.07 li
1514.11 4807.09 1516.37 4804.12 1518.55 4801.06 cv
1531.75 4782.86 li
1540.4 4770.55 1549.11 4758.3 1557.52 4745.72 cv
1561.76 4739.47 1566.02 4733.24 1570.13 4726.86 cv
1582.59 4707.82 li
1608.98 4666.33 li
1628.84 4635.4 1649.75 4605.19 1671.63 4575.76 cv
1693.55 4546.36 1716.56 4517.84 1740.4 4490.11 cv
1764.27 4462.4 1788.96 4435.46 1814.58 4409.52 cv
1917.09 4305.75 2032.54 4216.3 2156.22 4142.44 cv
2279.82 4068.33 2411.71 4009.95 2547.68 3966.29 cv
2683.77 3922.9 2824.13 3894.49 2965.75 3881.28 cv
3001.16 3877.95 3036.65 3875.76 3072.16 3874.28 cv
3085.48 3873.79 li
3089.92 3873.62 3094.36 3873.44 3098.8 3873.38 cv
3125.45 3872.83 li
3143.22 3872.73 3160.98 3872.58 3178.75 3872.92 cv
3249.81 3873.83 3320.78 3878.85 3391.33 3887.17 cv
3460.14 3895.51 3529.2 3906.14 3598.51 3920.25 cv
3667.8 3934.33 3737.3 3952.04 3806.51 3974.48 cv
3883.92 3999.57 3926.34 4082.66 3901.25 4160.07 cv
3876.16 4237.48 3793.06 4279.89 3715.66 4254.8 cv
3714.95 4254.57 3713.53 4254.09 3712.83 4253.85 cv
3657.32 4234.61 3599.3 4219.36 3539.79 4207.08 cv
3480.27 4194.84 3419.23 4185.66 3357.46 4178.7 cv
3327.42 4175.4 3297.3 4172.93 3267.13 4171.24 cv
3244.5 4170.12 li
3221.85 4169.4 li
3216.18 4169.22 li
3210.52 4169.14 li
3199.19 4168.97 li
3187.86 4168.8 li
3176.53 4168.83 li
3161.43 4168.74 3146.32 4169.11 3131.22 4169.4 cv
3108.58 4170.19 li
3104.81 4170.3 3101.04 4170.51 3097.27 4170.71 cv
3085.96 4171.29 li
3082.19 4171.5 3078.42 4171.65 3074.65 4171.9 cv
3063.35 4172.68 li
3055.82 4173.21 3048.29 4173.66 3040.77 4174.37 cv
3033.25 4175.04 3025.73 4175.63 3018.21 4176.36 cv
2995.69 4178.68 li
2965.7 4182.02 2935.79 4186.13 2906.03 4190.99 cv
2883.73 4194.79 li
2861.51 4198.98 li
2855.96 4200.02 li
2850.42 4201.17 li
2839.35 4203.45 li
2828.29 4205.74 li
2817.26 4208.21 li
2758.41 4221.16 2700.42 4237.62 2643.55 4256.95 cv
2615.14 4266.69 2587.04 4277.24 2559.26 4288.5 cv
2548.85 4292.75 li
2543.65 4294.87 li
2538.49 4297.09 li
2517.86 4305.97 li
2497.39 4315.18 li
2493.96 4316.68 2490.61 4318.33 2487.22 4319.91 cv
2477.07 4324.68 li
2450.08 4337.54 2423.47 4351.12 2397.3 4365.42 cv
2371.15 4379.74 2345.51 4394.9 2320.33 4410.69 cv
2219.61 4473.87 2127.32 4549.04 2046.86 4634.18 cv
2006.64 4676.77 1969.49 4721.9 1935.56 4769.12 cv
1918.67 4792.79 1902.62 4816.98 1887.43 4841.66 cv
1861.66 4883.86 li
1856.99 4891.37 1852.23 4898.85 1847.51 4906.34 cv
1842.83 4913.84 1837.95 4921.27 1833.09 4928.7 cv
1794.38 4988.26 1752.07 5046.4 1705.96 5102.53 cv
1682.84 5130.56 1658.67 5158.06 1633.38 5184.83 cv
1608.07 5211.59 1581.63 5237.66 1553.96 5262.8 cv
1498.67 5313.09 1438.29 5359.68 1372.79 5400.29 cv
1356.45 5410.47 1339.71 5420.18 1322.77 5429.59 cv
1320.67 5430.78 1318.53 5431.93 1316.39 5433.07 cv
1309.96 5436.49 li
1297.09 5443.32 li
1284.04 5449.87 li
1277.51 5453.13 li
1274.25 5454.77 li
1270.94 5456.34 li
1235.8 5473.25 1199.58 5488.37 1162.51 5501.4 cv
1157.9 5503.09 1153.22 5504.61 1148.56 5506.16 cv
1134.56 5510.8 li
1120.45 5515.13 li
1115.74 5516.55 1111.06 5518.05 1106.31 5519.34 cv
1096.83 5521.97 1087.38 5524.74 1077.81 5527.08 cv
1063.5 5530.69 li
1049.11 5534 li
1039.53 5536.27 1029.87 5538.14 1020.23 5540.11 cv
1015.42 5541.13 1010.57 5541.93 1005.73 5542.82 cv
1000.9 5543.69 996.059 5544.58 991.214 5545.4 cv
971.815 5548.51 952.371 5551.35 932.882 5553.36 cv
913.4 5555.57 893.899 5556.97 874.41 5558.13 cv
854.935 5559.03 835.457 5559.72 816.06 5559.59 cv
811.211 5559.56 806.351 5559.6 801.512 5559.5 cv
786.998 5559.17 li
779.743 5558.98 li
772.51 5558.68 li
758.044 5558.03 li
738.812 5556.87 719.618 5555.48 700.593 5553.41 cv
695.837 5552.89 691.067 5552.42 686.324 5551.85 cv
672.12 5550.07 li
665.02 5549.16 li
657.956 5548.14 li
643.832 5546.09 li
639.134 5545.37 634.467 5544.56 629.784 5543.8 cv
625.112 5543 620.409 5542.29 615.771 5541.4 cv
606.476 5539.68 597.144 5538.04 587.929 5536.11 cv
574.078 5533.27 li
560.316 5530.22 li
551.116 5528.24 542.05 5525.96 532.932 5523.79 cv
528.369 5522.71 523.877 5521.48 519.348 5520.33 cv
514.834 5519.15 510.296 5518.01 505.804 5516.79 cv
492.343 5513.07 li
485.616 5511.21 li
478.937 5509.25 li
443.294 5498.82 408.267 5487.19 374.004 5474.32 cv
339.735 5461.46 306.134 5447.53 273.193 5432.68 cv
240.274 5417.8 208.028 5401.99 176.387 5385.42 cv
172.416 5383.38 168.477 5381.29 164.553 5379.18 cv
152.766 5372.87 li
144.944 5368.63 137.148 5364.35 129.375 5360.05 cv
113.887 5351.37 98.4863 5342.58 83.2847 5333.58 cv
22.3608 5297.68 -36.2388 5259.21 -93.0571 5219.06 cv
-121.471 5198.99 -149.397 5178.45 -176.937 5157.56 cv
-190.729 5147.14 -204.374 5136.59 -217.968 5125.99 cv
-231.519 5115.35 -245.005 5104.64 -258.384 5093.86 cv
-311.939 5050.74 -364.04 5006.37 -414.999 4961.12 cv
-465.958 4915.86 -515.75 4869.68 -564.6 4822.85 cv
-589.025 4799.44 -613.197 4775.84 -637.101 4752.07 cv
-671.954 4717.42 li
-683.494 4705.99 -695.064 4694.56 -706.579 4683.3 cv
-718.11 4671.95 -729.629 4660.82 -741.149 4649.64 cv
-746.907 4644.01 -752.677 4638.57 -758.439 4633.03 cv
-764.208 4627.54 -769.959 4621.94 -775.741 4616.53 cv
-787.29 4605.66 -798.854 4594.73 -810.477 4584.12 cv
-816.288 4578.79 -822.072 4573.38 -827.902 4568.13 cv
-845.394 4552.38 li
-851.209 4547.09 -857.082 4541.97 -862.946 4536.83 cv
-880.543 4521.41 li
-898.264 4506.32 li
-907.129 4498.78 li
-916.062 4491.42 li
-933.921 4476.7 li
-951.927 4462.35 li
-960.929 4455.17 li
-963.927 4452.78 -966.979 4450.51 -970.001 4448.18 cv
-988.17 4434.24 li
-1036.86 4397.64 -1086.79 4364.09 -1138.09 4334.07 cv
-1157.46 4323.16 li
-1163.92 4319.53 -1170.34 4315.8 -1176.91 4312.47 cv
-1196.51 4302.18 li
-1201.4 4299.6 li
-1206.36 4297.18 li
-1216.27 4292.34 li
-1226.17 4287.49 li
-1231.13 4285.07 li
-1233.6 4283.85 li
-1236.11 4282.72 li
-1256.14 4273.67 li
-1266.16 4269.14 li
-1276.29 4264.95 li
-1296.54 4256.54 li
-1405.04 4213.28 -1519.35 4187.56 -1636.64 4179.87 cv
-1717.84 4174.55 -1779.36 4104.41 -1774.04 4023.21 cv
-1768.72 3942 -1698.57 3880.49 -1617.37 3885.81 cv
-1616.32 3885.88 -1615.27 3885.96 -1614.22 3886.05 cv
-1613.36 3886.13 li
cp
f
-1617.89 3943.28 mo
-1548.2 3950.14 -1478.75 3961.51 -1410.46 3978.03 cv
-1342.18 3994.53 -1275.03 4016 -1210.07 4042.4 cv
-1145.17 4068.94 -1082.35 4100 -1022.11 4134.74 cv
-962.043 4169.75 -904.36 4208.09 -849.17 4248.93 cv
-828.615 4264.38 li
-825.202 4266.97 -821.734 4269.51 -818.368 4272.14 cv
-808.254 4280.02 li
-788.037 4295.8 li
-768.133 4311.85 li
-758.174 4319.87 li
-748.361 4328.01 li
-728.75 4344.3 li
-709.395 4360.78 li
-702.945 4366.28 -696.477 4371.77 -690.155 4377.35 cv
-671.08 4394.03 li
-664.721 4399.59 -658.494 4405.23 -652.194 4410.83 cv
-639.559 4422 -627.231 4433.36 -614.778 4444.62 cv
-590.063 4467.26 -565.537 4489.98 -541.339 4512.74 cv
-505.095 4546.82 li
-469.136 4580.72 li
-445.569 4602.87 -421.801 4624.74 -397.814 4646.3 cv
-373.811 4667.85 -349.632 4689.14 -325.162 4710.02 cv
-300.716 4730.93 -276.078 4751.54 -251.168 4771.74 cv
-151.611 4852.63 -48.4092 4927.86 57.9033 4995.58 cv
111.081 5029.38 165.019 5061.33 219.746 5090.79 cv
274.445 5120.32 329.971 5147.27 386.16 5171.14 cv
400.226 5177.03 414.311 5182.84 428.45 5188.34 cv
439.053 5192.47 li
449.687 5196.46 li
456.768 5199.16 463.879 5201.67 470.976 5204.27 cv
499.402 5214.45 527.996 5223.59 556.706 5231.68 cv
585.415 5239.8 614.264 5246.63 643.144 5252.33 cv
650.361 5253.83 657.591 5255.04 664.814 5256.36 cv
668.425 5257.05 672.042 5257.56 675.655 5258.16 cv
679.269 5258.73 682.882 5259.35 686.496 5259.89 cv
697.338 5261.43 li
702.758 5262.21 li
708.179 5262.88 li
719.017 5264.23 li
722.629 5264.66 726.24 5264.99 729.852 5265.39 cv
744.298 5266.97 758.725 5267.99 773.139 5268.88 cv
787.54 5269.56 801.937 5270.14 816.275 5270.11 cv
830.631 5270.26 844.922 5269.79 859.195 5269.22 cv
873.437 5268.39 887.668 5267.48 901.795 5265.91 cv
915.955 5264.53 930.004 5262.52 944.028 5260.39 cv
954.506 5258.59 li
957.994 5257.96 961.502 5257.44 964.967 5256.7 cv
971.909 5255.3 978.886 5254.04 985.779 5252.42 cv
1013.43 5246.29 1040.8 5238.83 1067.63 5229.54 cv
1094.48 5220.29 1120.91 5209.62 1146.81 5197.45 cv
1172.73 5185.32 1198.06 5171.58 1222.85 5156.62 cv
1272.42 5126.65 1319.65 5091.37 1364.29 5051.97 cv
1408.93 5012.56 1451.08 4969.14 1490.72 4922.75 cv
1510.48 4899.49 1529.72 4875.57 1548.36 4851.03 cv
1555.33 4841.8 li
1557.65 4838.73 1559.99 4835.67 1562.25 4832.52 cv
1575.91 4813.79 li
1584.85 4801.13 1593.86 4788.53 1602.54 4775.62 cv
1609.11 4765.99 li
1611.31 4762.79 1613.41 4759.5 1615.57 4756.26 cv
1628.44 4736.75 li
1654.98 4695.3 li
1674.23 4665.5 1694.49 4636.4 1715.7 4608.04 cv
1736.96 4579.73 1759.25 4552.25 1782.35 4525.53 cv
1805.48 4498.83 1829.39 4472.87 1854.23 4447.87 cv
1953.52 4347.8 2065.4 4261.44 2185.39 4190.13 cv
2215.39 4172.29 2245.85 4155.29 2276.79 4139.29 cv
2307.74 4123.32 2339.13 4108.27 2370.86 4094.06 cv
2382.78 4088.78 li
2386.76 4087.04 2390.71 4085.23 2394.72 4083.57 cv
2418.73 4073.43 li
2442.89 4063.69 li
2448.93 4061.26 li
2455.01 4058.93 li
2467.16 4054.28 li
2499.61 4041.96 2532.37 4030.52 2565.39 4019.99 cv
2631.49 3999.1 2698.57 3981.57 2766.41 3968.06 cv
2779.12 3965.49 li
2791.87 3963.1 li
2804.62 3960.74 li
2810.99 3959.55 li
2817.38 3958.47 li
2842.95 3954.17 li
2868.57 3950.28 li
2902.77 3945.33 2937.08 3941.26 2971.47 3938.07 cv
3005.86 3934.92 3040.33 3932.75 3074.81 3931.39 cv
3087.75 3930.93 li
3092.06 3930.78 3096.37 3930.61 3100.68 3930.55 cv
3126.56 3930.06 li
3143.82 3929.99 3161.07 3929.87 3178.32 3930.22 cv
3212.81 3930.8 3247.29 3932.14 3281.7 3934.58 cv
3316.11 3937 3350.45 3940.2 3384.69 3944.3 cv
3452.11 3952.52 3519.58 3962.92 3586.97 3976.62 cv
3620.66 3983.47 3654.32 3991.15 3687.9 3999.8 cv
3700.49 4003.07 li
3713.06 4006.5 li
3721.45 4008.72 3729.81 4011.15 3738.18 4013.55 cv
3744.46 4015.35 li
3750.72 4017.24 li
3763.26 4021 li
3771.61 4023.53 3779.94 4026.24 3788.29 4028.83 cv
3835.77 4043.56 3862.33 4093.99 3847.6 4141.47 cv
3832.88 4188.96 3782.45 4215.51 3734.96 4200.79 cv
3734.33 4200.59 3733.71 4200.39 3733.09 4200.18 cv
3731.06 4199.49 li
3723.77 4197.02 3716.52 4194.49 3709.19 4192.1 cv
3698.18 4188.56 li
3692.67 4186.8 li
3687.12 4185.12 li
3679.72 4182.88 3672.34 4180.6 3664.87 4178.5 cv
3653.7 4175.32 li
3642.45 4172.28 li
3612.46 4164.18 3582.04 4157.04 3551.33 4150.71 cv
3489.9 4138.05 3427.26 4128.66 3364.1 4121.57 cv
3333.02 4118.19 3301.86 4115.63 3270.66 4113.92 cv
3247.25 4112.78 li
3223.82 4112.06 li
3217.97 4111.88 li
3212.11 4111.8 li
3200.39 4111.64 li
3188.68 4111.48 li
3176.96 4111.52 li
3161.34 4111.46 3145.72 4111.85 3130.11 4112.17 cv
3106.7 4113.02 li
3102.8 4113.13 3098.9 4113.35 3095 4113.56 cv
3083.31 4114.18 li
3052.13 4115.96 3020.99 4118.4 2989.98 4121.89 cv
2958.96 4125.39 2928.05 4129.68 2897.28 4134.75 cv
2874.23 4138.71 li
2851.25 4143.05 li
2845.5 4144.13 li
2839.78 4145.32 li
2828.33 4147.68 li
2816.89 4150.05 li
2805.49 4152.61 li
2744.64 4166.1 2684.69 4183.23 2625.84 4203.24 cv
2508.31 4243.76 2395.44 4297.03 2291.16 4363 cv
2186.75 4428.73 2090.89 4506.98 2007.21 4595.83 cv
1986.27 4618.03 1966.22 4640.99 1946.91 4664.5 cv
1927.62 4688.02 1909.1 4712.12 1891.5 4736.84 cv
1873.93 4761.58 1857.23 4786.88 1841.43 4812.7 cv
1815.81 4854.94 li
1811.28 4862.29 1806.65 4869.6 1802.07 4876.94 cv
1797.53 4884.29 1792.78 4891.54 1788.06 4898.81 cv
1778.72 4913.39 1768.94 4927.76 1759.22 4942.17 cv
1744.31 4963.61 li
1741.85 4967.2 1739.28 4970.73 1736.74 4974.27 cv
1729.09 4984.89 li
1708.57 5013.16 1687.28 5041.03 1664.96 5068.29 cv
1642.63 5095.53 1619.29 5122.18 1594.96 5148.14 cv
1570.61 5174.08 1545.24 5199.32 1518.68 5223.59 cv
1465.63 5272.13 1407.9 5316.95 1345.49 5355.92 cv
1329.91 5365.7 1313.98 5375 1297.86 5384.02 cv
1295.86 5385.17 1293.82 5386.27 1291.78 5387.36 cv
1285.67 5390.64 li
1273.43 5397.19 li
1261.02 5403.46 li
1254.81 5406.59 li
1251.7 5408.16 li
1248.56 5409.66 li
1215.16 5425.85 1180.76 5440.35 1145.56 5452.83 cv
1141.18 5454.46 1136.74 5455.91 1132.31 5457.4 cv
1119.02 5461.85 li
1105.63 5466 li
1101.16 5467.36 1096.72 5468.81 1092.2 5470.04 cv
1083.2 5472.56 1074.23 5475.22 1065.15 5477.47 cv
1051.56 5480.95 li
1037.89 5484.13 li
1028.8 5486.32 1019.62 5488.11 1010.46 5490.02 cv
1005.89 5491 1001.28 5491.77 996.688 5492.63 cv
992.089 5493.46 987.494 5494.33 982.889 5495.12 cv
964.449 5498.12 945.965 5500.89 927.42 5502.86 cv
908.885 5505.01 890.313 5506.38 871.746 5507.54 cv
853.185 5508.45 834.615 5509.14 816.098 5509.09 cv
797.563 5509.21 779.1 5508.58 760.667 5507.78 cv
742.268 5506.76 723.895 5505.5 705.651 5503.62 cv
701.091 5503.14 696.518 5502.72 691.967 5502.21 cv
678.334 5500.57 li
671.519 5499.75 li
664.733 5498.8 li
651.164 5496.9 li
646.648 5496.24 642.157 5495.5 637.653 5494.8 cv
633.158 5494.06 628.636 5493.41 624.169 5492.59 cv
615.219 5490.99 606.236 5489.49 597.35 5487.69 cv
561.708 5480.8 526.532 5472.46 491.97 5462.73 cv
457.401 5453.01 423.316 5442.18 389.896 5430.06 cv
381.566 5426.99 373.178 5424.03 364.931 5420.8 cv
352.519 5416.03 li
340.188 5411.12 li
323.732 5404.6 307.512 5397.67 291.353 5390.64 cv
226.89 5362.24 164.732 5330.16 104.867 5295.18 cv
44.9424 5260.26 -12.7129 5222.48 -68.522 5182.74 cv
-180.091 5103.16 -284.084 5015.7 -383.399 4924.59 cv
-433.058 4879.02 -481.523 4832.47 -529.126 4785.3 cv
-552.915 4761.71 -576.507 4737.98 -599.88 4714.1 cv
-634.347 4678.97 li
-645.804 4667.35 -657.287 4655.75 -668.757 4644.26 cv
-680.23 4632.71 -691.764 4621.37 -703.276 4609.98 cv
-709.021 4604.25 -714.836 4598.7 -720.616 4593.05 cv
-726.412 4587.45 -732.175 4581.76 -737.997 4576.22 cv
-749.625 4565.12 -761.257 4553.96 -772.995 4543.08 cv
-778.86 4537.63 -784.689 4532.1 -790.584 4526.7 cv
-808.295 4510.55 li
-814.18 4505.13 -820.143 4499.87 -826.096 4494.58 cv
-832.052 4489.3 -837.986 4483.97 -843.97 4478.73 cv
-862.006 4463.19 li
-871.027 4455.42 li
-880.136 4447.81 li
-898.368 4432.61 li
-916.792 4417.76 li
-926.007 4410.34 li
-929.079 4407.86 -932.216 4405.51 -935.317 4403.09 cv
-953.974 4388.65 li
-957.064 4386.21 -960.242 4383.93 -963.381 4381.58 cv
-972.826 4374.58 li
-982.273 4367.57 li
-983.851 4366.41 -985.414 4365.22 -987.004 4364.09 cv
-991.788 4360.7 li
-1010.92 4347.14 li
-1015.71 4343.75 li
-1017.3 4342.63 -1018.93 4341.57 -1020.54 4340.47 cv
-1030.24 4333.94 li
-1039.94 4327.41 li
-1043.18 4325.25 -1046.37 4322.99 -1049.66 4320.94 cv
-1069.32 4308.39 li
-1072.6 4306.32 -1075.86 4304.18 -1079.16 4302.14 cv
-1089.12 4296.14 li
-1109.04 4284.15 li
-1162.56 4252.98 -1217.86 4225.59 -1274.77 4202.63 cv
-1388.7 4157.05 -1509.33 4130 -1632.11 4122.72 cv
-1681.74 4119.78 -1719.58 4077.16 -1716.64 4027.53 cv
-1713.7 3977.9 -1671.08 3940.06 -1621.45 3943 cv
-1620.4 3943.06 -1619.36 3943.14 -1618.33 3943.24 cv
-1617.89 3943.28 li
cp
.356863 .686275 .698039 rgb
f
-1613.36 -1113.87 mo
-1540.93 -1107.22 -1468.53 -1095.62 -1397.29 -1078.52 cv
-1370.6 -1072.02 li
-1361.74 -1069.69 -1352.93 -1067.16 -1344.1 -1064.73 cv
-1330.86 -1061.03 li
-1324.25 -1059.18 li
-1322.04 -1058.57 -1319.87 -1057.83 -1317.68 -1057.16 cv
-1291.46 -1048.95 li
-1278.36 -1044.82 li
-1265.39 -1040.3 li
-1239.48 -1031.22 li
-1235.14 -1029.76 -1230.9 -1028.06 -1226.63 -1026.43 cv
-1213.83 -1021.5 li
-1201.04 -1016.57 li
-1196.78 -1014.9 -1192.48 -1013.33 -1188.3 -1011.51 cv
-1163.07 -1000.88 li
-1150.47 -995.54 li
-1138.04 -989.859 li
-1113.2 -978.491 li
-1110.1 -977.067 li
-1107.04 -975.564 li
-1100.93 -972.557 li
-1088.71 -966.533 li
-1076.49 -960.5 li
-1070.39 -957.477 li
-1064.38 -954.305 li
-1040.37 -941.596 li
-1032.31 -937.428 -1024.5 -932.928 -1016.63 -928.51 cv
-1008.77 -924.071 -1000.88 -919.668 -993.06 -915.183 cv
-969.905 -901.333 li
-958.334 -894.396 li
-954.508 -892.048 -950.75 -889.622 -946.956 -887.237 cv
-924.252 -872.854 li
-920.436 -870.49 -916.785 -867.955 -913.05 -865.506 cv
-901.905 -858.097 li
-890.765 -850.68 li
-888.915 -849.437 -887.036 -848.222 -885.212 -846.955 cv
-879.746 -843.145 li
-857.892 -827.89 li
-852.431 -824.073 li
-850.618 -822.794 -848.851 -821.475 -847.058 -820.177 cv
-836.34 -812.36 li
-825.626 -804.537 li
-822.068 -801.918 -818.448 -799.349 -814.974 -796.662 cv
-793.932 -780.702 li
-790.44 -778.03 -786.886 -775.404 -783.447 -772.693 cv
-773.119 -764.564 li
-752.483 -748.289 li
-732.207 -731.761 li
-722.072 -723.493 li
-712.103 -715.122 li
-692.176 -698.372 li
-672.544 -681.464 li
-666.006 -675.823 -659.448 -670.191 -653.057 -664.478 cv
-601.457 -618.985 -551.781 -572.593 -503.518 -526.302 cv
-467.488 -491.625 li
-431.915 -457.253 li
-408.88 -434.993 -385.69 -412.994 -362.34 -391.245 cv
-315.602 -347.799 -268.055 -305.54 -219.568 -264.783 cv
-122.632 -183.272 -21.8823 -107.636 82.439 -40.7437 cv
134.606 -7.35498 187.6 23.917 241.328 52.3989 cv
268.193 66.6377 295.208 80.2593 322.394 93.0376 cv
349.583 105.815 376.9 117.879 404.319 129.101 cv
431.754 140.259 459.281 150.604 486.868 160.01 cv
490.311 161.231 493.772 162.303 497.219 163.465 cv
507.566 166.884 li
517.925 170.148 li
521.376 171.247 524.827 172.336 528.285 173.345 cv
538.646 176.46 li
542.096 177.523 545.557 178.446 549.01 179.45 cv
552.465 180.422 555.916 181.448 559.372 182.384 cv
569.74 185.165 li
574.92 186.567 li
580.103 187.879 li
590.463 190.512 li
593.917 191.381 597.373 192.155 600.826 192.985 cv
604.279 193.782 607.729 194.67 611.184 195.399 cv
618.088 196.891 624.985 198.536 631.884 199.873 cv
642.227 201.988 li
652.565 203.911 li
680.118 209.084 707.594 212.962 734.91 215.589 cv
741.746 216.323 748.555 216.806 755.368 217.357 cv
758.777 217.669 762.172 217.821 765.57 218.031 cv
775.762 218.633 li
789.32 219.185 802.86 219.715 816.313 219.61 cv
829.79 219.682 843.172 219.209 856.531 218.628 cv
869.85 217.806 883.153 216.918 896.333 215.403 cv
909.549 214.075 922.638 212.13 935.704 210.113 cv
945.459 208.394 li
948.706 207.799 951.976 207.305 955.198 206.604 cv
961.657 205.269 968.153 204.087 974.563 202.547 cv
1000.29 196.741 1025.72 189.723 1050.68 180.97 cv
1075.66 172.274 1100.26 162.221 1124.43 150.77 cv
1126.71 149.716 li
1128.96 148.599 li
1133.46 146.368 li
1142.48 141.927 li
1151.41 137.241 li
1155.88 134.91 li
1157.38 134.141 1158.87 133.363 1160.34 132.526 cv
1172.17 126.046 1183.95 119.372 1195.55 112.246 cv
1242.03 83.9126 1286.6 50.4141 1329.01 12.7603 cv
1350.21 -6.07031 1370.86 -25.9468 1390.96 -46.7173 cv
1411.07 -67.4873 1430.69 -89.0747 1449.72 -111.497 cv
1468.72 -133.945 1487.17 -157.162 1505.15 -180.972 cv
1511.87 -189.927 li
1514.11 -192.914 1516.37 -195.878 1518.55 -198.936 cv
1531.75 -217.139 li
1540.4 -229.451 1549.11 -241.698 1557.52 -254.279 cv
1561.76 -260.529 1566.02 -266.76 1570.13 -273.138 cv
1582.59 -292.177 li
1608.98 -333.667 li
1628.84 -364.598 1649.75 -394.809 1671.63 -424.238 cv
1693.55 -453.643 1716.56 -482.163 1740.4 -509.894 cv
1764.27 -537.598 1788.96 -564.539 1814.58 -590.479 cv
1917.09 -694.254 2032.54 -783.7 2156.22 -857.562 cv
2279.82 -931.673 2411.71 -990.051 2547.68 -1033.71 cv
2683.77 -1077.1 2824.13 -1105.51 2965.75 -1118.72 cv
3001.16 -1122.05 3036.65 -1124.24 3072.16 -1125.72 cv
3085.48 -1126.21 li
3089.92 -1126.38 3094.36 -1126.56 3098.8 -1126.62 cv
3125.45 -1127.17 li
3143.22 -1127.27 3160.98 -1127.42 3178.75 -1127.08 cv
3249.81 -1126.17 3320.78 -1121.15 3391.33 -1112.82 cv
3460.14 -1104.49 3529.2 -1093.86 3598.51 -1079.75 cv
3667.8 -1065.67 3737.3 -1047.96 3806.51 -1025.52 cv
3883.92 -1000.43 3926.34 -917.341 3901.25 -839.932 cv
3876.16 -762.522 3793.06 -720.109 3715.66 -745.199 cv
3714.95 -745.43 3713.53 -745.908 3712.83 -746.147 cv
3657.32 -765.389 3599.3 -780.645 3539.79 -792.92 cv
3480.27 -805.162 3419.23 -814.339 3357.46 -821.305 cv
3327.42 -824.598 3297.3 -827.069 3267.13 -828.76 cv
3244.5 -829.877 li
3221.85 -830.599 li
3216.18 -830.775 li
3210.52 -830.858 li
3199.19 -831.029 li
3187.86 -831.195 li
3176.53 -831.173 li
3161.43 -831.257 3146.32 -830.89 3131.22 -830.602 cv
3108.58 -829.806 li
3104.81 -829.704 3101.04 -829.493 3097.27 -829.293 cv
3085.96 -828.707 li
3082.19 -828.5 3078.42 -828.348 3074.65 -828.1 cv
3063.35 -827.322 li
3055.82 -826.789 3048.29 -826.338 3040.77 -825.627 cv
3033.25 -824.956 3025.73 -824.369 3018.21 -823.642 cv
2995.69 -821.319 li
2965.7 -817.976 2935.79 -813.872 2906.03 -809.008 cv
2883.73 -805.205 li
2861.51 -801.023 li
2855.96 -799.978 li
2850.42 -798.833 li
2839.35 -796.551 li
2828.29 -794.263 li
2817.26 -791.795 li
2758.41 -778.837 2700.42 -762.379 2643.55 -743.052 cv
2615.14 -733.31 2587.04 -722.758 2559.26 -711.504 cv
2548.85 -707.253 li
2543.65 -705.127 li
2538.49 -702.909 li
2517.86 -694.03 li
2497.39 -684.818 li
2493.96 -683.315 2490.61 -681.671 2487.22 -680.091 cv
2477.07 -675.316 li
2450.08 -662.463 2423.47 -648.883 2397.3 -634.584 cv
2371.15 -620.258 2345.51 -605.103 2320.33 -589.306 cv
2219.61 -526.131 2127.32 -450.959 2046.86 -365.818 cv
2006.64 -323.234 1969.49 -278.096 1935.56 -230.877 cv
1918.67 -207.214 1902.62 -183.02 1887.43 -158.337 cv
1861.66 -116.135 li
1856.99 -108.627 1852.23 -101.154 1847.51 -93.6636 cv
1842.83 -86.1587 1837.95 -78.7314 1833.09 -71.2964 cv
1794.38 -11.7441 1752.07 46.3975 1705.96 102.531 cv
1682.84 130.563 1658.67 158.057 1633.38 184.833 cv
1608.07 211.593 1581.63 237.656 1553.96 262.799 cv
1498.67 313.091 1438.29 359.682 1372.79 400.292 cv
1356.45 410.476 1339.71 420.177 1322.77 429.585 cv
1320.67 430.785 1318.53 431.932 1316.39 433.068 cv
1309.96 436.493 li
1297.09 443.317 li
1284.04 449.869 li
1277.51 453.136 li
1274.25 454.766 li
1270.94 456.335 li
1235.8 473.248 1199.58 488.367 1162.51 501.398 cv
1157.9 503.091 1153.22 504.608 1148.56 506.164 cv
1134.56 510.799 li
1120.45 515.132 li
1115.74 516.548 1111.06 518.053 1106.31 519.34 cv
1096.83 521.973 1087.38 524.74 1077.81 527.077 cv
1063.5 530.694 li
1049.11 533.998 li
1039.53 536.271 1029.87 538.136 1020.23 540.112 cv
1015.42 541.133 1010.57 541.934 1005.73 542.824 cv
1000.9 543.686 996.059 544.58 991.214 545.398 cv
971.815 548.509 952.371 551.354 932.882 553.364 cv
913.4 555.573 893.899 556.968 874.41 558.129 cv
854.935 559.031 835.457 559.716 816.06 559.586 cv
811.211 559.559 806.351 559.604 801.512 559.502 cv
786.998 559.173 li
779.743 558.985 li
772.51 558.677 li
758.044 558.026 li
738.812 556.874 719.618 555.48 700.593 553.412 cv
695.837 552.894 691.067 552.421 686.324 551.853 cv
672.12 550.066 li
665.02 549.164 li
657.956 548.145 li
643.832 546.088 li
639.134 545.368 634.467 544.561 629.784 543.796 cv
625.112 543.001 620.409 542.289 615.771 541.402 cv
606.476 539.679 597.144 538.043 587.929 536.112 cv
574.078 533.272 li
560.316 530.221 li
551.116 528.24 542.05 525.962 532.932 523.794 cv
528.369 522.714 523.877 521.484 519.348 520.332 cv
514.834 519.15 510.296 518.013 505.804 516.787 cv
492.343 513.07 li
485.616 511.205 li
478.937 509.246 li
443.294 498.821 408.267 487.193 374.004 474.323 cv
339.735 461.461 306.134 447.534 273.193 432.682 cv
240.274 417.804 208.028 401.987 176.387 385.425 cv
172.416 383.375 168.477 381.286 164.553 379.177 cv
152.766 372.874 li
144.944 368.626 137.148 364.349 129.375 360.047 cv
113.887 351.367 98.4863 342.582 83.2847 333.576 cv
22.3608 297.68 -36.2388 259.212 -93.0571 219.063 cv
-121.471 198.992 -149.397 178.453 -176.937 157.562 cv
-190.729 147.143 -204.374 136.586 -217.968 125.986 cv
-231.519 115.346 -245.005 104.643 -258.384 93.8579 cv
-311.939 50.7393 -364.04 6.37402 -414.999 -38.8828 cv
-465.958 -84.1396 -515.75 -130.318 -564.6 -177.149 cv
-589.025 -200.561 -613.197 -224.159 -637.101 -247.928 cv
-671.954 -282.581 li
-683.494 -294.01 -695.064 -305.436 -706.579 -316.695 cv
-718.11 -328.05 -729.629 -339.183 -741.149 -350.362 cv
-746.907 -355.985 -752.677 -361.427 -758.439 -366.967 cv
-764.208 -372.461 -769.959 -378.055 -775.741 -383.468 cv
-787.29 -394.338 -798.854 -405.269 -810.477 -415.882 cv
-816.288 -421.206 -822.072 -426.616 -827.902 -431.87 cv
-845.394 -447.617 li
-851.209 -452.911 -857.082 -458.031 -862.946 -463.174 cv
-880.543 -478.593 li
-898.264 -493.683 li
-907.129 -501.218 li
-916.062 -508.576 li
-933.921 -523.303 li
-951.927 -537.651 li
-960.929 -544.825 li
-963.927 -547.221 -966.979 -549.486 -970.001 -551.824 cv
-988.17 -565.757 li
-1036.86 -602.362 -1086.79 -635.913 -1138.09 -665.925 cv
-1157.46 -676.842 li
-1163.92 -680.469 -1170.34 -684.197 -1176.91 -687.526 cv
-1196.51 -697.82 li
-1201.4 -700.399 li
-1206.36 -702.818 li
-1216.27 -707.657 li
-1226.17 -712.506 li
-1231.13 -714.935 li
-1233.6 -716.149 li
-1236.11 -717.279 li
-1256.14 -726.333 li
-1266.16 -730.864 li
-1276.29 -735.055 li
-1296.54 -743.459 li
-1405.04 -786.721 -1519.35 -812.442 -1636.64 -820.127 cv
-1717.84 -825.447 -1779.36 -895.588 -1774.04 -976.792 cv
-1768.72 -1058 -1698.57 -1119.51 -1617.37 -1114.19 cv
-1616.32 -1114.12 -1615.27 -1114.04 -1614.22 -1113.95 cv
-1613.36 -1113.87 li
cp
1 1 1 rgb
f
80 lw
-2311.92 3744.89 mo
104.5 3312.5 li
1738 -1086.07 li
@
863 6270.07 mo
1640.5 4176.48 li
@
2012.67 3865.75 mo
4308.13 3455 li
@
-1617.89 -1056.72 mo
-1548.2 -1049.86 -1478.75 -1038.49 -1410.46 -1021.97 cv
-1342.18 -1005.47 -1275.03 -984.003 -1210.07 -957.603 cv
-1145.17 -931.057 -1082.35 -900.002 -1022.11 -865.258 cv
-962.043 -830.253 -904.36 -791.91 -849.17 -751.071 cv
-828.615 -735.616 li
-825.202 -733.027 -821.734 -730.489 -818.368 -727.857 cv
-808.254 -719.977 li
-788.037 -704.202 li
-768.133 -688.15 li
-758.174 -680.13 li
-748.361 -671.993 li
-728.75 -655.7 li
-709.395 -639.216 li
-702.945 -633.72 -696.477 -628.234 -690.155 -622.649 cv
-671.08 -605.966 li
-664.721 -600.407 -658.494 -594.768 -652.194 -589.171 cv
-639.559 -577.998 -627.231 -566.644 -614.778 -555.376 cv
-590.063 -532.74 -565.537 -510.018 -541.339 -487.261 cv
-505.095 -453.176 li
-469.136 -419.281 li
-445.569 -397.129 -421.801 -375.262 -397.814 -353.695 cv
-373.811 -332.151 -349.632 -310.861 -325.162 -289.981 cv
-300.716 -269.07 -276.078 -248.459 -251.168 -228.256 cv
-151.611 -147.374 -48.4092 -72.144 57.9033 -4.4209 cv
111.081 29.3818 165.019 61.333 219.746 90.7959 cv
274.445 120.322 329.971 147.271 386.16 171.143 cv
400.226 177.034 414.311 182.839 428.45 188.342 cv
439.053 192.475 li
449.687 196.462 li
456.768 199.165 463.879 201.673 470.976 204.269 cv
499.401 214.451 527.997 223.583 556.708 231.678 cv
585.417 239.798 614.266 246.629 643.154 252.28 cv
650.373 253.769 657.604 254.967 664.828 256.282 cv
668.439 256.966 672.056 257.471 675.669 258.07 cv
679.284 258.637 682.897 259.255 686.511 259.788 cv
697.354 261.317 li
702.774 262.089 li
708.194 262.753 li
719.032 264.091 li
722.645 264.516 726.255 264.849 729.867 265.237 cv
744.313 266.797 758.738 267.8 773.15 268.671 cv
787.548 269.327 801.941 269.896 816.275 269.832 cv
830.627 269.95 844.911 269.443 859.175 268.833 cv
873.408 267.977 887.627 267.021 901.743 265.427 cv
915.891 264.027 929.924 261.968 943.931 259.804 cv
954.395 257.97 li
957.878 257.336 961.382 256.8 964.841 256.057 cv
971.773 254.634 978.74 253.359 985.623 251.719 cv
995.977 249.393 li
1006.27 246.811 li
1013.16 245.184 1019.94 243.174 1026.77 241.332 cv
1030.2 240.441 1033.57 239.34 1036.96 238.338 cv
1047.13 235.273 li
1057.22 231.958 li
1060.59 230.852 1063.97 229.794 1067.29 228.566 cv
1174.58 191.663 1273.95 129.131 1362.48 49.9658 cv
1406.79 10.3945 1448.54 -33.1904 1487.79 -79.6992 cv
1507.36 -103.01 1526.38 -127.001 1544.81 -151.599 cv
1551.69 -160.85 li
1553.99 -163.935 1556.3 -167 1558.53 -170.151 cv
1572.03 -188.93 li
1580.86 -201.613 1589.77 -214.238 1598.33 -227.174 cv
1602.66 -233.605 1607 -240.018 1611.21 -246.563 cv
1623.9 -266.115 li
1650.16 -307.734 li
1669.3 -337.761 1689.46 -367.104 1710.58 -395.703 cv
1731.76 -424.258 1753.97 -452 1777.01 -478.982 cv
1785.66 -489.091 li
1788.52 -492.476 1791.53 -495.736 1794.45 -499.063 cv
1803.3 -508.994 li
1807.72 -513.957 li
1812.22 -518.843 li
1818.25 -525.337 1824.24 -531.864 1830.3 -538.318 cv
1848.74 -557.436 li
1947.93 -658.543 2059.96 -745.968 2180.33 -818.143 cv
2300.62 -890.572 2429.23 -947.767 2562.01 -990.264 cv
2694.88 -1032.58 2832.11 -1059.9 2970.44 -1072.18 cv
3005.02 -1075.31 3039.68 -1077.29 3074.35 -1078.49 cv
3087.36 -1078.89 li
3091.69 -1079.02 3096.03 -1079.17 3100.36 -1079.2 cv
3126.38 -1079.57 li
3143.72 -1079.56 3161.05 -1079.6 3178.39 -1079.15 cv
3247.72 -1077.84 3316.91 -1072.34 3385.6 -1063.52 cv
3419.38 -1059.05 3453.11 -1053.93 3486.86 -1048.11 cv
3499.51 -1045.93 li
3512.16 -1043.61 li
3524.8 -1041.27 li
3529.02 -1040.5 3533.23 -1039.63 3537.45 -1038.81 cv
3545.87 -1037.14 3554.29 -1035.5 3562.71 -1033.68 cv
3571.13 -1031.89 3579.55 -1030.16 3587.96 -1028.23 cv
3621.61 -1020.75 3655.19 -1012.38 3688.61 -1002.91 cv
3722.04 -993.464 3755.31 -982.933 3788.29 -971.166 cv
3835.11 -954.459 3859.52 -902.958 3842.82 -856.134 cv
3826.57 -810.594 3777.4 -786.251 3731.64 -800.323 cv
3731.06 -800.506 li
3613.54 -836.841 3489.29 -857.962 3363.19 -870.612 cv
3239.32 -882.899 3114.32 -881.896 2991.01 -867.851 cv
2960.19 -864.29 2929.47 -859.946 2898.9 -854.821 cv
2876 -850.818 li
2853.18 -846.445 li
2847.47 -845.353 li
2841.79 -844.161 li
2830.42 -841.781 li
2819.05 -839.394 li
2807.72 -836.834 li
2777.51 -830.069 2747.47 -822.545 2717.73 -814.064 cv
2687.98 -805.631 2658.45 -796.462 2629.22 -786.501 cv
2600.01 -776.47 2571.11 -765.625 2542.52 -754.068 cv
2531.82 -749.702 li
2526.46 -747.521 li
2521.15 -745.247 li
2499.91 -736.139 li
2478.83 -726.689 li
2475.3 -725.146 2471.84 -723.461 2468.35 -721.839 cv
2457.9 -716.945 li
2430.08 -703.776 2402.65 -689.851 2375.67 -675.178 cv
2348.7 -660.47 2322.22 -644.937 2296.22 -628.725 cv
2192.19 -563.864 2096.48 -486.671 2012.69 -398.861 cv
1991.74 -376.914 1971.63 -354.239 1952.25 -330.994 cv
1932.9 -307.732 1914.29 -283.888 1896.61 -259.412 cv
1878.96 -234.919 1862.15 -209.857 1846.24 -184.27 cv
1820.35 -142.197 li
1815.76 -134.858 1811.07 -127.558 1806.44 -120.238 cv
1804.1 -116.59 1801.83 -112.904 1799.42 -109.286 cv
1792.27 -98.4014 li
1782.81 -83.8442 1772.93 -69.4937 1763.1 -55.1147 cv
1748.03 -33.7129 li
1745.54 -30.1338 1742.94 -26.6104 1740.37 -23.0752 cv
1732.64 -12.4741 li
1711.91 15.7329 1690.4 43.5332 1667.89 70.7334 cv
1622.79 125.06 1573.92 177.189 1520.49 225.594 cv
1467.08 273.959 1409.07 318.625 1346.41 357.423 cv
1330.78 367.152 1314.78 376.404 1298.6 385.378 cv
1296.59 386.523 1294.55 387.615 1292.5 388.697 cv
1286.36 391.959 li
1274.08 398.471 li
1261.64 404.716 li
1255.41 407.832 li
1252.3 409.388 li
1249.15 410.882 li
1215.65 426.999 1181.16 441.386 1145.9 453.803 cv
1141.51 455.417 1137.06 456.855 1132.63 458.335 cv
1119.31 462.746 li
1105.89 466.865 li
1101.41 468.211 1096.96 469.647 1092.44 470.868 cv
1083.42 473.368 1074.44 476.004 1065.34 478.227 cv
1051.73 481.678 li
1038.05 484.825 li
1028.94 486.998 1019.75 488.771 1010.59 490.66 cv
1006.01 491.637 1001.4 492.397 996.799 493.248 cv
992.195 494.069 987.596 494.925 982.987 495.707 cv
964.529 498.671 946.029 501.401 927.473 503.34 cv
908.926 505.471 890.342 506.796 871.767 507.924 cv
853.196 508.798 834.619 509.449 816.097 509.365 cv
797.558 509.462 779.091 508.819 760.656 507.989 cv
742.254 506.948 723.879 505.675 705.636 503.765 cv
701.075 503.29 696.502 502.863 691.952 502.341 cv
678.318 500.696 li
671.503 499.867 li
664.717 498.918 li
651.148 497.007 li
646.633 496.343 642.142 495.593 637.638 494.886 cv
633.144 494.149 628.623 493.496 624.155 492.668 cv
615.206 491.063 606.225 489.549 597.34 487.743 cv
561.706 480.804 526.531 472.467 491.969 462.732 cv
457.4 453.016 423.317 442.177 389.896 430.064 cv
381.566 426.993 373.178 424.03 364.931 420.798 cv
352.519 416.03 li
340.188 411.119 li
323.732 404.601 307.512 397.666 291.353 390.639 cv
226.89 362.243 164.732 330.158 104.867 295.179 cv
44.9424 260.265 -12.7129 222.476 -68.522 182.74 cv
-180.091 103.156 -284.084 15.6958 -383.399 -75.4097 cv
-433.058 -120.981 -481.523 -167.533 -529.126 -214.699 cv
-552.915 -238.293 -576.507 -262.023 -599.88 -285.899 cv
-634.347 -321.03 li
-645.804 -332.646 -657.287 -344.254 -668.757 -355.736 cv
-680.23 -367.286 -691.764 -378.628 -703.276 -390.024 cv
-709.021 -395.754 -714.836 -401.305 -720.616 -406.95 cv
-726.412 -412.554 -732.175 -418.243 -737.997 -423.778 cv
-749.625 -434.884 -761.257 -446.036 -772.995 -456.919 cv
-778.86 -462.373 -784.689 -467.905 -790.584 -473.298 cv
-808.295 -489.445 li
-814.18 -494.868 -820.143 -500.134 -826.096 -505.422 cv
-832.052 -510.703 -837.986 -516.027 -843.97 -521.265 cv
-862.006 -536.812 li
-871.027 -544.58 li
-880.136 -552.188 li
-898.368 -567.389 li
-916.792 -582.239 li
-926.007 -589.661 li
-929.079 -592.136 -932.216 -594.489 -935.317 -596.91 cv
-953.974 -611.347 li
-957.064 -613.788 -960.242 -616.068 -963.381 -618.419 cv
-972.826 -625.423 li
-982.273 -632.426 li
-983.851 -633.586 -985.414 -634.776 -987.004 -635.913 cv
-991.788 -639.3 li
-1010.92 -652.858 li
-1015.71 -656.245 li
-1017.3 -657.372 -1018.93 -658.432 -1020.54 -659.528 cv
-1030.24 -666.058 li
-1039.94 -672.593 li
-1043.18 -674.746 -1046.37 -677.012 -1049.66 -679.062 cv
-1069.32 -691.605 li
-1072.6 -693.685 -1075.86 -695.816 -1079.16 -697.855 cv
-1089.12 -703.858 li
-1109.04 -715.85 li
-1162.56 -747.019 -1217.86 -774.41 -1274.77 -797.369 cv
-1388.7 -842.951 -1509.33 -869.999 -1632.11 -877.281 cv
-1681.74 -880.225 -1719.58 -922.842 -1716.64 -972.47 cv
-1713.7 -1022.1 -1671.08 -1059.94 -1621.45 -1057 cv
-1620.4 -1056.94 -1619.36 -1056.86 -1618.33 -1056.76 cv
-1617.89 -1056.72 li
cp
.356863 .686275 .698039 rgb
f
60 lw
1153 2684 mo
2858 653 li
1 1 1 rgb
@
80 lw
2017 3915 mo
2017 4069.09 1892.09 4194 1738 4194 cv
1583.91 4194 1459 4069.09 1459 3915 cv
1459 3760.91 1583.91 3636 1738 3636 cv
1892.09 3636 2017 3760.91 2017 3915 cv
cp
@
105 3312 mo
1453.08 4681.13 li
@
-528 1307 mo
697.464 1715.81 li
1618.65 3662.75 li
@
60 lw
4093.01 1165.48 mo
2858 653 li
1067 720 li
@
1676 2483 mo
1699.14 2571.71 1844 2600 1951 2548 cv
2043.48 2503.06 2086 2385 2172 2339 cv
2258 2293 2504 2230 2436 2119 cv
2368 2008 2074 1880 1958 2005 cv
1891.57 2076.58 1863 2237 1783 2296 cv
1703 2355 1652 2391 1676 2483 cv
cp
.356863 .686275 .698039 rgb
f
50 lw
2632.88 3925.19 mo
2767 4334 li
1 1 1 rgb
@
80 lw
104.5 3312.5 mo
1738 -1086.07 li
@
8500 5000 mo
3500 5000 li
3500 0 li
8500 0 li
8500 5000 li
cp
.929412 .905882 .858824 rgb
f
4523 3026 mo
4439 2410 li
3700 2500 li
3803 3033 li
4523 3026 li
cp
.709804 .827451 .47451 rgb
f
4400 4460 mo
5048.5 5073.5 5735 5483 6296 5104 cv
6459 4665 li
6104 4327 li
5691 4705 li
4715 4219 li
4400 4460 li
cp
f
4368 -447 mo
5016.5 166.5 5677 533 6250 247 cv
6434 -268 li
6090 -593 li
5691 -295 li
4717 -721 li
4368 -447 li
cp
f
4455 1241 mo
4455 1340.41 4374.41 1421 4275 1421 cv
4175.59 1421 4095 1340.41 4095 1241 cv
4095 1141.59 4175.59 1061 4275 1061 cv
4374.41 1061 4455 1141.59 4455 1241 cv
cp
f
50 lw
6103.97 4326.56 mo
5671 4643 li
4699 4219 li
4437 4440 li
1 1 1 rgb
@
2177.73 1463.34 mo
3670 3569 li
3565 4580 li
4323.94 4935.71 li
@
3899 3528 mo
3700 2503 li
3954 2229 li
@
4394 2095 mo
3953.51 2229.45 li
3582.1 1488.31 li
@
3802.81 3032.56 mo
4523 3026 li
@
3166.19 2858.11 mo
3700 2500 li
4439 2410 li
5305 2772 li
6153 2684 li
7858 653 li
8076 275 li
7580 -1236 li
7514 -1882 li
@
4576 3407 mo
4699 4219 li
@
3645 3807 mo
4637.5 3865.75 li
5440 3663 li
@
4093 1303 mo
2478.98 1888.42 li
@
3075.59 1672.02 mo
3324 859 li
4472 -201 li
@
3075.59 6672.02 mo
3324 5859 li
4472 4799 li
@
4078 162.798 mo
5811 1375 li
@
5023.96 824.371 mo
4865 1438 li
5105 2688.4 li
4830 3362 li
@
3076 275 mo
3802.6 417.123 li
3827 1060 li
@
3565 4580 mo
2907 4842 li
@
3386.64 3886.13 mo
3404.75 3887.79 3422.85 3889.74 3440.94 3892.01 cv
3454.5 3893.77 li
3459.02 3894.4 3463.53 3895.11 3468.04 3895.78 cv
3495.12 3899.89 li
3504.16 3901.14 3513.13 3902.97 3522.13 3904.58 cv
3549.1 3909.55 li
3558.06 3911.42 3567 3913.4 3575.94 3915.33 cv
3589.36 3918.25 li
3596.06 3919.73 li
3602.72 3921.4 li
3673.94 3938.55 3744 3960.98 3811.7 3988.47 cv
3836.93 3999.11 li
3841.13 4000.9 3845.35 4002.64 3849.52 4004.47 cv
3861.95 4010.13 li
3886.81 4021.48 li
3911.3 4033.45 li
3923.53 4039.46 li
3927.6 4041.47 3931.57 4043.63 3935.6 4045.72 cv
3959.66 4058.35 li
3962.67 4059.94 li
3965.62 4061.59 li
3971.54 4064.89 li
3983.37 4071.48 li
3991.25 4075.89 3999.2 4080.22 4006.89 4084.87 cv
4030.13 4098.61 li
4034.03 4100.88 4037.81 4103.28 4041.62 4105.65 cv
4053.03 4112.77 li
4068.36 4122.15 4083.17 4132.08 4098.14 4141.86 cv
4100 4143.09 4101.88 4144.29 4103.72 4145.55 cv
4109.22 4149.32 li
4120.22 4156.88 li
4131.22 4164.44 li
4133.05 4165.7 4134.9 4166.95 4136.71 4168.23 cv
4142.11 4172.1 li
4163.7 4187.6 li
4165.49 4188.9 4167.31 4190.18 4169.08 4191.49 cv
4174.38 4195.45 li
4184.98 4203.37 li
4195.58 4211.29 li
4197.34 4212.61 4199.13 4213.91 4200.87 4215.25 cv
4206.08 4219.28 li
4226.91 4235.41 li
4230.41 4238.08 4233.82 4240.81 4237.22 4243.55 cv
4247.45 4251.75 li
4254.25 4257.23 4261.16 4262.64 4267.81 4268.22 cv
4287.92 4284.86 li
4291.3 4287.62 4294.58 4290.44 4297.87 4293.24 cv
4307.77 4301.65 li
4321.07 4312.81 4333.95 4324.19 4346.96 4335.51 cv
4372.7 4358.27 4398.14 4381.21 4422.95 4404.31 cv
4432.3 4412.96 li
4441.55 4421.63 li
4460.03 4438.97 li
4478.31 4456.33 li
4487.44 4465.02 li
4496.48 4473.7 li
4532.51 4508.37 li
4568.08 4542.74 li
4591.12 4565 4614.31 4587 4637.66 4608.75 cv
4684.39 4652.2 4731.94 4694.46 4780.43 4735.21 cv
4877.37 4816.72 4978.12 4892.36 5082.44 4959.25 cv
5134.6 4992.64 5187.6 5023.92 5241.32 5052.4 cv
5268.19 5066.64 5295.21 5080.26 5322.39 5093.04 cv
5349.58 5105.81 5376.9 5117.88 5404.32 5129.1 cv
5431.75 5140.26 5459.28 5150.6 5486.87 5160.01 cv
5490.31 5161.23 5493.77 5162.3 5497.22 5163.46 cv
5507.56 5166.88 li
5517.92 5170.15 li
5521.37 5171.25 5524.82 5172.33 5528.28 5173.34 cv
5538.64 5176.46 li
5542.09 5177.52 5545.55 5178.45 5549.01 5179.45 cv
5552.46 5180.42 5555.91 5181.45 5559.37 5182.38 cv
5569.74 5185.16 li
5574.92 5186.57 li
5580.1 5187.88 li
5590.46 5190.51 li
5593.91 5191.38 5597.37 5192.15 5600.82 5192.98 cv
5604.28 5193.78 5607.73 5194.67 5611.18 5195.4 cv
5618.09 5196.89 5624.98 5198.54 5631.88 5199.87 cv
5642.22 5201.99 li
5652.56 5203.91 li
5680.12 5209.08 5707.59 5212.96 5734.91 5215.59 cv
5748.57 5216.99 5762.18 5217.87 5775.76 5218.63 cv
5789.32 5219.18 5802.86 5219.71 5816.31 5219.61 cv
5829.79 5219.68 5843.17 5219.21 5856.53 5218.63 cv
5869.85 5217.8 5883.15 5216.92 5896.33 5215.4 cv
5909.55 5214.07 5922.64 5212.13 5935.7 5210.11 cv
5945.46 5208.39 li
5948.7 5207.8 5951.97 5207.3 5955.2 5206.6 cv
5961.66 5205.27 5968.15 5204.09 5974.56 5202.55 cv
6000.28 5196.74 6025.72 5189.72 6050.68 5180.97 cv
6075.66 5172.28 6100.26 5162.22 6124.43 5150.77 cv
6126.7 5149.72 li
6128.95 5148.6 li
6133.46 5146.37 li
6142.48 5141.93 li
6151.41 5137.24 li
6155.88 5134.91 li
6157.38 5134.14 6158.87 5133.36 6160.34 5132.53 cv
6172.17 5126.05 6183.94 5119.37 6195.55 5112.25 cv
6242.03 5083.91 6286.6 5050.42 6329.01 5012.76 cv
6350.21 4993.93 6370.86 4974.05 6390.96 4953.28 cv
6411.07 4932.51 6430.69 4910.93 6449.72 4888.5 cv
6468.72 4866.06 6487.17 4842.84 6505.15 4819.03 cv
6511.87 4810.07 li
6514.11 4807.09 6516.37 4804.12 6518.55 4801.07 cv
6531.75 4782.86 li
6540.39 4770.55 6549.11 4758.3 6557.51 4745.72 cv
6561.75 4739.47 6566.02 4733.24 6570.13 4726.86 cv
6582.59 4707.82 li
6608.97 4666.33 li
6628.84 4635.4 6649.75 4605.19 6671.63 4575.76 cv
6693.55 4546.36 6716.56 4517.84 6740.4 4490.11 cv
6764.27 4462.4 6788.96 4435.46 6814.58 4409.52 cv
6917.09 4305.75 7032.54 4216.3 7156.22 4142.44 cv
7279.82 4068.33 7411.71 4009.95 7547.68 3966.29 cv
7683.77 3922.9 7824.13 3894.49 7965.75 3881.28 cv
8001.16 3877.95 8036.65 3875.76 8072.16 3874.28 cv
8085.48 3873.79 li
8089.92 3873.62 8094.36 3873.44 8098.8 3873.38 cv
8125.45 3872.83 li
8143.21 3872.73 8160.98 3872.58 8178.75 3872.92 cv
8249.81 3873.83 8320.78 3878.85 8391.33 3887.17 cv
8460.14 3895.51 8529.2 3906.14 8598.51 3920.25 cv
8667.8 3934.33 8737.3 3952.04 8806.51 3974.48 cv
8712.83 4253.85 li
8657.32 4234.61 8599.3 4219.36 8539.79 4207.08 cv
8480.27 4194.84 8419.23 4185.66 8357.46 4178.7 cv
8327.42 4175.4 8297.3 4172.93 8267.13 4171.24 cv
8244.5 4170.12 li
8221.84 4169.4 li
8216.18 4169.22 li
8210.52 4169.14 li
8199.19 4168.97 li
8187.86 4168.8 li
8176.53 4168.83 li
8161.43 4168.74 8146.32 4169.11 8131.22 4169.4 cv
8108.58 4170.19 li
8104.81 4170.3 8101.04 4170.51 8097.27 4170.71 cv
8085.96 4171.29 li
8082.19 4171.5 8078.42 4171.65 8074.65 4171.9 cv
8063.35 4172.68 li
8055.82 4173.21 8048.29 4173.66 8040.77 4174.37 cv
8033.25 4175.04 8025.73 4175.63 8018.21 4176.36 cv
7995.69 4178.68 li
7965.7 4182.02 7935.79 4186.13 7906.03 4190.99 cv
7883.73 4194.79 li
7861.51 4198.98 li
7855.96 4200.02 li
7850.42 4201.17 li
7839.35 4203.45 li
7828.28 4205.74 li
7817.26 4208.21 li
7758.41 4221.16 7700.42 4237.62 7643.55 4256.95 cv
7615.14 4266.69 7587.04 4277.24 7559.26 4288.5 cv
7548.85 4292.75 li
7543.65 4294.87 li
7538.49 4297.09 li
7517.86 4305.97 li
7497.39 4315.18 li
7493.96 4316.68 7490.61 4318.33 7487.22 4319.91 cv
7477.07 4324.68 li
7450.07 4337.54 7423.47 4351.12 7397.3 4365.42 cv
7371.15 4379.74 7345.51 4394.9 7320.33 4410.69 cv
7219.61 4473.87 7127.32 4549.04 7046.86 4634.18 cv
7006.64 4676.77 6969.48 4721.91 6935.56 4769.12 cv
6918.67 4792.79 6902.62 4816.98 6887.43 4841.66 cv
6861.66 4883.87 li
6856.99 4891.38 6852.23 4898.85 6847.51 4906.34 cv
6842.83 4913.84 6837.95 4921.27 6833.08 4928.71 cv
6794.38 4988.26 6752.07 5046.4 6705.96 5102.53 cv
6682.84 5130.56 6658.67 5158.06 6633.38 5184.83 cv
6608.06 5211.59 6581.63 5237.66 6553.96 5262.8 cv
6498.67 5313.09 6438.29 5359.68 6372.79 5400.29 cv
6356.45 5410.48 6339.71 5420.18 6322.77 5429.59 cv
6320.67 5430.79 6318.53 5431.93 6316.38 5433.07 cv
6309.96 5436.49 li
6297.09 5443.32 li
6284.04 5449.87 li
6277.51 5453.14 li
6274.24 5454.77 li
6270.94 5456.34 li
6235.8 5473.25 6199.58 5488.37 6162.5 5501.4 cv
6157.89 5503.09 6153.22 5504.61 6148.55 5506.16 cv
6134.56 5510.8 li
6120.45 5515.13 li
6115.74 5516.55 6111.06 5518.05 6106.31 5519.34 cv
6096.82 5521.97 6087.38 5524.74 6077.81 5527.08 cv
6063.5 5530.7 li
6049.11 5534 li
6039.53 5536.27 6029.87 5538.14 6020.23 5540.11 cv
6015.42 5541.13 6010.57 5541.93 6005.73 5542.82 cv
6000.89 5543.69 5996.06 5544.58 5991.21 5545.4 cv
5971.81 5548.51 5952.37 5551.35 5932.88 5553.36 cv
5913.4 5555.57 5893.9 5556.97 5874.41 5558.13 cv
5854.93 5559.03 5835.45 5559.72 5816.06 5559.59 cv
5811.21 5559.56 5806.35 5559.6 5801.51 5559.5 cv
5786.99 5559.17 li
5779.74 5558.98 li
5772.51 5558.68 li
5758.04 5558.03 li
5738.81 5556.87 5719.61 5555.48 5700.59 5553.41 cv
5695.83 5552.89 5691.06 5552.42 5686.32 5551.85 cv
5672.12 5550.07 li
5665.02 5549.16 li
5657.95 5548.14 li
5643.83 5546.09 li
5639.13 5545.37 5634.46 5544.56 5629.78 5543.79 cv
5625.11 5543 5620.4 5542.29 5615.77 5541.4 cv
5606.47 5539.68 5597.14 5538.04 5587.93 5536.11 cv
5574.07 5533.27 li
5560.31 5530.22 li
5551.11 5528.24 5542.05 5525.96 5532.93 5523.79 cv
5528.37 5522.71 5523.87 5521.48 5519.34 5520.33 cv
5514.83 5519.15 5510.29 5518.01 5505.8 5516.79 cv
5492.34 5513.07 li
5485.61 5511.2 li
5478.93 5509.24 li
5443.29 5498.82 5408.26 5487.19 5374 5474.32 cv
5339.73 5461.46 5306.13 5447.53 5273.19 5432.68 cv
5240.27 5417.8 5208.02 5401.99 5176.38 5385.42 cv
5172.41 5383.37 5168.47 5381.28 5164.55 5379.17 cv
5152.76 5372.87 li
5144.94 5368.62 5137.14 5364.35 5129.37 5360.04 cv
5113.88 5351.36 5098.48 5342.58 5083.28 5333.57 cv
5022.36 5297.68 4963.76 5259.21 4906.94 5219.06 cv
4878.53 5198.99 4850.6 5178.45 4823.06 5157.56 cv
4809.27 5147.14 4795.62 5136.58 4782.03 5125.98 cv
4768.48 5115.34 4754.99 5104.64 4741.61 5093.86 cv
4688.06 5050.74 4635.96 5006.37 4585 4961.11 cv
4534.04 4915.86 4484.25 4869.68 4435.4 4822.85 cv
4410.97 4799.44 4386.8 4775.84 4362.9 4752.07 cv
4328.04 4717.42 li
4310.72 4700.28 li
4293.42 4683.3 li
4284.77 4674.81 li
4276.13 4666.41 li
4258.85 4649.61 li
4241.56 4633.02 li
4232.91 4624.73 li
4224.25 4616.55 li
4201.18 4594.59 4177.93 4573.36 4154.61 4552.36 cv
4107.9 4510.64 4060.48 4470.87 4011.8 4434.29 cv
4002.68 4427.43 li
3998.11 4423.99 li
3996.59 4422.86 3995.04 4421.77 3993.51 4420.66 cv
3975.08 4407.36 li
3970.47 4404.03 li
3968.93 4402.93 3967.37 4401.88 3965.82 4400.81 cv
3956.52 4394.38 li
3947.21 4387.96 li
3942.56 4384.74 li
3941.01 4383.67 3939.43 4382.67 3937.87 4381.63 cv
3919.07 4369.25 li
3912.84 4365.05 3906.44 4361.23 3900.12 4357.25 cv
3890.62 4351.32 li
3887.45 4349.34 3884.3 4347.32 3881.08 4345.48 cv
3861.88 4334.14 li
3855.51 4330.27 3849 4326.76 3842.54 4323.15 cv
3832.84 4317.74 li
3827.99 4315.04 li
3825.56 4313.69 li
3823.11 4312.42 li
3803.48 4302.21 li
3800.2 4300.52 3796.96 4298.74 3793.65 4297.13 cv
3783.73 4292.32 li
3763.9 4282.69 li
3743.86 4273.66 li
3733.84 4269.14 li
3730.48 4267.7 3727.08 4266.34 3723.71 4264.93 cv
3703.46 4256.53 li
3700.93 4255.48 li
3698.37 4254.51 li
3693.25 4252.57 li
3683.02 4248.69 li
3672.79 4244.8 li
3671.09 4244.17 3669.39 4243.48 3667.67 4242.89 cv
3662.5 4241.12 li
3648.7 4236.46 3635.01 4231.46 3621.03 4227.4 cv
3614.07 4225.28 3607.14 4223.06 3600.16 4220.99 cv
3579.1 4215.28 li
3568.57 4212.4 li
3566.83 4211.9 3565.05 4211.5 3563.28 4211.08 cv
3557.97 4209.83 li
3536.73 4204.78 li
3531.42 4203.52 li
3526.07 4202.44 li
3515.35 4200.29 li
3493.94 4195.98 li
3472.35 4192.39 li
3465.15 4191.24 3458 4189.85 3450.72 4189.02 cv
3428.99 4186.15 li
3425.36 4185.68 3421.75 4185.17 3418.12 4184.73 cv
3407.2 4183.55 li
3392.64 4182.04 3378.02 4180.81 3363.36 4179.87 cv
3386.64 3886.13 li
cp
f
3382.11 3943.28 mo
3451.9 3948.86 3521.58 3959.52 3590.13 3975.52 cv
3615.8 3981.64 li
3624.32 3983.84 3632.8 3986.24 3641.29 3988.54 cv
3654.02 3992.03 li
3660.39 3993.79 li
3662.51 3994.37 3664.6 3995.07 3666.7 3995.71 cv
3691.91 4003.55 li
3704.51 4007.49 li
3716.98 4011.82 li
3741.89 4020.53 li
3746.07 4021.93 3750.15 4023.56 3754.25 4025.13 cv
3766.56 4029.87 li
3778.85 4034.63 li
3782.94 4036.24 3787.08 4037.75 3791.1 4039.51 cv
3856.1 4066.23 3918.84 4097.77 3978.93 4132.96 cv
4038.82 4168.45 4096.24 4207.26 4151.22 4248.41 cv
4171.7 4263.97 li
4175.1 4266.58 4178.56 4269.13 4181.91 4271.78 cv
4191.99 4279.72 li
4212.15 4295.57 li
4232 4311.69 li
4241.93 4319.75 li
4251.72 4327.91 li
4271.3 4344.25 li
4290.62 4360.76 li
4297.07 4366.27 4303.53 4371.76 4309.85 4377.35 cv
4360.83 4421.76 4410.24 4467.21 4458.73 4512.67 cv
4495 4546.73 li
4530.98 4580.6 li
4554.56 4602.74 4578.34 4624.59 4602.33 4646.15 cv
4626.35 4667.68 4650.53 4688.96 4675 4709.84 cv
4699.45 4730.74 4724.09 4751.35 4749 4771.55 cv
4848.54 4852.44 4951.71 4927.69 5057.98 4995.46 cv
5111.14 5029.29 5165.06 5061.26 5219.78 5090.74 cv
5274.46 5120.29 5329.98 5147.25 5386.16 5171.13 cv
5400.23 5177.03 5414.31 5182.83 5428.45 5188.34 cv
5439.05 5192.47 li
5449.69 5196.46 li
5456.77 5199.16 5463.88 5201.67 5470.98 5204.27 cv
5499.4 5214.45 5528 5223.58 5556.71 5231.68 cv
5585.42 5239.8 5614.27 5246.63 5643.15 5252.28 cv
5650.37 5253.77 5657.6 5254.97 5664.83 5256.28 cv
5668.44 5256.97 5672.06 5257.47 5675.67 5258.07 cv
5679.28 5258.64 5682.9 5259.25 5686.51 5259.79 cv
5697.35 5261.32 li
5702.77 5262.09 li
5708.19 5262.75 li
5719.03 5264.09 li
5722.64 5264.52 5726.26 5264.85 5729.87 5265.24 cv
5744.31 5266.8 5758.74 5267.8 5773.15 5268.67 cv
5787.55 5269.33 5801.94 5269.9 5816.28 5269.83 cv
5830.63 5269.95 5844.91 5269.44 5859.18 5268.83 cv
5873.41 5267.98 5887.63 5267.02 5901.74 5265.43 cv
5915.89 5264.03 5929.92 5261.97 5943.93 5259.8 cv
5954.39 5257.97 li
5957.88 5257.34 5961.38 5256.8 5964.84 5256.06 cv
5971.77 5254.63 5978.74 5253.36 5985.62 5251.72 cv
5995.98 5249.39 li
6006.27 5246.81 li
6013.16 5245.18 6019.94 5243.17 6026.78 5241.33 cv
6030.2 5240.44 6033.57 5239.34 6036.96 5238.34 cv
6047.13 5235.27 li
6057.22 5231.96 li
6060.59 5230.85 6063.97 5229.79 6067.29 5228.57 cv
6174.58 5191.66 6273.95 5129.13 6362.48 5049.97 cv
6406.79 5010.39 6448.54 4966.81 6487.79 4920.3 cv
6507.36 4896.99 6526.38 4873 6544.81 4848.4 cv
6551.69 4839.15 li
6553.99 4836.06 6556.3 4833 6558.53 4829.85 cv
6572.03 4811.07 li
6580.86 4798.39 6589.77 4785.76 6598.33 4772.83 cv
6602.66 4766.39 6607.01 4759.98 6611.21 4753.44 cv
6623.9 4733.88 li
6650.16 4692.27 li
6669.3 4662.24 6689.46 4632.9 6710.58 4604.3 cv
6731.76 4575.74 6753.97 4548 6777.01 4521.02 cv
6785.66 4510.91 li
6788.52 4507.52 6791.53 4504.26 6794.45 4500.94 cv
6803.3 4491.01 li
6807.72 4486.04 li
6812.22 4481.16 li
6818.25 4474.66 6824.24 4468.14 6830.3 4461.68 cv
6848.74 4442.56 li
6947.93 4341.46 7059.96 4254.03 7180.33 4181.86 cv
7300.62 4109.43 7429.23 4052.23 7562.01 4009.74 cv
7694.88 3967.42 7832.11 3940.1 7970.44 3927.82 cv
8005.02 3924.69 8039.68 3922.71 8074.35 3921.51 cv
8087.36 3921.11 li
8091.69 3920.98 8096.03 3920.83 8100.36 3920.8 cv
8126.38 3920.43 li
8143.72 3920.44 8161.05 3920.4 8178.39 3920.85 cv
8247.72 3922.16 8316.91 3927.66 8385.6 3936.48 cv
8419.38 3940.95 8453.11 3946.07 8486.86 3951.88 cv
8499.51 3954.07 li
8512.16 3956.39 li
8524.8 3958.73 li
8529.02 3959.5 8533.23 3960.37 8537.45 3961.19 cv
8545.87 3962.86 8554.29 3964.5 8562.71 3966.32 cv
8571.13 3968.11 8579.55 3969.84 8587.96 3971.77 cv
8621.61 3979.25 8655.19 3987.62 8688.61 3997.09 cv
8722.04 4006.54 8755.31 4017.07 8788.29 4028.83 cv
8835.11 4045.54 8859.52 4097.04 8842.82 4143.87 cv
8826.57 4189.41 8777.4 4213.75 8731.64 4199.68 cv
8731.06 4199.49 li
8613.54 4163.16 8489.29 4142.04 8363.19 4129.39 cv
8239.32 4117.1 8114.32 4118.1 7991.01 4132.15 cv
7960.19 4135.71 7929.47 4140.05 7898.9 4145.18 cv
7876 4149.18 li
7853.18 4153.55 li
7847.47 4154.65 li
7841.79 4155.84 li
7830.42 4158.22 li
7819.05 4160.61 li
7807.72 4163.17 li
7777.51 4169.93 7747.47 4177.46 7717.73 4185.94 cv
7687.98 4194.37 7658.45 4203.54 7629.22 4213.5 cv
7600.01 4223.53 7571.11 4234.38 7542.52 4245.93 cv
7531.82 4250.3 li
7526.46 4252.48 li
7521.15 4254.75 li
7499.91 4263.86 li
7478.83 4273.31 li
7475.3 4274.85 7471.84 4276.54 7468.35 4278.16 cv
7457.9 4283.05 li
7430.08 4296.22 7402.65 4310.15 7375.67 4324.82 cv
7348.7 4339.53 7322.22 4355.06 7296.22 4371.28 cv
7192.19 4436.14 7096.48 4513.33 7012.69 4601.14 cv
6991.74 4623.09 6971.63 4645.76 6952.25 4669.01 cv
6932.9 4692.27 6914.29 4716.11 6896.61 4740.59 cv
6878.96 4765.08 6862.15 4790.14 6846.24 4815.73 cv
6820.35 4857.8 li
6815.76 4865.14 6811.07 4872.44 6806.44 4879.76 cv
6804.1 4883.41 6801.83 4887.1 6799.42 4890.71 cv
6792.27 4901.6 li
6782.81 4916.16 6772.93 4930.51 6763.1 4944.88 cv
6748.03 4966.29 li
6745.54 4969.87 6742.94 4973.39 6740.37 4976.92 cv
6732.64 4987.53 li
6711.91 5015.73 6690.4 5043.53 6667.89 5070.73 cv
6622.79 5125.06 6573.92 5177.19 6520.49 5225.59 cv
6467.08 5273.96 6409.07 5318.63 6346.41 5357.42 cv
6330.78 5367.15 6314.78 5376.4 6298.6 5385.38 cv
6296.59 5386.52 6294.55 5387.62 6292.5 5388.7 cv
6286.37 5391.96 li
6274.08 5398.47 li
6261.64 5404.72 li
6255.41 5407.83 li
6252.3 5409.39 li
6249.15 5410.88 li
6215.65 5427 6181.16 5441.39 6145.9 5453.8 cv
6141.51 5455.42 6137.06 5456.86 6132.63 5458.33 cv
6119.31 5462.75 li
6105.89 5466.87 li
6101.41 5468.21 6096.96 5469.65 6092.44 5470.87 cv
6083.42 5473.37 6074.44 5476 6065.34 5478.23 cv
6051.73 5481.68 li
6038.05 5484.83 li
6028.94 5487 6019.75 5488.77 6010.59 5490.66 cv
6006.01 5491.64 6001.4 5492.4 5996.8 5493.25 cv
5992.2 5494.07 5987.6 5494.93 5982.99 5495.71 cv
5964.53 5498.67 5946.03 5501.4 5927.47 5503.34 cv
5908.93 5505.47 5890.34 5506.8 5871.77 5507.92 cv
5853.2 5508.8 5834.62 5509.45 5816.1 5509.37 cv
5797.56 5509.46 5779.09 5508.82 5760.66 5507.99 cv
5742.25 5506.95 5723.88 5505.67 5705.64 5503.76 cv
5701.08 5503.29 5696.5 5502.86 5691.95 5502.34 cv
5678.32 5500.7 li
5671.5 5499.87 li
5664.72 5498.92 li
5651.15 5497.01 li
5646.63 5496.34 5642.14 5495.59 5637.64 5494.89 cv
5633.14 5494.15 5628.62 5493.5 5624.16 5492.67 cv
5615.21 5491.06 5606.22 5489.55 5597.34 5487.74 cv
5561.71 5480.8 5526.53 5472.47 5491.97 5462.73 cv
5457.4 5453.02 5423.32 5442.18 5389.9 5430.06 cv
5381.57 5426.99 5373.18 5424.03 5364.93 5420.8 cv
5352.52 5416.03 li
5340.19 5411.12 li
5323.73 5404.61 5307.51 5397.67 5291.35 5390.65 cv
5226.88 5362.26 5164.71 5330.19 5104.84 5295.23 cv
5044.9 5260.34 4987.23 5222.57 4931.4 5182.86 cv
4819.79 5103.32 4715.76 5015.88 4616.44 4924.78 cv
4566.77 4879.21 4518.31 4832.64 4470.73 4785.46 cv
4446.95 4761.85 4423.36 4738.11 4400 4714.22 cv
4365.56 4679.07 li
4354.11 4667.44 4342.64 4655.83 4331.17 4644.33 cv
4319.71 4632.78 4308.19 4621.42 4296.68 4610.02 cv
4290.95 4604.28 4285.14 4598.72 4279.36 4593.07 cv
4273.57 4587.46 4267.81 4581.77 4262 4576.23 cv
4250.38 4565.11 4238.75 4553.96 4227.01 4543.07 cv
4221.15 4537.62 4215.32 4532.08 4209.43 4526.69 cv
4191.7 4510.56 li
4185.81 4505.14 4179.84 4499.88 4173.89 4494.6 cv
4167.93 4489.32 4161.98 4484.01 4155.98 4478.79 cv
4137.91 4463.29 li
4128.87 4455.54 li
4119.74 4447.97 li
4101.45 4432.84 li
4082.97 4418.07 li
4073.71 4410.7 li
4070.63 4408.24 4067.48 4405.91 4064.36 4403.5 cv
4045.64 4389.17 li
4042.54 4386.74 4039.34 4384.49 4036.19 4382.16 cv
4026.7 4375.23 li
4017.21 4368.29 li
4015.63 4367.14 4014.06 4365.96 4012.46 4364.83 cv
4007.66 4361.48 li
3988.43 4348.08 li
3983.63 4344.73 li
3982.02 4343.62 3980.39 4342.57 3978.77 4341.48 cv
3969.03 4335.03 li
3959.3 4328.58 li
3956.04 4326.45 3952.83 4324.22 3949.52 4322.2 cv
3929.79 4309.82 li
3926.5 4307.77 3923.23 4305.66 3919.91 4303.66 cv
3909.91 4297.75 li
3889.92 4285.93 li
3836.25 4255.21 3780.88 4228.3 3724.06 4205.52 cv
3610.32 4160.34 3490.48 4132.44 3367.89 4122.72 cv
3367.83 4122.71 li
3318.28 4118.79 3281.3 4075.43 3285.22 4025.88 cv
3289.15 3976.33 3332.51 3939.35 3382.06 3943.28 cv
3382.11 3943.28 li
cp
.356863 .686275 .698039 rgb
f
3386.64 -1113.87 mo
3459.07 -1107.22 3531.47 -1095.62 3602.71 -1078.52 cv
3629.4 -1072.02 li
3638.26 -1069.69 3647.07 -1067.16 3655.9 -1064.73 cv
3669.14 -1061.03 li
3675.75 -1059.18 li
3677.96 -1058.57 3680.13 -1057.83 3682.32 -1057.16 cv
3708.54 -1048.95 li
3721.64 -1044.82 li
3734.61 -1040.3 li
3760.52 -1031.22 li
3764.86 -1029.76 3769.1 -1028.06 3773.37 -1026.43 cv
3786.17 -1021.5 li
3798.96 -1016.57 li
3803.22 -1014.9 3807.52 -1013.33 3811.7 -1011.51 cv
3836.93 -1000.88 li
3849.53 -995.54 li
3861.96 -989.859 li
3886.8 -978.491 li
3889.9 -977.067 li
3892.96 -975.564 li
3899.07 -972.557 li
3911.29 -966.533 li
3923.51 -960.5 li
3929.61 -957.477 li
3935.62 -954.305 li
3959.63 -941.596 li
3967.69 -937.428 3975.5 -932.928 3983.37 -928.51 cv
3991.23 -924.071 3999.12 -919.668 4006.94 -915.183 cv
4030.1 -901.333 li
4041.67 -894.396 li
4045.49 -892.048 4049.25 -889.622 4053.04 -887.237 cv
4075.75 -872.854 li
4079.56 -870.49 4083.21 -867.955 4086.95 -865.506 cv
4098.09 -858.097 li
4109.24 -850.68 li
4111.08 -849.437 4112.96 -848.222 4114.79 -846.955 cv
4120.25 -843.145 li
4142.11 -827.89 li
4147.57 -824.073 li
4149.38 -822.794 4151.15 -821.475 4152.94 -820.177 cv
4163.66 -812.36 li
4174.37 -804.537 li
4177.93 -801.918 4181.55 -799.349 4185.03 -796.662 cv
4206.07 -780.702 li
4209.56 -778.03 4213.11 -775.404 4216.55 -772.693 cv
4226.88 -764.564 li
4247.52 -748.289 li
4267.79 -731.761 li
4277.93 -723.493 li
4287.9 -715.122 li
4307.82 -698.372 li
4327.46 -681.464 li
4333.99 -675.823 4340.55 -670.191 4346.94 -664.478 cv
4398.54 -618.985 4448.22 -572.593 4496.48 -526.302 cv
4532.51 -491.625 li
4568.08 -457.253 li
4591.12 -434.993 4614.31 -412.994 4637.66 -391.245 cv
4684.4 -347.799 4731.95 -305.54 4780.43 -264.783 cv
4877.37 -183.272 4978.12 -107.636 5082.44 -40.7437 cv
5134.61 -7.35498 5187.6 23.917 5241.33 52.3989 cv
5268.19 66.6377 5295.21 80.2593 5322.39 93.0376 cv
5349.58 105.815 5376.9 117.879 5404.32 129.101 cv
5431.75 140.259 5459.28 150.604 5486.87 160.01 cv
5490.31 161.231 5493.77 162.303 5497.22 163.465 cv
5507.57 166.884 li
5517.93 170.148 li
5521.38 171.247 5524.83 172.336 5528.29 173.345 cv
5538.65 176.46 li
5542.1 177.523 5545.56 178.446 5549.01 179.45 cv
5552.46 180.422 5555.92 181.448 5559.37 182.384 cv
5569.74 185.165 li
5574.92 186.567 li
5580.1 187.879 li
5590.46 190.512 li
5593.92 191.381 5597.37 192.155 5600.83 192.985 cv
5604.28 193.782 5607.73 194.67 5611.18 195.399 cv
5618.09 196.891 5624.98 198.536 5631.88 199.873 cv
5642.23 201.988 li
5652.57 203.911 li
5680.12 209.084 5707.59 212.962 5734.91 215.589 cv
5741.75 216.323 5748.55 216.806 5755.37 217.357 cv
5758.78 217.669 5762.17 217.821 5765.57 218.031 cv
5775.76 218.633 li
5789.32 219.185 5802.86 219.715 5816.31 219.61 cv
5829.79 219.682 5843.17 219.209 5856.53 218.628 cv
5869.85 217.806 5883.15 216.918 5896.33 215.403 cv
5909.55 214.075 5922.64 212.13 5935.7 210.113 cv
5945.46 208.394 li
5948.71 207.799 5951.98 207.305 5955.2 206.604 cv
5961.66 205.269 5968.15 204.087 5974.56 202.547 cv
6000.29 196.741 6025.72 189.723 6050.68 180.97 cv
6075.66 172.274 6100.26 162.221 6124.43 150.77 cv
6126.71 149.716 li
6128.96 148.599 li
6133.46 146.368 li
6142.48 141.927 li
6151.41 137.241 li
6155.88 134.91 li
6157.38 134.141 6158.87 133.363 6160.34 132.526 cv
6172.17 126.046 6183.95 119.372 6195.55 112.246 cv
6242.03 83.9126 6286.6 50.4141 6329.01 12.7603 cv
6350.21 -6.07031 6370.86 -25.9468 6390.96 -46.7173 cv
6411.07 -67.4873 6430.69 -89.0747 6449.72 -111.497 cv
6468.72 -133.945 6487.17 -157.162 6505.15 -180.972 cv
6511.87 -189.927 li
6514.11 -192.914 6516.37 -195.878 6518.55 -198.936 cv
6531.75 -217.139 li
6540.4 -229.451 6549.11 -241.698 6557.52 -254.279 cv
6561.76 -260.529 6566.02 -266.76 6570.13 -273.138 cv
6582.59 -292.177 li
6608.98 -333.667 li
6628.84 -364.598 6649.75 -394.809 6671.63 -424.238 cv
6693.55 -453.643 6716.56 -482.163 6740.4 -509.894 cv
6764.27 -537.598 6788.96 -564.539 6814.58 -590.479 cv
6917.09 -694.254 7032.54 -783.7 7156.22 -857.562 cv
7279.82 -931.673 7411.71 -990.051 7547.68 -1033.71 cv
7683.77 -1077.1 7824.13 -1105.51 7965.75 -1118.72 cv
8001.16 -1122.05 8036.65 -1124.24 8072.16 -1125.72 cv
8085.48 -1126.21 li
8089.92 -1126.38 8094.36 -1126.56 8098.8 -1126.62 cv
8125.45 -1127.17 li
8143.22 -1127.27 8160.98 -1127.42 8178.75 -1127.08 cv
8249.81 -1126.17 8320.78 -1121.15 8391.33 -1112.82 cv
8460.14 -1104.49 8529.2 -1093.86 8598.51 -1079.75 cv
8667.8 -1065.67 8737.31 -1047.96 8806.51 -1025.52 cv
8883.92 -1000.43 8926.34 -917.341 8901.25 -839.932 cv
8876.16 -762.522 8793.07 -720.109 8715.66 -745.199 cv
8714.95 -745.43 8713.53 -745.908 8712.83 -746.147 cv
8657.32 -765.389 8599.3 -780.645 8539.79 -792.92 cv
8480.27 -805.162 8419.23 -814.339 8357.46 -821.305 cv
8327.42 -824.598 8297.3 -827.069 8267.13 -828.76 cv
8244.5 -829.877 li
8221.85 -830.599 li
8216.18 -830.775 li
8210.52 -830.858 li
8199.19 -831.029 li
8187.86 -831.195 li
8176.53 -831.173 li
8161.43 -831.257 8146.32 -830.89 8131.22 -830.602 cv
8108.58 -829.806 li
8104.81 -829.704 8101.04 -829.493 8097.27 -829.293 cv
8085.96 -828.707 li
8082.19 -828.5 8078.42 -828.348 8074.65 -828.1 cv
8063.35 -827.322 li
8055.82 -826.789 8048.29 -826.338 8040.77 -825.627 cv
8033.25 -824.956 8025.73 -824.369 8018.21 -823.642 cv
7995.7 -821.319 li
7965.7 -817.976 7935.79 -813.872 7906.03 -809.008 cv
7883.73 -805.205 li
7861.51 -801.023 li
7855.96 -799.978 li
7850.42 -798.833 li
7839.35 -796.551 li
7828.29 -794.263 li
7817.26 -791.795 li
7758.41 -778.837 7700.42 -762.379 7643.55 -743.052 cv
7615.14 -733.31 7587.04 -722.758 7559.26 -711.504 cv
7548.85 -707.253 li
7543.65 -705.127 li
7538.49 -702.909 li
7517.86 -694.03 li
7497.39 -684.818 li
7493.96 -683.315 7490.61 -681.671 7487.22 -680.091 cv
7477.07 -675.316 li
7450.08 -662.463 7423.47 -648.883 7397.3 -634.584 cv
7371.15 -620.258 7345.51 -605.103 7320.33 -589.306 cv
7219.61 -526.131 7127.32 -450.959 7046.86 -365.818 cv
7006.64 -323.234 6969.49 -278.096 6935.56 -230.877 cv
6918.67 -207.214 6902.62 -183.02 6887.43 -158.337 cv
6861.66 -116.135 li
6856.99 -108.627 6852.23 -101.154 6847.51 -93.6636 cv
6842.83 -86.1587 6837.95 -78.7314 6833.09 -71.2964 cv
6794.38 -11.7441 6752.07 46.3975 6705.96 102.531 cv
6682.84 130.563 6658.67 158.057 6633.38 184.833 cv
6608.07 211.593 6581.63 237.656 6553.96 262.799 cv
6498.67 313.091 6438.29 359.682 6372.79 400.292 cv
6356.45 410.476 6339.71 420.177 6322.77 429.585 cv
6320.67 430.785 6318.53 431.932 6316.39 433.068 cv
6309.96 436.493 li
6297.09 443.317 li
6284.04 449.869 li
6277.51 453.136 li
6274.25 454.766 li
6270.94 456.335 li
6235.8 473.248 6199.58 488.367 6162.51 501.398 cv
6157.9 503.091 6153.22 504.608 6148.56 506.164 cv
6134.56 510.799 li
6120.45 515.132 li
6115.74 516.548 6111.06 518.053 6106.31 519.34 cv
6096.83 521.973 6087.38 524.74 6077.81 527.077 cv
6063.5 530.694 li
6049.11 533.998 li
6039.53 536.271 6029.87 538.136 6020.23 540.112 cv
6015.42 541.133 6010.57 541.934 6005.73 542.824 cv
6000.89 543.686 5996.06 544.58 5991.21 545.398 cv
5971.82 548.509 5952.37 551.354 5932.88 553.364 cv
5913.4 555.573 5893.9 556.968 5874.41 558.129 cv
5854.94 559.031 5835.46 559.716 5816.06 559.586 cv
5811.21 559.559 5806.35 559.604 5801.51 559.502 cv
5787 559.173 li
5779.74 558.985 li
5772.51 558.677 li
5758.04 558.026 li
5738.81 556.874 5719.62 555.48 5700.59 553.412 cv
5695.84 552.894 5691.07 552.421 5686.32 551.853 cv
5672.12 550.066 li
5665.02 549.164 li
5657.96 548.145 li
5643.83 546.088 li
5639.13 545.368 5634.47 544.561 5629.78 543.796 cv
5625.11 543.001 5620.41 542.289 5615.77 541.402 cv
5606.48 539.679 5597.14 538.043 5587.93 536.112 cv
5574.08 533.272 li
5560.32 530.221 li
5551.12 528.24 5542.05 525.962 5532.93 523.794 cv
5528.37 522.714 5523.88 521.484 5519.35 520.332 cv
5514.83 519.15 5510.3 518.013 5505.8 516.787 cv
5492.34 513.07 li
5485.62 511.205 li
5478.94 509.246 li
5443.29 498.821 5408.27 487.193 5374 474.323 cv
5339.74 461.461 5306.13 447.534 5273.19 432.682 cv
5240.27 417.804 5208.03 401.987 5176.39 385.425 cv
5172.42 383.375 5168.48 381.286 5164.55 379.177 cv
5152.77 372.874 li
5144.94 368.626 5137.15 364.349 5129.38 360.047 cv
5113.89 351.367 5098.49 342.582 5083.29 333.576 cv
5022.36 297.68 4963.76 259.212 4906.94 219.063 cv
4878.53 198.992 4850.6 178.453 4823.06 157.562 cv
4809.27 147.143 4795.63 136.586 4782.03 125.986 cv
4768.48 115.346 4755 104.643 4741.62 93.8579 cv
4688.06 50.7393 4635.96 6.37402 4585 -38.8828 cv
4534.04 -84.1396 4484.25 -130.318 4435.4 -177.149 cv
4410.97 -200.561 4386.8 -224.159 4362.9 -247.928 cv
4328.05 -282.581 li
4316.51 -294.01 4304.94 -305.436 4293.42 -316.695 cv
4281.89 -328.05 4270.37 -339.183 4258.85 -350.362 cv
4253.09 -355.985 4247.32 -361.427 4241.56 -366.967 cv
4235.79 -372.461 4230.04 -378.055 4224.26 -383.468 cv
4212.71 -394.338 4201.14 -405.269 4189.52 -415.882 cv
4183.71 -421.206 4177.93 -426.616 4172.1 -431.87 cv
4154.61 -447.617 li
4148.79 -452.911 4142.92 -458.031 4137.05 -463.174 cv
4119.46 -478.593 li
4101.74 -493.683 li
4092.87 -501.218 li
4083.94 -508.576 li
4066.08 -523.303 li
4048.07 -537.651 li
4039.07 -544.825 li
4036.07 -547.221 4033.02 -549.486 4030 -551.824 cv
4011.83 -565.757 li
3963.14 -602.362 3913.21 -635.913 3861.91 -665.925 cv
3842.54 -676.842 li
3836.08 -680.469 3829.66 -684.197 3823.09 -687.526 cv
3803.49 -697.82 li
3798.6 -700.399 li
3793.64 -702.818 li
3783.73 -707.657 li
3773.83 -712.506 li
3768.88 -714.935 li
3766.4 -716.149 li
3763.89 -717.279 li
3743.86 -726.333 li
3733.84 -730.864 li
3723.71 -735.055 li
3703.46 -743.459 li
3594.96 -786.721 3480.65 -812.442 3363.36 -820.127 cv
3282.16 -825.447 3220.64 -895.588 3225.96 -976.792 cv
3231.28 -1058 3301.43 -1119.51 3382.63 -1114.19 cv
3383.68 -1114.12 3384.73 -1114.04 3385.78 -1113.95 cv
3386.64 -1113.87 li
cp
1 1 1 rgb
f
80 lw
2688.08 3744.89 mo
5104.5 3312.5 li
6738 -1086.07 li
@
3382.11 -1056.72 mo
3451.8 -1049.86 3521.25 -1038.49 3589.54 -1021.97 cv
3657.82 -1005.47 3724.97 -984.003 3789.93 -957.603 cv
3854.83 -931.057 3917.65 -900.002 3977.89 -865.258 cv
4037.96 -830.253 4095.64 -791.91 4150.83 -751.071 cv
4171.38 -735.616 li
4174.8 -733.027 4178.27 -730.489 4181.63 -727.857 cv
4191.75 -719.977 li
4211.96 -704.202 li
4231.87 -688.15 li
4241.83 -680.13 li
4251.64 -671.993 li
4271.25 -655.7 li
4290.61 -639.216 li
4297.05 -633.72 4303.52 -628.234 4309.84 -622.649 cv
4328.92 -605.966 li
4335.28 -600.407 4341.51 -594.768 4347.81 -589.171 cv
4360.44 -577.998 4372.77 -566.644 4385.22 -555.376 cv
4409.94 -532.74 4434.46 -510.018 4458.66 -487.261 cv
4494.91 -453.176 li
4530.86 -419.281 li
4554.43 -397.129 4578.2 -375.262 4602.19 -353.695 cv
4626.19 -332.151 4650.37 -310.861 4674.84 -289.981 cv
4699.28 -269.07 4723.92 -248.459 4748.83 -228.256 cv
4848.39 -147.374 4951.59 -72.144 5057.9 -4.4209 cv
5111.08 29.3818 5165.02 61.333 5219.75 90.7959 cv
5274.45 120.322 5329.97 147.271 5386.16 171.143 cv
5400.23 177.034 5414.31 182.839 5428.45 188.342 cv
5439.05 192.475 li
5449.69 196.462 li
5456.77 199.165 5463.88 201.673 5470.98 204.269 cv
5499.4 214.451 5528 223.583 5556.71 231.678 cv
5585.42 239.798 5614.27 246.629 5643.15 252.28 cv
5650.37 253.769 5657.6 254.967 5664.83 256.282 cv
5668.44 256.966 5672.06 257.471 5675.67 258.07 cv
5679.28 258.637 5682.9 259.255 5686.51 259.788 cv
5697.35 261.317 li
5702.77 262.089 li
5708.19 262.753 li
5719.03 264.091 li
5722.64 264.516 5726.26 264.849 5729.87 265.237 cv
5744.31 266.797 5758.74 267.8 5773.15 268.671 cv
5787.55 269.327 5801.94 269.896 5816.28 269.832 cv
5830.63 269.95 5844.91 269.443 5859.18 268.833 cv
5873.41 267.977 5887.63 267.021 5901.74 265.427 cv
5915.89 264.027 5929.92 261.968 5943.93 259.804 cv
5954.39 257.97 li
5957.88 257.336 5961.38 256.8 5964.84 256.057 cv
5971.77 254.634 5978.74 253.359 5985.62 251.719 cv
5995.98 249.393 li
6006.27 246.811 li
6013.16 245.184 6019.94 243.174 6026.78 241.332 cv
6030.2 240.441 6033.57 239.34 6036.96 238.338 cv
6047.13 235.273 li
6057.22 231.958 li
6060.59 230.852 6063.97 229.794 6067.29 228.566 cv
6174.58 191.663 6273.95 129.131 6362.48 49.9658 cv
6406.79 10.3945 6448.54 -33.1904 6487.79 -79.6992 cv
6507.36 -103.01 6526.38 -127.001 6544.81 -151.599 cv
6551.69 -160.85 li
6553.99 -163.935 6556.3 -167 6558.53 -170.151 cv
6572.03 -188.93 li
6580.86 -201.613 6589.77 -214.238 6598.33 -227.174 cv
6602.66 -233.605 6607.01 -240.018 6611.21 -246.563 cv
6623.9 -266.115 li
6650.16 -307.734 li
6669.3 -337.761 6689.46 -367.104 6710.58 -395.703 cv
6731.76 -424.258 6753.97 -452 6777.01 -478.982 cv
6785.66 -489.091 li
6788.52 -492.476 6791.53 -495.736 6794.45 -499.063 cv
6803.3 -508.994 li
6807.72 -513.957 li
6812.22 -518.843 li
6818.25 -525.337 6824.24 -531.864 6830.3 -538.318 cv
6848.74 -557.436 li
6947.93 -658.543 7059.96 -745.968 7180.33 -818.143 cv
7300.62 -890.572 7429.23 -947.767 7562.01 -990.264 cv
7694.88 -1032.58 7832.11 -1059.9 7970.44 -1072.18 cv
8005.02 -1075.31 8039.68 -1077.29 8074.35 -1078.49 cv
8087.36 -1078.89 li
8091.69 -1079.02 8096.03 -1079.17 8100.36 -1079.2 cv
8126.38 -1079.57 li
8143.72 -1079.56 8161.05 -1079.6 8178.39 -1079.15 cv
8247.72 -1077.84 8316.91 -1072.34 8385.6 -1063.52 cv
8419.38 -1059.05 8453.11 -1053.93 8486.86 -1048.11 cv
8499.51 -1045.93 li
8512.16 -1043.61 li
8524.8 -1041.27 li
8529.02 -1040.5 8533.23 -1039.63 8537.45 -1038.81 cv
8545.87 -1037.14 8554.29 -1035.5 8562.71 -1033.68 cv
8571.13 -1031.89 8579.55 -1030.16 8587.96 -1028.23 cv
8621.61 -1020.75 8655.19 -1012.38 8688.61 -1002.91 cv
8722.04 -993.464 8755.31 -982.933 8788.29 -971.166 cv
8835.11 -954.459 8859.52 -902.958 8842.82 -856.134 cv
8826.57 -810.594 8777.4 -786.251 8731.64 -800.323 cv
8731.06 -800.506 li
8613.54 -836.841 8489.29 -857.962 8363.19 -870.612 cv
8239.32 -882.899 8114.32 -881.896 7991.01 -867.851 cv
7960.19 -864.29 7929.47 -859.946 7898.9 -854.821 cv
7876 -850.818 li
7853.18 -846.445 li
7847.47 -845.353 li
7841.79 -844.161 li
7830.42 -841.781 li
7819.05 -839.394 li
7807.72 -836.834 li
7777.51 -830.069 7747.47 -822.545 7717.73 -814.064 cv
7687.98 -805.631 7658.45 -796.462 7629.22 -786.501 cv
7600.01 -776.47 7571.11 -765.625 7542.52 -754.068 cv
7531.82 -749.702 li
7526.46 -747.521 li
7521.15 -745.247 li
7499.91 -736.139 li
7478.83 -726.689 li
7475.3 -725.146 7471.84 -723.461 7468.35 -721.839 cv
7457.9 -716.945 li
7430.08 -703.776 7402.65 -689.851 7375.67 -675.178 cv
7348.7 -660.47 7322.22 -644.937 7296.22 -628.725 cv
7192.19 -563.864 7096.48 -486.671 7012.69 -398.861 cv
6991.74 -376.914 6971.63 -354.239 6952.25 -330.994 cv
6932.9 -307.732 6914.29 -283.888 6896.61 -259.412 cv
6878.96 -234.919 6862.15 -209.857 6846.24 -184.27 cv
6820.35 -142.197 li
6815.76 -134.858 6811.07 -127.558 6806.44 -120.238 cv
6804.1 -116.59 6801.83 -112.904 6799.42 -109.286 cv
6792.27 -98.4014 li
6782.81 -83.8442 6772.93 -69.4937 6763.1 -55.1147 cv
6748.03 -33.7129 li
6745.54 -30.1338 6742.94 -26.6104 6740.37 -23.0752 cv
6732.64 -12.4741 li
6711.91 15.7329 6690.4 43.5332 6667.89 70.7334 cv
6622.79 125.06 6573.92 177.189 6520.49 225.594 cv
6467.08 273.959 6409.07 318.625 6346.41 357.423 cv
6330.78 367.152 6314.78 376.404 6298.6 385.378 cv
6296.59 386.523 6294.55 387.615 6292.5 388.697 cv
6286.37 391.959 li
6274.08 398.471 li
6261.64 404.716 li
6255.41 407.832 li
6252.3 409.388 li
6249.15 410.882 li
6215.65 426.999 6181.16 441.386 6145.9 453.803 cv
6141.51 455.417 6137.06 456.855 6132.63 458.335 cv
6119.31 462.746 li
6105.89 466.865 li
6101.41 468.211 6096.96 469.647 6092.44 470.868 cv
6083.42 473.368 6074.44 476.004 6065.34 478.227 cv
6051.73 481.678 li
6038.05 484.825 li
6028.94 486.998 6019.75 488.771 6010.59 490.66 cv
6006.01 491.637 6001.4 492.397 5996.8 493.248 cv
5992.2 494.069 5987.6 494.925 5982.99 495.707 cv
5964.53 498.671 5946.03 501.401 5927.47 503.34 cv
5908.93 505.471 5890.34 506.796 5871.77 507.924 cv
5853.2 508.798 5834.62 509.449 5816.1 509.365 cv
5797.56 509.462 5779.09 508.819 5760.66 507.989 cv
5742.25 506.948 5723.88 505.675 5705.64 503.765 cv
5701.08 503.29 5696.5 502.863 5691.95 502.341 cv
5678.32 500.696 li
5671.5 499.867 li
5664.72 498.918 li
5651.15 497.007 li
5646.63 496.343 5642.14 495.593 5637.64 494.886 cv
5633.14 494.149 5628.62 493.496 5624.16 492.668 cv
5615.21 491.063 5606.22 489.549 5597.34 487.743 cv
5561.71 480.804 5526.53 472.467 5491.97 462.732 cv
5457.4 453.016 5423.32 442.177 5389.9 430.064 cv
5381.57 426.993 5373.18 424.03 5364.93 420.798 cv
5352.52 416.03 li
5340.19 411.119 li
5323.73 404.601 5307.51 397.666 5291.35 390.639 cv
5226.89 362.243 5164.73 330.158 5104.87 295.179 cv
5044.94 260.265 4987.29 222.476 4931.48 182.74 cv
4819.91 103.156 4715.92 15.6958 4616.6 -75.4097 cv
4566.94 -120.981 4518.48 -167.533 4470.87 -214.699 cv
4447.09 -238.293 4423.49 -262.023 4400.12 -285.899 cv
4365.65 -321.03 li
4354.2 -332.646 4342.71 -344.254 4331.24 -355.736 cv
4319.77 -367.286 4308.24 -378.628 4296.72 -390.024 cv
4290.98 -395.754 4285.16 -401.305 4279.38 -406.95 cv
4273.59 -412.554 4267.82 -418.243 4262 -423.778 cv
4250.38 -434.884 4238.74 -446.036 4227.01 -456.919 cv
4221.14 -462.373 4215.31 -467.905 4209.42 -473.298 cv
4191.71 -489.445 li
4185.82 -494.868 4179.86 -500.134 4173.9 -505.422 cv
4167.95 -510.703 4162.01 -516.027 4156.03 -521.265 cv
4137.99 -536.812 li
4128.97 -544.58 li
4119.86 -552.188 li
4101.63 -567.389 li
4083.21 -582.239 li
4073.99 -589.661 li
4070.92 -592.136 4067.78 -594.489 4064.68 -596.91 cv
4046.03 -611.347 li
4042.94 -613.788 4039.76 -616.068 4036.62 -618.419 cv
4027.17 -625.423 li
4017.73 -632.426 li
4016.15 -633.586 4014.59 -634.776 4013 -635.913 cv
4008.21 -639.3 li
3989.08 -652.858 li
3984.29 -656.245 li
3982.7 -657.372 3981.07 -658.432 3979.46 -659.528 cv
3969.76 -666.058 li
3960.06 -672.593 li
3956.82 -674.746 3953.63 -677.012 3950.34 -679.062 cv
3930.68 -691.605 li
3927.4 -693.685 3924.14 -695.816 3920.84 -697.855 cv
3910.88 -703.858 li
3890.96 -715.85 li
3837.44 -747.019 3782.14 -774.41 3725.23 -797.369 cv
3611.3 -842.951 3490.67 -869.999 3367.89 -877.281 cv
3318.26 -880.225 3280.42 -922.842 3283.36 -972.47 cv
3286.3 -1022.1 3328.92 -1059.94 3378.55 -1057 cv
3379.6 -1056.94 3380.64 -1056.86 3381.67 -1056.76 cv
3382.11 -1056.72 li
cp
.356863 .686275 .698039 rgb
f
60 lw
4472 1241 mo
4472 1349.8 4383.8 1438 4275 1438 cv
4166.2 1438 4078 1349.8 4078 1241 cv
4078 1132.2 4166.2 1044 4275 1044 cv
4383.8 1044 4472 1132.2 4472 1241 cv
cp
1 1 1 rgb
@
80 lw
4478 1309 mo
5697.46 1715.81 li
6618.65 3662.75 li
@
60 lw
2858 653 mo
4093.01 1165.48 li
@
4302.11 1436.15 mo
4575.86 3407.09 li
@
50 lw
3641.29 3846.32 mo
3594 4303 li
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.0.3
%%For: (kossva) ()
%%Title: (01-03 City map_2.eps)
%%CreationDate: 1/4/2020 12:12 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3XY'fC8Z_Y&""=L]p1#]jRTcMMd#!"pbhJ"=\!Gb_PAj^ME3>#Ug8I53JfuR58U#/o0k)f.L31M]:JA=_k[hNP?\ZaqNb`
%MXlj9e=V5lXW;,BC3rR@Uf$F.eOCq<1.l;nSM5/\eW+ke5F$ud<-a*TMW[abFlP,N>ZXNTW"[AD054-^dmgC@F?DmW+qN?C;Yd=%
%[@dQ5-I9Yt9H>29eP6@bJ@8%aQ\TR-Qgcg_1-?r%?\t$c>/1MKU0-+/^YGS1hK-3Id$uJta"VN6>6oOg/0chma2<VHd]CN!@>6.`
%)%$`"!c8[L_CR?2!fKLP&uj@K5c14^%1f.i..sU%J,Y3nOeEjc??d/E#6&Z4Q[]]<gAK.S%u&V2Ug>SsQm7_pRn??<BLW)CNrZPo
%`t'gd8[Y:7oo;%#Sj=g8li]F_fB5kUdO)A0-qIq'!iU<59Do+/Ij#a1*u+U"L"D9=ol+M-\QfdE@*AZRjaj[Ii#hosg7TTR!>5]F
%;!Uh]l)99E(gs?tmg3-HLMqMSJ8NNI$nI#lGUl?j=;F#X.*uB'mV/+#;k-j8^ms[#:&QU%3Du-Jg9PrWf';>(It6/I/8`)1m-8?O
%WhFQCqulRa2CWZ]PZ8an*Ail/'uH+lFNJI%6pYP#W?%'E6gl3b+s*`@b?;<G<IUqr/[X'MGuJPoN,&K0Lo*V'!WJl`%kCOo=JcCK
%;Z]\:Op?5+p.,8:UEWD56$].7!SrM3)oX.NSV]nJ*(\S)97,,+&V^MV@3@/;`0\B-<ZXf$aET!%(I9T'fm`#=Ns.b,7]3">H3hpB
%9B+GJ[oE,ZO.E0ejb-K$_R/hkXo]F_be!=V]cGmiGL/aeBjj@M]UTj96#0lGJ,XG"^6;lDH5Bm/[Z#)[e#4+5ro&p'NM>^K<_FI.
%"f*btcAV.1'Cbc==b_34"mV63i('Hb+.b6[JZQ."X";TTH]RuS'<N)CTH]0c4?VfO185%kp\P=K=u.i9307b!K-'VA!K:L3p97hb
%)RRc<#RG&D!Ik7gY2Mn34D%fs`Xc'.ROU.(2X:KrS?=]5QA<-J&,T^batPe!CQ590KLO9uNZd1d,r24n+^T_k&J2?klNh+\j<fhk
%p-Z5WXq1Q^!k)0*\cSI@W<;^QgYQ9bos7i^'*sXMh&?M;52l*P#ss]F8-;[9U[-`Z#;j-A$EJZWe%3fUe5!">+*DBXnboV38uE$9
%?>Yq]s#E<kU03VoLO],+H"<<o&CKjd#q6LEY%qr-V-2>@Sp7<jY'LG0U&P0:)&lrWGal)M.VG`H*\qhumk)Ak)kIsE6R:=;i?dD+
%Zq_1Ws/["G?#/$s,j0qS9sEO[\kB9#+j/,!gM@3LM;%RRF<5:Z#-#N#$edC5T;5K,/:h<I=jM="AP[#_[$%TSJ$qG=1[Ti2V:@PD
%QsB:lM8lb%PqM]b6OecZ!b&n6RfIkp.SGFe^XfS',KmTSN5_0C#q9T87:X!?QO%5`,!kr__C#$<?8Q(V1Mn>c'3D=am2!^-(F8]B
%Rk^%Yeu^Qk&PPhk4fP^k#&fHI0sOFO0*Mbs<\$qM8kA0'eprRpPOE6,eT=IKiSi^@IZcQ&VT._67`I2?&A7_`*]0B/5et-bB5RC5
%6_UJC2,0Jlo@Ja/Z$.mDg?r<p,&haQRQZ;%Lg2=8&dC?glfXL64!+FZFhIf/6SOTRXk<$>i%&V0_-!b7N0Ynm28.dC)l*Vsg!2E8
%K9uA6o+QOYGj2-W!hSdA1td*m0(MBW]2k?7`tW59FgD3oD*g#d'HeB:JAbeu\PmX$LfJ?,Of>A7>IEJkRpNp6U#Q9DT+:Ac3BIpa
%R2<)G<6oBK\qHhbkinIKAI#/BTip>dOQbPeZ(-hQKr?bilu@R2;!BQEW6Cfi$rd)rE@EAS2;M.p\n\#$KVM&[c\_fC7_YX[W-'#1
%D,LiWMG=FA<-hTdFh4\a(S]`K3ZUAiel9<YNR%_NAi^umDZ.5t;1:L!P.g?9M)66TQJ1cl:+T_TTL39H%VC#"bgViQ>+!<U2OGkQ
%r(Mp02nH,SH>'0R*#Q8A'1:B=G:(cWirj08%q^!@N#cUO)FdXO\OQn7%#W>4?4o`@Bs^H*k<N:$',8AfR1@#U;QY1egrOA.Jg!(Y
%Rof;ed)_5g,J3u@aNd'_mfmt,(YD_k$A:#-RA%$T-+%`dFPP6g%IMrtc400rd-cBG[,Z0!V,N0;dZM)EQ(>$=5-h>Gl`J-7?E?_7
%b$#oQ>DiZ2bD1C:33;dT]K8LP^Z3@q6e(PDX)F"lR8n-*oPUX&?#_W,Tp3_=0$/3cd\,g*Y\H+>Z7'c4;C+abiL4`k8.CI%0#DX\
%P#<cPlWmc&mt=TI_D@+PVH=9hDS;Xf#S,>2)_O?*$u%*cU>0nNA<BcrEu<)87;IkVXG2>.VQ+a$Nf^Q3SJd8HoF=66BHDV$*r+E>
%C\YMoqf&EB9.lc;^L"`ZiMl$j.6ehl,D<cOV<'C%2G;?@K%5jcAnfmld@L(\qM[cYV4lE[l0gWkp-gA)^N*6NTogpHNY6m9ij7W"
%1Q)joRoO#+EYq5nXCD/>'4l6Dc?Ea$=lq@IQ#=49.?4+IXQE^l3$cPW$d#jkQiGMP^R63DlD=@&]ArP5![mu^QcP[U/`7a[=;s1*
%AL@ZtRTWbN!!alL?^mb942HJjJce(r*1ZNH3';t8TGL$u/VnOklk%LVD,a\BVcm.`:/(W'g.2I[i.'<K0&f:;2ei.0V(t]4SuSnO
%'aJfG1UnbGmMrMoL]$&"6[#]o`goJ?kE+L[jPPt4c6+VInlY<"Z9*j.c69f@aJO`FZcEQ_j3ZP#kDa+g[G6&fq/M2FH/h=aqRQ4;
%;rTBQhY?ij<0Xd_V;##a7K]_^_[2BPW\H#9qah:NSrTP*qeVrkW.ZN:42>gB_T_p"#:dC@W^*AILHrq;mlap'B!/UANTV"XU!e"b
%qrZ]Y=lR+_7`dAS^Y1<bRlPFDA8[.Gc&hlZ=ul(%Q68oA]4nQ2:Qq2qnBP62<?"$XKr@(`XS-8mr6PjXmHh40nrD*q)Iqr:h>E\1
%5BHF/,Ld8EA=HR>mMoibCh77Vb9[BQ.K=)SY+t$eqB]dEVFbMJ&Wq3ZmaftX"G?mr=j&U'8@GFe,TW=g$,!HBlL-(pG)h_TT<$10
%#TUoN&)(r4`BI@kSJ`:]`\'VRbRo=W@T%#6dRQG\R-FU4GuL_\il+X)\;;"\n_tm%Q7DE6V-2$\Mj8u>q%l![i[/!e`/C+0q(F""
%AnQ^^B:[B(,`qRtn?gO[Ui/\PF!&^\gTK>.40`6I&e;ZL+h.bX@+V_IYeg\Vo6t)$'--05^^;HEDTr!/(!Cc>]CU`!o5>G3p9Y04
%lf8asll;=,*9UEQcb"1=:NMs8j1#Mq3B>\iF)Ml0)$.@XERm88T&R+^V`9*WY3lTkmKlXp@abn%%%he+Qg#0eNf[D2:V8_uY_Dkn
%/+^jQJp#G,?lo<$-\Cji]];'DW%^=?N+:)HGVU+S*?->coAA@[^m=<q0F-Ln>i7t&Q7$b;*d]V1`QZc\>khe^*,'o/'<eDu6at2E
%%SdFVH%qW38X?_&PtG9JTJX%*ZGVq-$_t:,jH`;]SPR+8^=?7Q2iP&QW]<u,Pu;J>@m2Z:8kJ@HN)3qQrln5O]3`^%Zf4'%MmjKl
%NZ@&b-t8E1``kt_E_;.!ZoSRKQ`tStc^*9HBNLJ)nQ021FPC9.)d)MarVifXg*j>4gR"7LpTf.Ah]06@mZDt5bU1T(2%Z'mZP;^j
%8M8_/WF,Q<RT[3tF0f(c.?<0Y`b@8fH/+F$r"ek1*S4_*9S[a^>e@Q!rAJRdeTH`b_^TVSU0eCd]7YM!<4'8iI*OPCF(%GlAG90$
%=b]XkmLJg`fHfYJ+J1mQkjBR#!;l!J+Erh*/=#e=)b5)Wq0X#LG6bZo)s<RNrb$*.,%cr:h;V)j8nF<ArSC<?H)&UP;=]W4O5C;`
%6?:"bI1SM73LK"Z.W%'!;Eqa-UZ>r!fLYg@iRT^R*N`6Y2aK=.M$;';1u6QAkX21ZKj:INPWF\NAnXs1).pR]R.Zr@gVkV$DZ(RE
%ro&Z0p;4.&WmGSt]/g4L""GmkcScNIq:=W6LU-o-Fk(ssSSei,0no'Mj4p-,\cU,:30n"sFPe7kDGOB^[(ojsD!*gL7'-2b'?bgF
%a0I\1^OJc//7iMRcc?AD_]]m@#I2_4T9AaAZ:m&?kPW*%+*Nsu^VGUuI)E-j8lf/Hac`K)@#%Ye80s4<Q;8ALp*'Q!lstml,.c7\
%j1;d&G'7sIlm>so.9^tOHC50lo%IqLD5FYk%.bS47Ua<s+<TH;MRn-$2#fO7H</NB5lCJch(5s*]%\W=/u0BlM]U%$ZJ"6Ag#6DG
%)=8o[7H1WJ9G`JG&-pMn.(#4.]AhlZ%!0M]ht(UFhF[V<?4]'c0aj!taY[3tg.d!C73/\p/Z.iOK_'-XeQlY[H^7e5-4#q&j%8=<
%0XPMA%Yh=(qLY>mET#K\?[Gq1YJ$0Lnb:jOZh)=2!o@5PlRqsT(]=8*/b,<B9BI"XAO#e9OiFK0N4KZY8;bYepPTM<LZ(X>(ph,S
%V)EJ8aU2XV>h1si%ju[B:io`?kupGS*#oPm;Y8D:i?Ye7'qLm]DE+=gWRS%oFi?pW5?)l.BK:'nm.g7"59kDH7rc':XK^d+=^:i=
%7jkY+AuSq,Tf'u-7;FkD2AK2LWcXDaOKt.B'l&X*Qh&T+Q,&=A-nU5RL08P?b.V\Oe_%dekI<q68D'n'G!(4L)FS:QF[rJ!pEa8a
%IA<)Q06H%QDtdL+kHcOo1WeRP:8`.?8Y%X3_/0#]c1J!V5-b6"IPdPSnWV_/=[6B>YA*#-8%gn72mVcNk^R"Cg+3EqgIj8,RJY5a
%k9*F%ln[a3#[Ed=AT#0)TdYb^.;Jur:)EJK?hVJ[d.]aM@Le-cV3JBjPJhsSi,"t]AND5`699##*W/j2eZ9\#n`F4ke(&i\>k89)
%k&W3ZY3'd_T<%eM?h8sgC2H#<3'#W#L?DaeS.d1Id`RS6p10GXDe,lJZYq5a$dK)"B+3p5Ok'pWAsrW!p]Wci/t`pGIK=B`%ANW,
%VC-[C7./%9MRt0Y(>RrJ(;Xj,p3jtMgMjFe]B#=;e0ub)bkn)49Cho-_)^o+-gM.faHZR%lNR<gp$gS2,7ZqYh<t2_p'#-9goQTY
%5A<:43ZY'4rLEP"`!QH<+-1mk%)kFe%%MT5=Nl&*-:Bp?L@YP`/:EJITt+O4rbq,)\_"Xbb"1^E#P62TM\bn8p43kE#<?W\\0'f0
%mCY:E+66\8WT\8&ppmkjmM@n`GE(W,#/T3=oIf=37.Wk[pIh$k&IN_FcnA\hn66\`\-GFHX3kmj:"<OL0lshX?)fWGp>'#Si@`[U
%/IoGj?*IlMc[O3<lkUs"QoE1c`['@!&B0XZ(*Q]ddJV_80+_6g]c6<YmG2a"?jj5`@lU7RMbaM!1E,lMB0"VDl=Mkb*p^<RNOa.b
%V'X2r35NGUBZt>;]4`tgAi/;%`k50gc"OU)N<RF;/AkU)e2$,A*$MXBq2D.1M1W!m]Ym_sB_.[*#8n";0Me_^`F"$gT:>)4=9"0c
%;soFG(@o@FSS<l6gHTRCC/)[JhtXk(g^EjV/0r[7KrYU\>m4k/RJXpY]783'*f4#lMu.&h2r8W94ZD5ekBP<=%,f-Pb7X2'=KLhC
%Hh/'A/`Co8*H7_ln@8Rl)t:B=T,[:u:Bu9@AQZ3202ofuA>d[66>%HN52JD9*ofB\bAl+uA\<52AH.]YH$%]T;Y:4jf$:S&>5m>b
%g6p2G8&$G6R9*XBouB"?QRDXS0-@`>Ct=!q.^)u+P[>WrjWr12.^/kI9X,"Q8<uMR'chrjM^.+8pb^Xl'(?)(oSOkKbe%7Z:>@@D
%0$p-sS<'km/DOK<d7Nu90S\a,++E-CBDu[E37sbKG5=e,)1P:n)9f$(adE+]fV/JV=r_Ce$lbRC%]6$7<Me)>ot7<*-"m%>cW+S2
%hkbrch='Cu\]Tl59i>acFetnbeOJ_$BeH4'Tfg#<Skk^Fd,fA<P"R/d>d*'j/!5+d:3?`/F"g1s&5bdA5u)9:Cm5$4(<*%Di!2qO
%-aDBQlSg1uRU*i6^Dudr]W892KB0i-8Gt3uC9`lD;]MmlBc2%@MfhRq=jbXu.6E7tUMA!_#ATbVB$ULYDiU'8<Gkj9ZrH$t:WGsS
%QaMkI_hl,a-orl[FKM5d%M!M0.=17.E,r+DXlujJC)@C-F=NQep$RJJ#=F`]'qQ.D%X\C@HG.VM#TD/H*%jH3XlhrZPb"=MBpP2&
%)N+N\o$[Uhi%T8;Q:'9@/3,5F.P4[!a+7Jq1gP=6&ltWEA>(ie\g-b&qHXX`_1A\]V)Z_A#m-OC19EraK$9sb0,AdYMBan#]3r.H
%OBM"H]+eiM8S6\m*6,jt74Bh;=qi@*/;i[pn?jYS>g!:RMm=%Oe<+:cs&tZ819EubJrI;W`EeDmhlo"3\JBnu+'=H\8;YR&F]tfQ
%.&CKYMrFl-7Id>4[4%Y0la^,UieYY;?%nQ0Be>2UA/7W!J)r6+,-Inb7*BL>f.:XHfH8CZ[)1"_`8[>tYrIF3X\d4SJu(NYO;uom
%o&]u/jKLQ4GC>!U&M9H8*8mQ]rUUsmVDo6:eCJkE[,@jkIe220=4-tZMU'&9esB[i3>_g!dCG.[<HOntem]McH:^!:I>(1_nbD>0
%b\6(1Pn#Vb$<b^8\0o,lk0H9;RcL#M^<>bHpjGntPsntY2N"L^hWhPMSl;JZ]R`[<Dj:@CBeMX3gOu<eg7'Mk<mcM-khGU=>H3/B
%H9:$k>6"[:_r1FseAf:Z(lX(YhpEL6+obITq6Bnqp$g/e]3)+tn,1\c2Mf7B_t^8umSG8.Z%gZqLa)\O\/O4gQkJi:ka0sLkHK.L
%jagk4-`W'Tn<cYm(@*+RgK'`EYH-bH8u_O_C/0)5.rDCFe5a\jWKShej@2@P=bX=S'I&KmdCE4L#-_^-]JU(#6Y"B)iP4->J,V`Z
%NoB7DT)AhWopg=LSg[D1:O%/A0B$gegIM)2J409OD=rSr3_/H,D!.$`k=`JI]%SQ.)2lTrO;<RJ@%<lt"+AP7GfV8-OY@^8Y1=JG
%_JnUD`"GW,s((2`BH/;Qj1f?0W?5m8]PK/F^kN'rH4D7=!lo9pkFoaL,muhoEL:<^7_fCh@N"_D>W>;_i<'!4,**PG7'X&<J%6rU
%T#3]0*ld0J'HhM/XW\,1?o`OtjnaK[4i8i^:/E>2[p&&@0]pPbXR`bKk?V*UWcD1+s#O0*$3Da!fKNtk7V$aa.8lh>;2\)+a:SU%
%Oh\A_X/'#I4\\KUY**sn[&^!.,sD:0Zog<r=%S=QP'3+tX/'#I4o_Uj4?.aj8P?4LG*TG8Ug590s/`Ri3.4k"bH@"OQ*dTf>pVZ6
%XL()LI8`^1PcLTc-1*0r=%U_&.kM9,hc8*`X/'#Im4.@-Vkbb5TZgtm&kc(WY1Vb<JMu&ebfCdKi!%(m&me-(QZJG"X/t^2ROkjA
%29N@]f$d]:k7h4hFAu3#jGM$;1/3Z`18?8VRS\)GBUNK>#DsKKM&+#)+!*k*IM@(d;</ShbJ@Qb;&!a9098=3?9_Rc8,n.6r^N_K
%s2^I!^aN)&ruo_c+%<22S;"!4_pc<INkr2.@RROKJMK;/BoRhX'!@+g!+_ZG,0D^IA9q)]c_7R8XN]#m?M'T0dST1IO.eR0I#h^s
%_:mQqhY$CIdfKU_U,U(iXMC<a'ZPj;**J]Qd]CN!o*eE`?mo9K/'pZ.O1sqRo".p)It%'o89)115pHXlAMoR-%lh)FVr-6FOO`'U
%c]Z\*qJWeud$4>]s0H#gFDU7Bfls`\4<<%+"_Z73Fn,70UsafK=F8`h4[?E.[mN6Pem:Tf?)icWP_E;dWg1kPJ,9Zh[r&/AU@S*X
%8Plq36g;A9bV/6mgeO`SQ\g(*emA:?NV:O+V:FFj\g%Ujj,9m@pA3.CLMmuXW#U6E"3TjtWMWGHi(5'U(&aDVqsP+JC5jtK4T2W6
%-jr/$=$'/@o0FM)(]TaonXg?7`6EaH0@#;=;i2&[\4/0B:jV8_n9q,Eq;GR1@+k?`Gf6r<D0Ls8*2pX0b+b$,;K(hM>$-kRkFDD+
%OIQ1?mhG]/iE7d1DHHh+"9)U,:#=I/ddj@,&0l1((]tVu>olddB1/@*[7s"Jau[E*0<O"IpQ:>AgoQZ[JY+2a>aSt;E@QE;<I:c-
%;P*i]F+Iaj&7j0+MGm;k+CP,;'?'*@\oTDd7ABtQ#0*b-/^;*j-j_T"/'X&d5ua_,6qSHjc1BmtJAmuc39k6K.>,t>$\4B>@pj[q
%/$7fekA7!>_2p2J@MtX.oJ8>^/9RGRXO;@Z.W;=7B/I6F*XdFZ[kX^HdBt$fMEQeG2mom_N3aRj%)$48l;qg]N?1Khd*j%1V-G&n
%=BF4a!B.3A-e@Z%SkGp9;-Va=4[]IFBDF`#Z:AVOMMBP/HV/PDZA8,f#6Qrnls!-MPDa'57N,X$)(ODH)G;uRVV:UJ2=fkThXSSq
%)Jo'[$1ukZTDJ^op'C'5g'3"B'Q@)E,%*h%@<8!*dV(S)(4L`?:sd>bBR__6JnQ+I0d+sa7]C!A44(F`B;DL/5D6VMfj%0eX0!JD
%VkF%FnYF<27k&2af'/S1>$rYbhf+XS'2%;?d`rBmnirYEAZ]22>cKJEABs/U-:;,H6lH98UGdXa"GVrWQMR9MIKC1f3E=ha5$nq[
%g\U0>3]0mu]\@/;(eptdS0fg)9m`1JpuNe_#PQbths+#sMMck^2S49^d.Dk+B]^TO,&*WFDNqm[YMcDP7mh!41_5DWdf'l>3&,MB
%g"]A0orqlJX87t,J^Md^,t5jODNb-/S&'PfJ6m)(P!`gJmgBs<@b4uF6eUr0<lM6[HTJrM4`6t0HOJTCe52'7dTp/IZ,j?,_P)Xl
%?SLkKNOR$2GAkDZRj;*PL:pi6($'1,<rJ`W4Xs)&iQXZd9pMeX3!?L7+V[`Nh&.X9$&-du(b0<V=S1[dbpICTgN-<D5^f1&:g6Xf
%oM7cVfoo1+=.sOH#1>\7UI?"`oRhO:_ukCdOH3(0m%pLn9i)OkrV.<G`>ab`HQ6r)#P@1'i73#9n#"Lt+=kCa+N3X\FhfN^p6j6h
%[Q_rp%O<A/.)[\8PtCsjgH$lmB\cLh@OP=\`GH\0"q)_r//$N9>Rlb4F<*kTR&&>g@7oYPj+-Eq%W(Z_Pk``VeE<,7'F$=)B+Rt\
%</')Y->19;EJEgo(^"sQBFVfr7U,2WT>@9/%\M[cpMC\6eG6>>,7T)kB,^A<<fbu;2h1_\.#*X`Vll[0ND]WIo$+Xi/R1[iCK)cl
%1SX*df<OH'8upPB<1a'jSDiVBD&'RJW:\rNfhC$p]lpnk<Q]&L[F,"qlg6A=$C/gHR\'rdh1U@h+Bca^OhZRY%AS[\5.T:"qPKo(
%*45>a$E.h\!8KCF)BCSg1iNQ26K%5E62N2l;R/:)C1$W@;Yh9DC&H@5RZgpoZD^F41>.(T#E1Lhn2)P8YWL."DV6cb?]i"Lk_.-*
%IE5!J#(aJ4Yp7Za03=Q<#f8**[61GS;QCd,jeOEOn;h;N28LPONJc]%_-V;C$8_T^]ZY$nFd"s-2R!4S8t/a,'l?#&V:Ka;,%EgM
%;p]k3XeUsBl`ZS(krDK%)+UV-+[P!JN=dA*7fB+S=@(s1YfqJTN6PCJ.+cJ^I!BI!q`oY1V4\7D7-T+uAINr_b,!"piG3XZX&u^]
%)eeq\\Uk$n3\Zq,!iHbR82g&s:"ko&p_S75'DVY9A"]J'HOaOX)U5_U>Y3QZ)TOns,YdB5%!RS$CSF9MIH#tN`U&QAIq39POl]%'
%FD6bj+3sf-ZdrLL7tc5\p6Z"S@6BR=L;/[MY]i2eDuW__./dt=+,Su)0XaR:+^\UY8r!!FnnB=*<6kO5a>3BAk(kIsjuiet3SX%Z
%P\jODp!Xb"J\I*eO7d:K.N+FlL>E:3IE8.cP\O,(pQQ9.acegi/37U<^/S0'97u.fktH8RYU&H'B%:SndhCXoWm);5Iao("c$$SK
%Stpp2e(SV<N5e7">NJo_ZR,O<#3G7U3CR4c.E6oo)mAt.%$%E,U]%Q#Ogo.AHHTn\>JnOu1nFn)+Le(qEg@-N[3/X.C2p7%6p*DC
%EVklp(lNTbU+X5Kg8`<Ck"BMWj9DnST$]hki<MDp8^8[S42qkD[B7,"ln%gp$HJ;VcWc8*M/AE=9%sbOS<Pn.3"eV^OSn-,U0r=k
%14L<fTQlR%1CsDXYmsb!c0gRN0@Xe%.q]mGO>t^T6^n;5,T"fYe^R7*pk@nmnSX)\\#9&BAt,Vd?d_Nep6BU*5"-l,#"D#7H^U8p
%A?q?'8u#fg;DY.q\<f$-3`WRF$(4*,;Z16F!aA#`']D?lC'&oQ?IkK]D(=>u^-%@$19#plbCU:7_Xog%7;/S*J2s.U7VRsf['JJS
%bD>fuH>I:gqG[)r642r6Ag(>c5[&$T+K*5?+.@aYcmP5#/;D;?ktKQ0m@)T/o@p3<eHZpAJ`:qO4BXRGZ8]1!00Kc4?CgeVF?)7:
%)$n\<;l,foaq&'0S]j0'm>7#9j0EC:>n,%MQj"#j_]+tt<#T=`P%*FXKNTg`D9#gl/Mc_aWRc#q-48YubcKs"2mB!.N&e]+c`ZD(
%Jb.M@HFDj;O8EG_6ma/K8W\HXg#][)om0PB3HlHmn_W[%ZcVV+,C(Z=XL7c]q9#ZibO1mG]r`6r]?VF&7O.*DNi]'Q+9.JKn%.'A
%qI-i.cThGS]n+e2f=SSuiq<//=.i]Qc_f"f)>j`qGaW72,"'8eC("qf1%FL&LPrPJppD:d`hVgm$.4&6$h2R0ViLg_Ci#3fe8$LS
%N41n02U4oV#C(T5(,"C/,'[<9[k[-!D8M!V"WQ?Y8\+R&>Qsij[K,,'DM2M(E3kCt<\=p7C1f)&D4P,.<'k@:[dfZ6asY)nTf-//
%B_"'P:g5#dH\Jr&eEd*h+"n?'-1c,R>&9=*',qfs'DVEs5WVbfgA=CM(RilRYs>FeGE^ibR*?[gZLR<Y/lqa\YGG1f9a8Vls-,"9
%7NR_XNMEoB8XFiPUIN7eL#r[FJh`n,as8e0.?e"bLet;,o]8=;X>a3b;*d1mhLn5Zm[d!q6h0PYI6ZAZ#unr0K[<9,X,9?_c.]l,
%d.VXj"f(*^_6FKaOG?pYSf\'7)^iu$]Vb?/Y=+I?k:c<OF#a5&,YSlda<*t>j&qa5N8NGu`\,F>lg`K5O!>53_f$XC_;p&^0=>]Q
%DB?e>L"CQ$;Vm:[ghCaI7h(nM7t/@AD*q-+YC4@S``kC8S'IN3_F`uQU$WjhJuR3M*W7rGM8<.LI3u2!h9nOfCtF\C]YXPA9=.0f
%E?'hs\"\k8p/]3#,\$^l5Fb^-#@cu4P)`$WBCE7qP=goMlOWX<#X#"HRJ,$RW^puL@jcK7$IJB-(_=_)&'7L*ZN8=ior-0UFagG@
%MVIM*)f(]oFKd)VTqJJl*(/Ud,F7eEX20%<W>rqA<[\eZC_UAW.(k_EKHAfWr:G)\PctolruoVaO4P2@6XCk%@IHhakhYQ!hJg9C
%Xb>;QE83`M="Jq,2P4$_J[=)Amq+uE,g:.((Q)>Cl[Qc5?eTEhe3CfE8.S2EJN!mBKojEile[p"Vhis6Ps"Z@1;T]/9`unOh`L!u
%$8s*XU"=de5Bm:0]]%[/fa3"X(FsLof(JXB2tWJ`pP+U"J9Ulbg[e>9gkD)4MlN-:F]Q1lpIarGlat2D@E\E3($V'N=,NTT?9-7N
%Gp?DIBCATPI)Nt8[sfQJp\0`p]a*/9Dr,/[%XR/tc(m;gi-Y!kem#33FRCC=4^)VbH8F_YTD'V\NHqkQg5G^l+;jV1eqK(WU);@l
%q91;N]qTDJ][u!6(%890Q1EeHlrC<[a4i,lqg>)%H=%'XQFD*eRJ3"cS#bC<GsCVs)G8%S>GmLoouPsEf/O9_H9Y"\+5Y9YF0srO
%.,>VF1Ocp@*que?poCl*/&B.)[1[5X]rk20b0C>eT@T^*(&g@:]HWn`pfDV_NQ7=_%:s`0g:I/`8Q7A7/*Z41DC+n=d9!W78*;Dc
%j\p'Y;SQnH>]m1W.sD[aoGH%Y<aP@RQ^)##\utC1Qkeuq)Q<P%:Fj\[Peh5u)cqW0-/Vo!X`F_I?U--upd08ba@ER\P)is_K0H9;
%[!fQi3u),po)7F34?Gb$*Ta9-07-XPoAq#H3+(Wm0BBb:"ZCa(Ec]3tjHPs+IEU5jn'&m8FQ7.A-E=fRHL,KkjntdW]!7NF>7Eb<
%<`c8kPP8)6HW=F<+(%34pJ777eO5SW=?U,'U".WM%DR5"e_XND#tGJ,+1JFpX%L>)YZa%MWNOfYgYLClk:jR2h<F>n2f%`gBA'\#
%GN3\&5#WA8673ORgHAcu?].jJr7YTPU:PMoZ56WdMrEmRh+HjRm9-W@XHh[#@I=$T27M/<Pj7SkZGN_^eB/TniUqM<SJ,(Jeg!3O
%@6LX0r6W^bTl>FcIX546X;BHsp=A[c%ZBW[V/bg>.fZa08D]$O]:m$b`d7M/Zk63FD`>2lVsq^O`QmL5r5@MO1?\K(7db9r@,j`J
%2`I>?e^KM8E#7<.B/;1[SQbXc[Gf.)T%>'eaL?Ua(*`akGH'UuV0?hUVk>:5KgpOIs7iOWr8lsNf!!+C_;C*AX9:H@C+6BX#j)1t
%2S1%jG]&9=LEFW]+;_2G"1Q=-S%u)`4UGg!"mdT*ThG=G>4NoJ).%g^D$j(\O3N;%Y-rVoY,[s-l\;]jB;j.Gi0Z]Gf!M?1c&V>b
%&.A]uSq;o3]EEG=<f4`S.ocnID'el5c09'qW3!AXK(#U837qBE'VV!Js,/PE`M>;&>Iu'=@4Tl'CKotu[VtL".E?=k?J3h/]i_lQ
%XY^Bm:hX]1(_S'e==A@dE>(C\.n8`kIq1pMO#Nu1>55BAlFu(QiF)TB1b>^Eol.:l`,<F>fD_9/F`qsdXINN9L%XJ\^:eR2mV[e4
%08nR_fuJ"Y\jt*$kE-7dI=HD;]FF5KDh$i>Mj3*@gSNOQ?]@,)Pr*X=an_n$\)[uu]O6#b!?KX))1NF5U$8o!2SGFf<9]?.S^LSo
%aO!@:@F1"/gblG3Tu@j\D^3?i)_%=<8Nblb\!u>DVQAoKjs03H?j"MuK,(o3/">I(YLo?^5A$PKeL:<dI?V1+Rr\qJiO1h)+Leg1
%Y&hX-_%lB]F1&obGH5S`c*"MN?u<6fb;\DfJ!`d.nQ4K.!PT7oU\KnP9i9QuN#r<<rH]`bj4ejQE1)1fMRm.2530=uEV#;+6oe(=
%UP1dW5.ME3pR.IPDAepQ]8Xblo__244Z[=M-]'f1h='g&8_Qc.?1sgZ)4=>tEcQR+\g_!^Wk7i&\dFTRm;>?N[C_>f,e`1@olY3j
%\PoQRLfW/$68q!,-b?S#,nABcalGp<ViZ;KmZ_XM2g.4hFgFa:IJdt>nZM9AWhmqB,!?-R5:ZE2H_H)(`8:K*3O!_)<(hQkf;g9G
%c"!@$h`<l6mI)?Z:]"cPS!j5Aqbq$VrMJ.N56urU[=eFaf$hH\1RgI&dTahG<`>-UgZO@Hd?r!m7.^C8DmWcQ2.PM+Vco$Z*jf%L
%I.nDgH+U&ohD^[6Ht0YZ*g\Okp%V+BC;lh*LVA#><=2&OM=B1FRtrfPrC"BK3DNP2LY'YugMT##StEESa62E#o'*"i9/^-Qo;V-M
%I4Z2#2?TqZ7rKrTD:\1()`R6QoZhV[:7nMnX*!mEdm!Cn!df]M8:!JD"O=6@_l'ojl/>,dcoRo^PJg<Rf;]kI<`AlcohGB:ZW0!<
%cbom9pWV/T.?SnB%pR)*/ou3KYPNjkq*Oc=\9b:FTD6_Sg*_7AcdsNUDoeS6[8,:+[I1>I0+;a=c/proS([*"_u".up0OBZC[o>W
%iC[TThr?fTZ_7(o4c9WGLU.rVGBR$EI8$5f:X_Dga_-JkIotrQSU[GM)`adqpi;dTa):=AoA$nG5#o01;VG6`31'SZd*5!*-j21$
%gH"QiJ:/4eYGLW=bPKoBEIM+t^WIX9?P`7ZkCI6]]CHdi8;2]P68%7^0>)EW`N.83[I5UEE"]^mcUTXk>(rO$2?1<Z?_:Bn:Tl;7
%WV;lI4O6;P2mKj7e]ke7[W9ism&+`TUSmk@o:UTrp8rLA\dQ6TMKd1?X5_sa"!cWK's2KuWFc\/$X45'^7G[B+6Z=DoAP@NH[[A-
%(\]!RHR8,j@SOIaHn72MT=dtYFm.t%k:BMY]"5sqT8\@S5')V>HTq2\=.V9hoBIWLFd79pphB8pFB]3g#.RA$2:8(4YKm`MP-UN*
%4t6fblPnqLR`d5;9^\XbF.(2dYKPP.@V`;p=d%&kf?d5@hkhJf`^rWK$X7Q<jbjc%.bCjG!\/CfnS2t15-F1-S]_@eoMMWYhqWB*
%[7Z[3@i72rG+N&jH)n=^DjA"Llr8&\p$8VaCUH"e0sIEY>X]^@``X&tdrus:b.QmZKD#!$>@t&cYNt<(FYY;pg@%a)hb@BIqH]Fg
%lRTI;rH`QE?`u[Ml/Td<?f#Il2X&1NBq*g4[`!.*3'LeiN,!?^\&hJ0^1K"to%GpPhIGd36[ISO5Ai7!9$>D4eQ+O)FPV8r'G&rL
%[>Om3qh':6(QiQtX??KH#2j>E[D,^)Vm\)?kN#%FTep\fcq_<Nk[,kjlG#P@I_b99[eb_q[`=\,[ZnNH[*qu8ea\W$Kp5'+C:&#9
%p-jbA$q!`WEE])pbX#[C*p946>Ja]#-e<O*WqU%G]h9,+(bLe/?0<p's/hgi=4nrHG:o;41"V!9>/j%P,!+<!)7nBp%"Gg2j;[FM
%^.n`>"pQ512&\r`g+qr.deKkODDM-[n<qWgDi(W60QEX9N(lWQR]CQg[I'V1o.0mD0kiDGhl61DAu;Z#(i$N6EOr__1_%?IUDC$j
%oe-QH0@dO1S<\7+`2,&8ml0EsaRh+H0j,5/:>g!\_#3]'W*,3$9G3QBjAA,'(on?bN\YktCCj(qX\XQ2!X+Bkg1.QcqA0B1O-<OR
%L)-rrZSIgY7?7Th23>$@,W4DEX`)<[(eW1SJDa"+!Gh&C9JXZA)X:+s3J)1m@nj.2UIZLseKD.U@e=:"qGYsmD\T=ii-L)ob(ZU:
%PMEisJ#W`2p+7tN2@!7+k@T'."RZl/\!V\F@;S-D=TmmSCp<"=9K/DF@fb6NSR>mCjfo7U2aGYpPQ42B@4e37!_Qi`_^cW$mIlC`
%,?;K-ap&$6a>B'[#q!r:'!`*sH<M?h$9`hT-)dB,lng"VT#C;F_XuM\r*&r5EnVlt[_X[C@nAX:4N;L8/4*6OQWdSAU%1o[CFWhr
%M9@`1Zqu/(9$eV-q2WlO/$2D7r4Rgm/Zo"8?'q1qN!ILGA2pYZW0:Xt9Gj"+o@"JDY5fDFh`_?&Z7dCc==D*AA'FJ9oY?Q#E8!3N
%1k&,'hp_mh/>Gdh/I$7pA[H1SUG\HP`cr(*88OR:1eOE%JE;M*O"hBIDfD(#p4k6]B4A(Xf\5ueYD-\WOhY.[4,,AOVP]*K45Hnm
%$0A?qX:q_`j&?6TknM2Hken!D\\;5PACh(ej3TEX0dAJc)pC,gIYeIrdFl`fMb$10dCI28S.+8m>t:(`%D`u$Z\`Rlfh]Gm29pce
%\SA0UK".K<T/T8f#o02/FOWXb>;%lK9lCQphPn0?L3hW9i)-%m@pd%87$6C^Q1f>Q;[jL%qoUjL*a9($qW9:/[LL,bkUt+;mQYQ]
%I8@sY[o5sB^'%RcpdpNe'3,]\LC"`+@ME?*>sfePCg5QfZ+A0$:;u,'IWIp>i4Z\^@@0<Dq;?%6E+#gqCaGQe5DJjeV_S&i93qO$
%H-DMh^hX[%i[UL=,;j:O-bD+Nk^MM_cB5C/(6sVP$*dCO-n:dhnl'DYf&T(.P?/Cq1lIQ/+5F^.qEo5rAoD0L\_T;Yf?ZhSB^;m/
%NP%-]a(b".Ij:X9iV'9jFd*MdOm(?Sr[E%&aZaU47U+]3QqfB6dMgAM5)O)&hiht_e7s*g3P66ch.jBnm1X(N\r#ic]rbV?j%fO>
%kTUu%jj\ZEgY4A-_r6Ta:OQftGL3%N9Wpn'qnl2"r@-%JLULZ7,MS5inssN7?gr3e8T+2JriU1p5W?dlF^4jM[8g),Lt<FRO0M"q
%Hp,2FHb%3rFLRQbMFQ=YH8)n;ekQ#Pb8'5qN*#ij3&"K\\e/ots#*c3=$)8=GY\j0aQn/X6t\`Y]*B96AjZQ?47W7BCr"Tt#He4!
%`^A2OC+LIt2,#-1Q#[\POl-,R;Q@ZBp_-ZqAS3s1`i]R,B3VRL"Q1c#:qN4of>kVj:8t&=n4F(c.bUiT2,.p<@S9pRNG-YYjg`$J
%YRtUR+1ndoIf0?\#XilsX137>fXZHg`Yt\5H>r=pB3VH%mV,&3&L)>3a\q]>I17DKDQ)P(99g`*@TrjWe#.Qld$>U%`E_6;i@__X
%9k8Eq2lSBsa&N8ab_+j.(DFf0E;-sA&7LI1-dqF3@gu8g(H-\4Q3ZA<\7jesmDiuC+_3=kFZE+B:VP<=[^*N:p'0tifStD7Sk1H.
%#]rEK=#(c+$1=^8XfL9Ie;7<lZ'BVm>@[)g$uk\f(#7\BD)'.b[lpdcS%[XKo)%)rTk5BUB^\(/pUYoRn`)e=:BM/As5#&f;E=<,
%pVrCMA@QX0#UeC8n"j,0q&W41[SK(bMR'K*(Q)91]19u0rE,aslGR_DV:/Ot@?C_&imXG/.[BI$\$$%mr[=2Y42e8I[6\Sk*c<"k
%Lj!DV/,</4$n8Qa"G6NbSK!bbfJ7Q4HD,uCEUNN[*Gr3a='XhYk($9"ijG'P'\qIN`XV`hF>SbM[h!n*W(c2[;`O"Xh!=gc8Y(l?
%a*\#=*E&?Zd(W=5U-"(S9!!!el$a\u&Sg$S^.8.VQ5?1PMD"<AXMmYaWd?1qC&`K8OJiMQpSf@E]9uW&XY!/imHsNh0h8$(*8/6^
%b:u_9DE%3V7Zfh?-St4c@VGk,W`&hkIM+_lNh<0^Q",ZF:Q"7UU0PGXRe-tK*6*,0mq0qVd)k_3a,^SA]b)B+N=^<7SgP%aCF\t!
%YtLAk;3f4^nJU32E[A6Ll5V]`MR"5WiQap4A1,ha.LE5Z#t/oj*cariQT5uB[A-4BlQFZC!G&Lbi84#&ENe!'8'ks$]Nr]u*d1l4
%oiV4d34Z0Yq9rpXQ&R"3<]DtnU=Y*XP"nRb\'WB;O@h\08#2R,1<u9Z\e)CU_KY*@WV3URl[]>!Y*`sMrF$oY\oM^6G,[DZmH#sb
%,>a(5S9S2m%*)-2ndV+N*GG(OJX:%9>X)"p577%E$/&QZ<am#o6RLbISULliWrs#2^^V#HM_C+'mBHX,W!ulN>P1]EX+s/ZX&.N&
%J\8Jn&\hT\mdCH5H#"uadk8e!S/7(tOs_VIU%E5[&!47'S%$Xs=h\hn?&S$h<#Flm0G)a),N3g4Md@4/`SAks-2tIWY27oGf=e4>
%]K2_8@er@N6b*73=FEu.\)`n&GWWQkDX_Xtgd!/84fCpgT9Zq>>&78('I9-n_(@8!Y8qj'8dkGGPJ^`Dd)pE]5"oKs;!f`-Dtt(!
%FTbpZMW"npgsKg:+7G:<qc@Ag"@*X%I!5P,I'MctO(,`uUdJs8T<s>Ij[g!]\%AFA0$AbH#H62aHK.72RR7'b;o!;ALr]baL3\'s
%8-@5JB)gLl$k#S1L\&>1o`m6EMP.Z!GGI)O2Z-'^lb#H&qn9_,B-nhL6]?+HkT@E3%=0.9OrF:6]?lO)n7)aBdEm.*m179.HGEm`
%DJi:H`r[L\NC==+SL&2K?:)FuP69<+"7Rj\1<b/lliqB%PknWU)X9V+2Atn+@oasROu>kA*XhBVoG^=0E.r0@hAdt*k\I-.a]\d_
%^>O)HquN/P%n*IR%H/7q3$C^aZLh;n>;@rFOMNVT/<Cnoj9(!TT4L_R8#U@d(CMR*E//4rK@"+AF"EHIqHQ"/#fbhQM&>[SR3C9c
%3sQN/Qlpdq<IJ<1+4=\!g4f]-^K8;k@0AJY`fQ.`8XjO\]OP:9Rn84VTUPreof6KRJ-1+mSK*UI3$pT;daW!n+;Y60DK9]gK;M:\
%C7$sIq>dp":HU"=A#g4c*uQ`[mYFi)gR]/dS;>%)\,t7CSL&Fs]:n=g,Bd483rp/mUcDo3@YO-3#.-_K%bD1tJ0T<R?ur!P(MgYI
%QVLsF\jPSl_:8/F;:!aH<X15f"s,\[AMgWt(F<LKl!o:.&@BE>ZjcKT8R0mJ(H(^O<V-OP&?s*DqeS=5elIi'gbOgdO9@D'ED24g
%crPinSfE,sp28kCC@&6g^P_,7R<g?Mh=_AoeY/IS<*jA6U7f]F+CI$Qa?1/#@crSmY3uMELW0OmAonfDEO@epi_Jb'P!fG6a-Xp.
%f&l:"D8c4EVbHI<k2P6Lm:rbHfKNA@QA_1Hio!s%LAR*.po?pj4e'.jmkiJ/ejT&n8NfXG0&$,</b]6MRefRBYlW%L4H'D]`.8ha
%h])f<4[q;k1\1[WZ1E).rT5E"]aNRVQ292RGiG2LN62&LMPk]%2A![N^lbsNm_&Pk\[?o##=1:D6_XN*%O/9"((0`o+CVUKa4O2%
%K`VKk%i=U3/,5=k)i8>!0!VPGmmSdR_)Pk"3#JZhi2Hn^&5EbqpS!_m*>&oLYH/7u*a+]s/I&UK@YR.pc0$KgIGa,\JLKT>o]nfM
%1*!=H81N6@P6@OX%]3T?p>tAoSQLa#!\"=r)KWujNja;n%6T(S<V:Zd]gu2,JjaC,2(5@r;'aOH>!pum@*cIN2,XOqo<X70l0"s=
%?TQa$^+sJE>p:i(]=#6K+Glr]EVq!s"`3VlB3&?5Haad&36P[,PC[cC`IR-2F^,>+f"/g?Ps$QS#I45@\qIVtq%D4JD^;iBq!ukn
%YGX)$0ROM:SH^5Ia]/P^)o3fIF1fNZH-(sc6haLr<2<dN.5Wnp39Ktq1H"(Sg'XTEH_8r5:P,(pMr;FZo$Qcs+@^QMmT(IiXa5cm
%6L,N4+-tf82L@#&HKCCsFP-2/)&4$m@_Oh#[_%4@nce5YkQVHu^/epF?CGsj\oY7k[cR9$?=2BbFE?oU_Nf.sL0uqTdAcbJPQcl'
%6@E-&RXC7jZr%^=Qg&t0^)5Uo_LUI1,dRTR3(8cD+h!snEb^%G`^JL-.EOJU:m0]WdXdq&P>:]C9Q:%"C%HD0'9X#rla63r[W\u8
%8WIFjWkBQ=mO#i<jUg*le[JZb@3s`#=NO9F_,0a@d$!.m442oHDW$;([]A]b.unB!!q7nSB;s@L4W]SI'<e%so0^75)&GO+ZM-'(
%QgIak;lJ@>Ns"f;DA#uu*tkH_,<$^u:?AGL(6.+Hf5.RW-G`A:a@0RTGIR!n,LX*HQs8Z#J#^G28jL;kSYXt%cOpIMn7@I3i+"*Z
%;E.r"J081af`E#*K@SHZeTa\e$HYnTb;en/ph9";<QaQW&MM:!Y.h$g5eG/h@XJ"=3`a<k;&Em8-)48on+rf]OPGiW0"7Gsg9X`Z
%_V]1`>oqHSm;2sSA2h>;H+Zbalr:GaHY)n8l9OJj0+Q^V5tN*06]uS%;R-$5VN7mhXCje4WNc429)B&X0_0fJAi%Z(J\JfdLsJD-
%]hVQ5D9cnj_LCSD0"TMrl-IFR77fL:\hH#i(Q"C"`K--*VVKs^P*C@/O\ViA/QPClFBk/['#e[8B[OosKl1mlV//?c&t*Rh/)<C>
%n0Ce>Q\FYD#_SN#pt?$kn$F*pUt6=>5e&sNS0b<KqOXJ$(;!c7+djcbk2P/*e+lE1B:ftk$$DC(+!5%TUW7JsnrEV3m_(<YgPN.U
%Z5TbhhgA4i(hn^<i$W6.T3A:o"u>&QDI@VS"ds`s<SY<,%SsO#J4YIfeU754[uQS-+;oQ#4hl25,a%qKi"%oK@XQWH3=W8)YsMmT
%42`cWR=;bN/&u8l7b1N[I;H(0O(0$gaHoZ?T"oc5Ao?)>XTID+HCF?G[90F?'BRCrR<sqF!R3Us<>"5j6Rai$$H>tp:h-QQGMDgn
%#bqlEdG=c`9jDU5lX.#m`bQNaj#D7lEcnb`aDH<YX+ee0\sE@Te;uom(tWPk1Peb'L0Xe5W.F[4Qu";X0kPhF52=>6"sUG84[ZOk
%\BB#(-[0[c2TU4mBB<[7/oM38jp.`4?@*W)@oFZmY>sF+ZMga>;tgLBN-D#FjC:>Ugsjp9lt^Aq*RbrX,ca#D2e7@mEgG@,9V.d@
%DOV+UF-.!0;fp!NNl3POH6g2oK-;XZ$[_-jIU#ujnmjXNdFUQr,<Zin!ID=F`>VLCA6'<f@^Nbtc/#4k<9FDjh^GA8Rp._f\Q;m#
%AjCt#<tN@RC#I[+fOrYT0EY.V+?oNHjJ$Es.*S6h5?!Wbe]0IQ3gi(SVq7@Wka<C_/]u*%\UdR\Y*$iQ"4rH)9ub,a0+ii/UZcSD
%*;H6I/@'_\3U]HdP%$XKR]dLer:-hP^Kl4RKgH<pigP*hmB(_%#8#nAh3`*Nff0YD'M'18'ZJ(3)$B2gQr-$(,b\51TnfIf6t@YN
%q[iMrV\'ukKEfk_8LjPR7gqN2%\G$)Rp+EE^6;8U!=M:sM2Ph;^'`9:AGEgKCLc4L@EV2[#.=YRNOUj%1nm%!6JYN#d^:s7-lcS'
%#DGP0M?>3=ZaK?mW;kP22p7Jns5["bPF:q+`M3rNket"`2CiB5aTsD8nbS.8DKDJF7nlVj#PNmoF2RDqim,Mg/sbs40qUT?^6Qpl
%[5Jl,3:93>.!6^3HFbGapBo1j]9eB'En9tBc$PJ*,TGL7<7*Z4NKibPc(J`YrT5Q*]Ok4(p#,Z_2S8F>*1Ygd\M`-IKTW,9dYHY+
%65L))jTT=C[.s_DH03>J8`*_k\*<R';iPkS3!:H;OP<*G;P``I5b3X.HMm_)(JSMa(UtJKH0k:'EJ?D^c@s5ZV+s.M<+eASm</B(
%?^q#:\[=QTQEQ8&[hZO-HmtbD:6b%N>ra!N4&kA$E;(m)!4Se(Ln$UE]BRp[VN.1dp6Q-AgUV#oN=W$T2alZM_-!II%q%#-rQ33.
%djK643d^*-4hPXt7XO!<",aHE`Q3*SNtYd7;;/7*"q+0-Vo6*)%7@"2:,)0n8Vc[CY)E?f0;I;lgO\+EjN6r@7oJ/k?5Xs@.gIuE
%dKE;8\1L++kNbn/RL[iJ$j##.;>R-\'M:kSeAC\pj1n+L"V!Jrf$R;oJe#7"&+?@3A#`Xeh'CnQF`!en"r_<rjli`t;eoNH8J-iA
%RFO^u@J:ueb=.n_drs=[:*g7a#;':09*qG\gsic*i\$]u;tlPN$<a$gdNk[[+T(skROb4Y@)TsVWPnLagq?g74k`XY].l(qH3%p)
%7OX[B`(n.C('=$[c>L_o=bbWT\^!.\GPQ-M4BS11eF(:JS.DF);rpR@c)*P([frB]bgu8h`@d/:X0DU9W""!(jD8e2iu>V`eCIRR
%$e:[A?tPaa(Du4'%;Kc%-]>J!-&CCVdG`nSo9C`J^)2hIH>CV.Yqf@#E=XmP..%[O(In_g'-2V?55C#hj8B@8#J"SN\B:)G6"I1-
%dVH33U?d`\XlQar6@CKA7-c:,IoKmq8>OkC@Ura(h=URB>9d9*Sq868oO[%:den(k;p'g3DRfK^41Pkm6S*bG*&^]km`MkXI`*"4
%G3aB#rN^Pd)="H`:a'CtZK(XZ?5%8-oEJ(TPA\*NUF@2&N0!Zj/n-h:5&#4))nl*J+EFPgT+:?4$FVV'0g8<M*3Q-!d,+ET-A\=4
%<l<&>TT?R+X`mfEV;bMnURD;N=aaj%WW.QVh!S!jr(2k84GUMQ6:-'NaKu@Qpbk.'-YC<HoDh._+k@aiM=*K3`Pk<D5UW2\SsWVd
%O)F\q"20gIK-4p@JFJYYRNffB$s$\g^$@GVjnNp):SY"mb&93jJG0>a&J:oSReL58(#1?g,cT<jK:%&CS(OM[?Dt%m0Q:#S`,t;`
%bms3'4Z81hF0[[#rT2V_dB=VLT$rg5LU[\7jEU[$dc_dFq/9#)di(*Wh$KF,DLY#Fmf9UdUZTCR.,3&X'4kqJ4dH\Um%5i6<oGh-
%F!H$YpQB5Q7G0A1N?7Y/Dt*)1rU\/BosCcD[&1"G7a=3`%q\Q7R5[?=UZ/a9@a1dM[(\_gs3(+F\t2uCR:^qAcH[4.CAZrda@E&X
%n2&QbTKd:cZ6i42s87MX5,7!3TK7NP>a4c.b/<8WC_=F>:.C=]"s\Kp4A<PSD%JH)P[Ak*mjaM(Z@AnL!YnFm;D1l<WrL`WK`2.i
%Gojk1[t"AP`s2Y^CZ6r%q^hM<]K:kKGBihJLSd23Sqe]9;uRG:?N0a*:Jm?(7"3amW-Odg^DWZOh@HdcYH*0PEV&?8it32Xi)d9V
%"GX[d1u<?O=+Bac(5+#A<LRYJEhkP7]%XI[cDRNb>4*IL3RhdhP#--mqJG\#95:];Au+@ErP[bjj+j@EjUn/%V(_A[;L!a#h'3MT
%FJ%5Wl'R=$_mU4JX.cuGQDmaT*\E:WI/ZcS4)]NaEbYsB-7kKU=mNL$V8%cfo.OOIs&F"0[kMjZa"V>R[sFI^+2aqGO-^mU?6<*W
%iGQ4X*81)MoX8t'PfYa=4Al'OX5Ms&2H)CU^,]$=p%Fd)_htKfrhhmAn1.1(![WBFJd[m=5a@(<?4^f"WDlu3A.ED`>Yr'YiIur7
%3R=hUdrgVGlbHi[e6.Uim5iG'-(!uf<PM)dcTeQPl*RW(IeYcMmYdA7_:<e5`cF#oJnmL%it$BPDb-cnH>;hY6rWb"=?#U1[B8@\
%>VK5&\I-GY8.2V_BS\/X7`-HCN2`1j4rFYN_lOubK'@jn*$[4$\J-JqU,[83(m3k+BB.'?FN-Y;.!e32`<aE\ik_H!0cU=e3dP.X
%cp<IRrC(U<R?V8cE]^5!pY7Hl^)V#-mY@6#FZIr24rA$`W!2#*Rsjot^5m_6^ih\4+GuSN_E9;PObLOoMq=K;H>#b`i0&h'-p]X/
%01-I?i3?i3T8#=k&b-A(,kOcm=!:%b(,uNR>(*=sIBqndc^rWqRCK8=4'JJ]>:6Yi&2e2CV/`KceTt)0WTBYuWIh-bG?_LoZ4a>:
%7N7nO4g"@uL(+[Dg5D`B!mNb_>];na?sm4*6O(44%GFX^4Z^mgW!t^\Y]1T)GQ<f//-Dfe#grd7+"b8MMIJ^Mngi&G!:n4bS7jYs
%bBXpj,-48UP_YSCZNZ9A+BIdb_q;48OeDsiLAG.S[Mp)Cr"?>gO[ID5N#eK*1,=/&le0=>E8U-jNqU5D4=KoKcqG8(Z4+XkatuoH
%OPFgi%iDSrj.Rbr2QoFeNV=VI=dR3j]I\^bJa#=l3JefW:$tU-KR:h3#V(GUZ.3Fi?F&93QWSR\Zh`1*F&72`GNfosmO;GnaOf@!
%?/Rp-79]).p*#4(Jps\hVPY8C]-f\K>eZu?3qe`B5RCd5*qi.=DXc(.^COpp:uiI=6A']1TB<j=Fn<S=$ASt9mG*Y9DTH,[<?^&"
%'_LgaaoNRCnJt1dD=eiO^s>,m7iK)^)#gGgn$;flYku3?8-;)0k?0L1i(KP'41Sj(*pahN#qQgg.'TU+8&Hn_!Tk]t=9q58Z]t8`
%6B?Iie\&kE8Qg((KA@ft%B<;;@T`$WAVkX\]hZ[B';U*-!PGSd*teZAAsm!U#+R5<P,k/kYhUlHK5o07(9KgFrV_(5r"#X=+TY^!
%\I9$6e$0Vb:MG0Bc+gCJjhA/^F#u4<g]O5]7m)51@\jWoO\lnmIh#`m#h-m90I`6N6up>(U`L`fjGk!%jEuM),mS:!-gTkII'4]<
%8>KjM#^nEh9]ul;Tiud\L(!F)+<,'FEmjka@Z3'.**uLY'$lVM_S!r%Dir"TPf.NL<hs7^1`&QEBZa!TnSB%i6?EGY.897O#sj>N
%0n]"Q:cTRn6K_!_%7b?)$LPB`+_&K2oo9D[rq_hU.5hUI0+]f[GSV,#Yn78;!bWkB=GjO5X`t]2&BAbnZ2>;dJ.,m(e/DuJ+q-"U
%R_pF<>gDnlm%bAh1W+ls`$;CWU.#NJl(_Qh:]_;+*&!^O7R70"aWlBm-tO!iiWSZM44T*S5T^ULI7SH"ZqHTo3o/Y=*>XLIM)`6-
%r0)N'H%ST&ClYE,!+'+@?-Jd6DlpV5NCYeFiqS[J#7XlrK;rPE%j%Y(D]X.e2/fe6)lkj&f[,UXXSk;go4qs1BM&C8k[aOH)-6+l
%m#sO.oWMYlhq9@X<1Tf;-^pU4aX>6.JODdDBIU3iUePt[o<t!1A%a]VPZcHd3Ed*/AQr/T2tWPMmB?%tkV^]U[b#a_oNJ'XYOTp;
%RMTgXj,Nl_Ymhe['au>/@?.'B![o($..D23.?u'4i%aoBn6jNbp6]NMr)?c2_;>f?C_i)P8u6F=k8FkpM5;U,>=F%!LOb*<7:IiN
%R0"d)[#Br/LFIchIVm+6-WAqci7Lrc29DpbS3ob8G^,,@G8P"MXC^mM<PO.0KIMq5&X=Kk_KdVA0U`&59pWT51))<o72^KL?])%$
%O]b:G,)X<MU4og"E3b<YK?qs>TEU&S-V-.DE!`.X1-Xl(.Ei&[nSoEagYj$6?eDS*;5F,VmE`q:9@,[!%kc?O(ipr=mojhbU<hJd
%MmOU\H-ir,B%F`!n0grgE?q?D;,N0tR";K"fGB?K5l'D]#gImkB/k'Tm.Pir08$s6GoebX&dQF8(5[`rW"MEcRDYU>Xpb\=Gg>;X
%R#o6^%U-UXL*YaYcj0h/b$g,>M8b#g<")\6.h_#3%Z?L\@_u^nAI@V#fjAQO=Bak)*%_h&-ZNQe,Sl1>lNc!J,&i.__6_"^m[02k
%0EfrDHa=-Ae2O]a'%h\2i])imA80AnV1Cm!'q$CDNf<skl#X-EblXUR1+*Nt'$^>`lMk(<0Z8bI1=0IJ+!_5f^jVo3rP@?:WF,&"
%?qPtS6?0kuHO/XXY[N:]V#VHTb:iS<&3h$q:k$>M"Kk1\30J+X/M86O-_M`KdC8q-+^U>5[*`g]$rPfb.hZ^O>slD/`#$:hD\rP8
%"tt4kR2BrSTa!DD-D6.,_lrs)Q$^T@mNFAH^ieI#f0+63_e!s$5pN'2`a]L.a?N'oJAOiXph^Kb)A42EiH2uALBqWqk.p&H5hTD\
%?eIB_+PtPF>6sqVA&+lHUOM1*2!P]5QFql2(:seW-@qo/ZK8+c()IOQ#]R+pSf[D&dJlN7#f"UhK`35W%%`,3iWK;jJmZY,kRc(o
%$RG=e!!QsO=e6M@I&=Mg:4Z:+NIdV@'>:!23N6?UM6ma)):muq"[Th+n?@//9]b4?DiQ'5YdEX5e(/Yu:l=QRmCbI-KS(&A#<Zj'
%0Q62^Zh>/JM=(%ff;+!-!qX)/j.M),%]+)j08mJ&6H&-1?b/2uVc'EGNhG(/QVdV'`=_.!qfRfAbV72.KHPZ'M[32Ao0'MeTpK^J
%*(;=#n`Jg5oSZ.o'kNPY#*rjMEO,T2X#<dW@2_'Yj0fX+(gJg`V4jG/;rr-Us%IGJ$k#fk8d\3_<-X9<lDYF(6NpYtepHG93A'eq
%QkO%$o@T^f+_Uk6KJFnE&nk!B(fj(i4mFkJl*-OQB1.mHXbj8_A7//"_YF@dB?bI1di!4+).Yt9mt,gPEum)g%Y3V"<lWYjX9AWb
%Q:Old7i$n3mM_b[+[hiZ!/HtbQD7+]0sjDZqWNKAJ]^loZG;.8]tfCT56BG<KQ-gR,E<lcA2omRCEE;7Q"X'ZjtRC^EkEX"+JT=7
%72)^g#!N1X'fVclcT#EWZEf1LWW(<_RM$Sl(^\;p]c2c_l0@aLbu+tl%:Tg'ULcq?bYdN2%XHD:_hf"N:&HqS,*Kg!VP0:%"(B$I
%_Q^7(7q=CDo[P38'!b(N$.mLbga;NdUVR)naG+tpppkt^h-(:B_]jQ>Op3@0<n'*5:LeDKY3)\Wf5OTQJ?^qQ5h7RH^kGo_E[2,K
%i+*:mD!<4JT-m(p)!5BD\H2>716i3qpg%r^GTFncb]%!DI:sVi:9^PJl840c&HafaX]C-qXn)0t6!HE\SIj'X@R;Cmb$pE]bTOn;
%fAP(.gS-H%]95$JXL7q`-OLP=ODO2]:uWn/e"$".`,8AqOq]F7hF,5UH(ur@3?#PZ,Gp1TE6I?>/*PorhbXB_2-a0C%i^`mB5$ge
%XYLJMW,(f&2/QuEA_Y_#L)0I47i(blX8SU.HM4+1L6q6U6cV-:D_?Qu$Nrr,/n)3$a/qHoc:L=`,(]:u-$+YXEs2tI>Hg(g^e,#l
%=Fj*&N0C04?o\Mp\ccFp&Q?ghe\V\+eYSNGKV8[0XG#_%Ag-H:">fU[H@<r/%j`tq6F.X7N3Yi&!/BSZbuh)89aSi]?V%]rOLA>J
%0d]MaPlV8L2HOVPF&]FrfeijT+0JJZp*&R`6t1UrS70nNjJ`t3,Y#/4!\>*^N!qQI@bG95X9m4?NADbJGig.<Hl05leLL`6(tpYo
%5^6"#]c,g)^f[<)-,[6MTU1!YTK[#^%3rsP2FDkL;[O^7=/7Q4NP`kH<6pr,K,\AjL:,sX^sXbBk".J[Y4*8PDG\W3,SEL(%"u;s
%;q(rC11:;giaKbsqA83)?t9P%&nZ1+//Ct8<3f7s7cPj&P1_;HkUDW<X[>2]]iftQoAE7K#Wr@bi3N@a-qA8fjXN]O#3Yh9!.KYh
%Z>^L3'i4Kl#D,t:#P/*Q$rYK#6&@Qu+cmMe#KujV:kY1WF3l;U!TZ6fq*gh:#bd7ZTEM;Ab^X[h9kjZjpcce"2dgro]E#+m):jD*
%&l9K[Jfi$g"e=s9?XQc'0VJZ"OMa'+HiY2serae56AJ8\P=5a:kmj<e3_3"j8gBJ?.U!0M&%!UWN@S_ii,NED$%hXPQp`]"9u:uf
%%8;@H2^gGl^gZq*U'7k(=cgND`WUco!ofZlT0kAp.s*aMHXIQ)5c`a_":hh%8!E`UjBWWO/+NgPU^U@5kXWY[XCNXl*eO(ci6<<?
%13o=)B`h8[kXgr')%,WIOln^^k]P$-?Qa?a&`Ok*8B\da'Uai0LHoC<[9CRD&k,(Jn;9)Y=i.^D_*eHjs0Ta6kd/Af:S7mpa=:^l
%&lCL,,>_118=kCPTkVpqO$*T(fH'CN'03D#JGCLt<?<AF`\^a*3rcMY*2JCec0%VIOg1KV@=][S3*b-Q-3,>eJd*[10WJ?_4I-Y#
%.a0FMqMMPr*;!,GU'?2SJ1lEaR4VpKM]qTKjK$'uJ=m)\,Z5Up?h"Kq,KL#@>K?g=#X$C-8i2=P>QT1A(AO7JK>+*SQjTUP0PCtq
%!(7\2LfECOOB19jBNYIt!Chbd%lq!"B^S^_E+FqfQuc4!PEnL]J\",_5lJa.esMU[;Bc=86*ekEeK_:$KAJ`r4q"mJP"Aaf0dO*Y
%TKmMs[^kH`"BGWgJV2+<#`+d@^pR<%`Zu];@P/?MF.gm&j%Zr"_YEW%AQqDgJ.otm$gfsU9&`N@jIBm9HcO>[Y3HX]?$IR"\:99H
%9WKI)0-!b%+m=h<73`K9L`#[E3"@e[nI'<EQ)@%`Mo"$Okk&9kTLN?T#ebIf\gCV/$%V_ORKqXoEgATcR0S+roReZHhDd7TW2)tK
%aWoP=,iT%l`,aq4J?"=d9P+NUK+];:.e#F_3:&WiAENtUPX,l*-%iuH4P;=t+J\#i$j0<p+Ds:q)Fua5A\][dWXqDe0N\?D<^Jf4
%)p4kRA5FhN3XWG`^uf/UM;jK<cBA^;TR),71%tZFH'fmt%1cJWCp$0N('+TD8&$!f%DVu5(_@%/P"9^lP7.t:!PJU-$h,#`9GV#0
%i$&4f8ODO]UGA&f."Nc^1H%cL)O!,$9cX!sKR\8H@A&HKFef?Q,WW,]_k)BS3Q+WY+lZAp#f)b9;F)LYajU=R'P&t<\28gaN]B5A
%?kG"WjahG]8;g"mY\ES8Zj//p+9f,_*3%6D7(L+&O&6ZeXU&/83XA[DE.p4%eGC(&"(p\*kR>*D%qm%IQ\E3Y,/L"6L8Y9kk6\#[
%[=&*<"%s-"+bPC?dk^I7Mj2F!'L9\NPKAH6jG@6gUPe)N?Ob=iG/ZSt6UZ3_M88U/rdkG,k+b2(G^/_]AD0EZA-g-VSq2&4ee4PT
%TFu%#J:Ms7,4G]Xe$uU^JJ(8^@E=IiEMJCV`#bFr+<3aFOMnl!i).#k/3t+*J`c+7"dq'9q&"hr:U/l0&-)oK!EBL7Lk%CO0h268
%#a/o:@=50,#4S!Kq%o_QmVaft$\Sk=E6]]TFI5O>n/8g#16G1[7f=p$J\bJ8)8%R&W(!/qB;i4')[J!PR8of&\jYE_5Sf*1+ce7L
%%(IKV.,R9,L-.rtb^"R:#DOSG?pO>erGiqkGmg`-49F=gj5Gk>#c^R\@:_]:J2^.e'gXNBN\ClT"HZKHnVAG8O+s&bPJ@FoLd5&2
%ZUnU3=Hit=Om5'?3J7Y-YonSPJk#ja(EEhQ9EJXWB@*JGR8(QVYS:LH&M1)@d$]q\%1u9&M7<ZM@usau,ThY>8[+eB1sc`?'f"M)
%OaosF5a.iNJ6k"_H]2jK`.@k2@0Ci[_rQrq2;hW+lh([PLXZO"P_d@j_N#cB:^EGB&Zjsds6REncQu/'S[fh-ruj<(3/^IaIsVaR
%Jgq$N%2+8i2%++e'WN*MO/eX8PE__i5PCUW&NAS5XKJX:29D_1dp90?]l>8Zgs+*(*BOIHBZF=oXgO\C=N#NUR,9lko!_2e70n4^
%]WRgo,4&*TkPD"BYOhJS0q>NACocSj''e3h%Y'aY-@M=?87<%f9n[=-a4e?_&_`cO+c%/1Nd1<W2Cs><%-rjP8ORV_:b;5u''#9e
%f8]\;N`Widnl`l%Zs:]\D9gdfEVm.YGJotSK`5Bc_cl2+NYQhk3U$n@MNKTsOfGIQn)X,mfmB/Z84,,1\A6i4^NIOaDuk!S9AUKX
%"7bZ39,C6g\oZLLZ=)!a4ANC?CokM(D&dg>mss7f5DgD+PsF>*G.A\>K&SJd%Obe6YW6hjhE-"RJJmut&E@c4Lu.0h@We9VLnaSY
%K+fnflPIYD`)5YE_Z."!Nb:H57#91/,!3DC5^6K&"1i7"PTdb"FtITKkhIXuKd0(7EQIk[<FS!9a)9K@)b,ss9#9[NPX-:ESGa[.
%mJ'*Gc9rceTYu0\'%jPTLl^X/CHl,u$`eSKNnubi,OF0.Q?_b8=..>D+:sTclp\k/0ak"t.g1%#9hX)BPI#pX+1o_F!+6D.Oq2J9
%[h37Q]ZCFB^gI9H7?ee,&BfWtRm=P`7ieLX[TgDTYb+QcjX0QZN;9FBcDJJ7g'"!TH8.B6s8$]9qO"V++Jqojs!IT^J'jPC)JCV[
%<QD0\?7\>pNO9KO.8CiMWGjm6>lndYB7<NB`)dL/1t^J5a7=?R<sJO[%`UJ".;hNO2I;OJL_YiG[Za!Ps/+J+RuTQYIWOK:K^k@l
%MOBOWiB+q-4I7%6*9#JKCO3n(`@T/UTD7hE=PEo1CA$'4,Z`r50H?!b1eqXC?h=Ja*dX`:rC$<iR!2;;2Fketg!K7]*9NVT\]Q:t
%[8&M_pt4tSE[05Y4'2W26h*=H]ss%=,dJ:\#[k];<\O3Rn.&75!D8j*G?%5BmT=+NTE=+Y-/8l<XpDJZ>Et7P*L&!hO7s<B#BuDO
%`OJ;5;OH,+;.BXHZ+^\D9^LV0-^D@!'`8TpHiq2c^d>($"i:l<*k8AKFU$=CiqSQbFNn5%L[tUdNq#P[*k&gP4:>S9C67o'M;JeZ
%_`[k=R((n!JT-]3/#:!(?DK&8CA?jPW]<8Z_:oR2UUT=#R,?".FY)_"5sYNV\:cFMkp;);DHSt448B!MRH#fFj*(rZFrG=/0]$,@
%(ah&tR@Su#Na+Le@tLhR^UH3S@nh\`?OCG_Vtkk8g)BB^/,Gq4rig$2b!87!9^fd0]F0dWZb$KiM\E7dO!CNB=@'\A!4h2/S!0Uf
%$gn?Xh5F"bX)V/M^#:-M0s2)ebm0T429[,R=BFG95@pGiR)rKlhj?u'MV,%OZGdPX*p"MC&].d^8&Rd7>n3h>ebJ59X0<25+&FPG
%JknI`@I?-%LEl&&lcDS7Kgi*#<Rf6;(kotb+Y(Z[1O(V:N?ENt_MUWm2-"aS2E@p*Q+2U0S$\S?i<,LhK`)Nn9obEF!fZ8&Vr%VC
%R,$hah^aW?3c:2DO,-h>Yd"u[qfjDH,+S$NV2,nl_3kR%=9nshU8$+8`j0<ki&[2F,R+RScBaBF%6".CK3X%1.<*;pR^ICW&&=MQ
%&!K943l`bn)'1.lfJCQV]m@)=LMd2q'/OqcNtZ2#6XhdanZjt]HI;"8>]Vh:#51)JN\@Leq&j/?q_rN2_eUjZeX;&pmW(7@&K_=[
%nXsOL^@D:]BF#'sq.(oi%]k*i,0%\fO*P%*@/,`A2B_1q-It^l@g/2Th\b!W\6NHn8=An.K41HK#.soYKBH\31<]oeB9tSY=AM"_
%Z,a_,Wh,r=.64n/-TK@p*nG'A$rb1n'Ru;D9,]o&6C"oldDSfA!cgETL"/o1s$h]KohinZ\K[4s&qor'CH6:I<8$K'MeS@XN%7tT
%jJU<#i`&Pj&f@#=$d?a`(=9UUMIBWSh@V7=r,BHoLQQN>e7kFaHc3j4lpUB(lD(lk1%m)(LH)JB+)gMeEoD@.>b\>!A,:"$3!Yon
%fG_RT.#E[;5\3O_%Nt/P')!h@NYPG[Y<muJ89&%Ui9[!'1'S#Ooj*"4KhX%;?Xlr/+K:_A+]>au'j)0%?l]<%FI5GndT5H:UYEl1
%n0ul1G8@)`/1)\/:gd8TX7=2RALK5Ca(_HPb/9V;Y]'Tf'ITh%.rfqB+QQjQ\]2ahl@Bl;4Q3%bBu2j[6k(BhN$l[#9TOa(e&c][
%,m")O:f&W<U9:.>&%kTpG]=!+H44F+<6#dmYSCeE$$eIq-A.KpS"Y6IP9->mLtJ29C?D^N\K$d*CJ;gk=M7T84e`V&lL\ZoC(E=_
%5`^93/QVrLGUc"6?o;&?$E5IZ(nlH_.M4?"$EaW\oTT$8B2cl1F>7jRh%WD@arK?</c*>-<T=bOODS[8nj/OkN#@Hm;?>!CieVT9
%'FsbAmJ1ru8+QOnPW<<Ifh4pOIMB>(=sU(c]E6YQ!M?PqCF]lBb^DIk5jlOh@Q%p?4UrnT1/uL#abYpQ;]Gr!EQP)@!EB7R:=J1B
%4Y,K6Z`CW3jbabf`(FWQ^CsmFZ$Z[O=ECDe@9bOc"q$3S'@@*'YGanMNU0)Mp(D709UP;N,/o@Mj2iX!i\F+/mZ#9d<I44kOhliN
%,,UQ3i!'3`J>nNd,ZLio(:r">X1/Bu04TG#F+Qk"3LQ(FkS/a7O;j1"4*Cua<.'\$?plmm/2b>_M;@,+=FB'?`LJe*":Xr/6Xt@H
%C"olK?%[[4cG:2qmkilg9Xo%pMpZjE4T`QkmXVNX$_$FpPj+qsk"`>P)CFKG*IZZr!6:-q0d.C+`h>"800=tK2tF*i#M1M$G9+"i
%1@^0Oa(<_B_M;=Dl0fH"6f/%rLYHB:<TC>!ir%D\EhMsQK&7,O:HqJ*Q1T/!d2:.A7*H+im3sJV5]N5$dKd'q;@BL)o,hbk)`nqB
%=r7?+GNRlfDMSIqnTZSMgaU62L/,R"N+91M%$%B<=FM$;?Rms#XZhK*!Ptslr5'dYC1L/neX@ZL,#3M#p&Y:9JIh7r('('ZKQ.]Z
%>E5*6SI(L;nMER>E"Mk[8[Gd5gtJHh=h)D+[sjoLF"0fH2R:qfS0%kbOgadhk(&7HW5/R^(9eDpGpt%X(c8B$EZ$ROq+)ZS4[ePc
%i7U@b%NV7[i.e=&Y;bIK<=h35:@20[-Yf43&&ai%eG5,.\-g6mfW\3QD[ZHVbO>rh1>2+%2;5?t>9"2*.<-c#?l<e?2Jq8)>-ST\
%d/d\p$[9X*[SMH>"8bWdT$X\X:D6FAl?#Yb^(4[t%Sl'epLk4F&$O!8kS`O93G4<\n@u/inl@m#%*/-)@\Yp48r`ooJWl$jmuJ@L
%,G05?`d0J362<oAB3`&doVA]i_s@uM&Xc,#1:Sk^*,,,GhV9Vf]=8]H!3hM1^c-`p*cSm3Yo0Ik\eMZ5*JC3^_&+68M@H9uQ6E?R
%gc<sE6-P=PhFG;RS]Co$`aVJ]E:RM'6/5&^M+9U[r?-k=I"#X9?*Cta-i`\=[L<`:ag%DUS?^G7cWnWuP`esK7#,#ZE@t%\ft#8B
%lTG-Gi_]06pFuEEM%Rf\9`?/0d!'_RCE;#E&FuR^`l+\=UN%6)4@kJHhi:e\Yr$Inip9gY(GD#Ar(P$7/[qm/"d!^)ln#L(:)BeN
%YWX2T/H.0>6><@cBs#;;M$U"=&8Y=7I;s_;@TGYB*&WEY<W)_0"$f=)XBKulX47Br%QR9Z:_f!j^OG_Z(a:MD4[$p>5L'K&`I5,:
%:rZ[^IZW&l/maRcl*.-#nN+Vm!-pT[,+Z/VqgJUtC/o4F<H6Cja7?BD'_0ZNU4meXXD:MqiU[5_U1Wm7n%T0Ymk`'[:"Y6)L`aP;
%<\j<FDAAEs*U[rYM;>S5`+2*l@0mR,WdIZfFt$/i![mNq#ME`Y#]b]0IhY%DgGg^n1?#"/+DEYU>Q[cVF%JTV:E(*CW"QmK3==Q#
%9q)-!HjA*H;MtfM9F,T]9-hPSVkt1k)\cN^$M;a+b"1IA$2to(gPnhX;`#m#%`FuA"WO,ghe`q.L>@/2fug=c&BG![:$;mUPS(eI
%!_tIj18T,f[lc:o<]kYI;D2@a.A'nnqn#Of.]L9qk!J"M+'qX*gIC\t4E0J/X%Ep/H'R$BZfHbkVj-a]k&j\t7ljXLfDo8,T+F(G
%U':nH*Ss'5L[cL7=b,_<_i9'>*_?rXL#^LYH#bH1!8YS9EfL-@YBCBri(;/,:'uiJ75>j=AJGlNE=[D2ai`#8j$(r"Hp?Vr!o&9"
%LGSAeit.3hB3[QhVlkAtk=>Rs<'@D;iA46[`1c,ArcbY_5cIO(%P-\@P?A_!"7D$p!aVu)QD//^s22qdL_)qfncJ8a_NXdn4.IOF
%^VUs)L[Y'O-!oRN9+G<2AdF=UPY%;N0^Jf(EHZ\H(<e7RIPK^<O)TXN/0[n=4pVI61V!&04&Nf@P(P'ZgoRtfg"N?gY2foTZ8c9`
%pSuH:-7WiK1`WGE&CI)+lUPL+pJ46:_Wl\&M#=]oH:>_]pXe`M23@YX8V!@na>Rs,*sOf-Q>],/FauQp-e:*,=)s&fIQ1YDDKbTM
%0U8Ob0];b2!ZT<NV_6"`bbQ9Yo@ZS0iReGa.;s'eE+.kLl8-auO^UnRM.#uldfl[&i2.2QK7/AVCV32`h+7tC3d[[-lTokTTq+gP
%'G>Yo9WMj7b$L`FiGlYPpFGLfPU<Fbi\<u7\ip<pkmYuHVjAA7!f=o6>UiS/c9)"lim.!!4H"=#i_:)_[#<naF>t6F?4^<FVBdOT
%YQHfSQJ@\&S#>5#VG))0A?e\]A2VMdPa(rfd6l0G&/6ma=YF0=('G;hU'$'G(:s$n6<:M=]_Vr:9,KoU89/#F<q*5?BN<Oq5P!5F
%+B9HU]d2`=8D!_\=Gb5&0V?6!"1M$;>::*Y!^)76k/OR*!bWu6fh2;grh5Glof&>!;>rpfb*&H@=(gdq%g-ea,O@`HYOO&,?\mA!
%:rMCPD'OEcHrd[h;G8SSdY402blKMnIu+-?kis6te#n+UXu5st&W:D6&u:@&FV>0bdYP/XJiF10&pSEm/Drn%qk<V]S2*Pq"A1Ik
%RuPWN\d1j7]GZj2&&l&`M(hrPIB`/C"b^qei$VDZgrg-,UMEOX1"Nl6!H&CBn.!tAnMiDU\0VWNE"6ZHg(2L*]ZBQGh*:o'1p)mF
%n1V\g^8V$\&pO;O0C)$kQY'TXrG)&V@Q1hrC[?EH;_0K"R\4t#J3?5FH-Up=MglHpo)JPfXFbpBs1A;,'fPufs5mAjoPo,8iL6$T
%<AFPVGP/6YWY&^2iCP]5;XG0o0)Dr*..K>dRu]YBC(7*M&?u?:(&fmFWff6<Voe7<[&].:%+$`bm%_HISE\goNX]o.QM?[`<Ci3.
%VjS(&(JjY<73BN[J]J,6Q//$5$%nC%,'gn(.E9H1)QYXlEt^FRMT#,,+d*(8`&b6sPt%S:M^MdR7#JN[FcLDRLReR^k\5p/#V=>V
%_l)'5$!k15f(YYYA,*rG#md/c,iOe2;ZZ3)S]S+T-590aa(*nk`XH`X=k=7*@;PDkMmY[6iYdcGf*emQ=EjO-Q0HcmJ^^]q*7oZ,
%[,C9.jHjFrb.f$=i<WK/eIA]U5[=fH1jBj+LQ,oGJXf(JiP=YIbNmH@buL$<C*7\/JHO$Zm!rj_'.dB$MOf%<XL:i`5aQ>>6c;X5
%(W(LWT@IP'!?bIQ't.tIdh'heC\-P;UM,N9r8=U*!8VkO*d<eBgTW*:E;fcdXb1u'$ZK4<RM[^]-.YI+p)t\g/)KSA8[RpH',3<Z
%)bB%4k[Z1(Q)ED.gq`$g'OX"<J5>dX'I]&H87-U^asb(YB3.+(M0qY->sl,qLj"A@<?_k?&Z/b*-<='!LPl*YaFOQ5X3tGO*o_F4
%R^C'2m9)7G/Sc+JG=Va.OYf-K/b,$6p,Def0GbN0OREi/5uAil5bSMR@77+7&3au-dF0h.#r:KQ._QmC&r<P4/\p?%c$BIdW$L$U
%3m*g?HAf\?EC^s9.n](DV%nqqVcgRRMi_?3U'`D6&BAMO7#84EWIZ(6o6XHXXPC)eWI=G-&I>G7RA(7;MfpQ]ou]gf*&\L7ACL96
%9bWLH"GuH;g.$IG3:$2noi!oXjsG9CH9lJg',`\*"9kToDX5XoiFC,LGAh<Z[1lFrfH0RY3o-^%Vhemb>l]D?/p*p&&WkKDKc3qJ
%R(ir9J^"CP2N7(Eqi8dN,Wj+rRuIb!5E'_[J-[rT.o?HEJ;QD"l(hR@1s6U5cl[o6GV14f-aRdS0JS\&2nN<s5XPVj>d17c6=YA3
%'/<)H#us8$[l=2cR'.e`8(e`Y$YUBP\T\Nr*s3(u_^%L+IB>ts.$9nI$rZ(tdQGmkWoJ.\Q\YVSQL82X.Q)$AEeqtuR5Ge*-<;[T
%Xr6?j.o+6W<R?l<#7Q@S`CKDWRX)@^.er,@]i&(0,5gquU*t#@HgF;o/-p_\Ea^E8Z2\]op6[AQ-!)'()gqGQ@YC:Lm*CQiACuQ^
%C=!5X+O4]lX@b!P%mdX,-EZn'-iU6@F'Qr'EgD6-hOWpLcu\><Da+QPX,4b;QD]d7QVWTV4U;[UHAd%\T2>tg8>TRSUL%HkHt06V
%j*9])<?5Kp"&=+K>0`jZi4J?H^Vh91s%H;Iat5[X\W+gF0I=k^Ya])HX(EpbH9FEq31Gb.<@2%E,7E*Cm1l!rh&44)_M$]pZ:/Er
%)``Gr8`%<^fd4lQFa,MK&QNsFq,n\cMV1RJOeD&&/K[VLU,#Q:C+s<^&M0q3&7X1l8`Y[u6=l]d]Ua$jdE?qM]g`F,/?@FJRIpV4
%4`tBk=CY(FB04Y7_@991Gi6>/.T==,*L>RI(Is_Z`OTU)*Jq]9PAKJ7kYU^PiN\p#FCP;$Ng:P+1(:;-m3.C9Z%0d_SB4B?lnO[7
%,X9T'FiXP:Ui%mkE$#p,)7jpf^p8pLC\B6R54^uGJ5!n[3prYpK\o283:c-Name!gWF0t&m+7Q=fh<)-`ZZ6pkNrEq-:]nQ`E%?u
%jboO"ii]H\VF@U$5=X]lKG0IpLlHdZ6$6cg-BF6QVV&hb=KYW!ag7Xbk;3;TV`KQ,ZV8M0oHL8KF]SYXf0Z>d@_\JrXra!Z&H(<3
%<E.n7/=(g$@+p('9B$aTd#Abn'WG!TAU@=l=HMZ9!(cAI6?POQ=>&C/0'as^c/Qf&&@4JIR_reT?*#ajZaUu<8Ko#hImU$4]j]7q
%R((S`S'/#V1HVUgVH!WNh)-]Zba#+m8+M97r-!CYMC\hb^P`1lOT&k2<`0!q$:oe%<oJp$g`DnK[eqjRLBmt_!&\%e$3hgi$]`DN
%DjNh-T(mD]jrGh7#>nfcs/^ImE?aYY]2:_'pS]<oDGX<t9[.^0Z*65TL$k,uS_Itbg(ia$#?O_UOoPZ)G0&sK!;C:]Bf>G\h-KOf
%Wl3#!TVLLdiIt]P/"*.j?2**lmu'7L.dRr(q^C<`U,4au704r<"&14Z2:ga'kZqG&'CTFo7,1oFIQ40$!E[(#1ecp!b[*kL`Y8q<
%*bVO1L_ZZ[<;*AD(Ts(Z/E#,Y>R]/R$b<gH>YW1lNC$t`DNFO\eH(YnWiYO_;i#IKcZS=gL5N='M6aq%Ge+LPHr*h6lK]t5+;gan
%e:$"Mq@OS5UalsShT_TSTur:lf*#n^!C.BUiWX4nR8g4HW\`ImQ0T?4r;TeM7J]XAH02WX^^ZSq'B#k+Y[/>n,9T@g4rKC-8A_[$
%(Zk-P7f";[DjXVQJ;L2B=!lC3$8DGl0V8'^9rVW.5V,TK9]=;5(\UeP*tCMaIYn6G!uJWD3/e6cqjCA=G4M2tZ++us)kL%(L(Of(
%;(o>06<PK9+j!AFH%;hQH+$)E6;MLii2CJmJn+V^i8O`Li;qumRBOh3l\QbcC^i\2#6:V[/9<>-+?8>Qa,4aJ>3kEa6eRlu'aZ5[
%/N!*MTJBeL,J*F(@%7)@T^Z=K2=(,V`umXpP[g_-N/bjg_XSn&?aB5CmP9QeI^*8!WPW=PG>36bjJJrOdK=N"P&T,AB%V)_\c^"3
%mEl1Ziu$MWDW6;^KAd:X_Lm*[SO#eP>A*K"_?eUm3NLa8$T4,an>T,$a/V%`<6QB,Z['%^S<Q'BbW!+b>^MlRPr@hAW1!$"IWD5^
%SCges2`2JW6'Z9K$B2H;%1bF&NH1-BU^;Ybbrt:U64J[_].O)i7ko4MVdk][.PF"'5f'iil2_3^S5IDEr^$K_O?SN%/b<03LFfB>
%fZ1;Kok<p35&.a)7'*A\7.r;aU#f9Rn1&H<8A<,Ger#l?].$$r13M,);`6P<e4h+D\uY1#E4V/tWV*db^K7G5;(pVCdB@%<`B#3Q
%A3B\?8UtX,cQ'W&>p-\Z9sgF*8<:/[neZjhp?>(cWi;!p8/\pB,#75?HYua85jmb+&WS-VAP1'/+%_,4^UTte;pN+`HSDT5;0!ml
%o)A#%\^-`=+>[Oe;gJn+Os[q&=9!OC(ct=Zc5pbgnksNZA`"3#jnQf+pU[X_6:"5U,aj(ubOM>D:/-qB`I0tK5T%M?._Nmlf8J_]
%&;j>f]3i+!6n1*f7>_<<)_]^"b-JoX4jRmFNfs)@HKE:I!A_X@_c4sf:R;EM309[k8GD6u1n>7CMb*Db?^+e"k,;e>o193/WQmKQ
%s4sbrcrAF_o`Uu3\H#'>ARabWcCIY#4sINTT*57<Bb_>:#oNfujTf%JG8Fe+s%F.k<=E0!Qe3l:L/UlW$@ZpUb1I/R-S/^_/;hm0
%^)>tS$7F'm[5#T:[n-V,''$f7#5.,-!RR9)nuUq,48B8.A#;X``D"=`E#HTY>sQUe0'LgmgO_NgI\##6bZn63P38&F67P+5@N'DB
%WB@1^k"d;>[H`jBc=TCZb*g,^,f9W?9HjWTa=`FWi6h_IEBG]P#_l[,G&o`Jd>(,MK/ckDP:nShnuA,!kIieYQ,V@=@>?HjHNA/W
%k)(D%V(+A1I`$Le)1gdRkf.79;E.5$4fO:r)tIqS^5/3gZ'uQD[]98$a8o+/PhB?b'1XJh(<7Yh%'3Q\h+U&JT-E9dd(R_m<G;hI
%@.)9u,2m&P$@`O@q#[\-==W@*4TkU%-=ddE_eq?>>=FeH8E(hlD!u=3N7cd^&/*"cb?&KlFsDcu15k<'Y*I@mj0rb]G(4B._A[4/
%5VA`tab!0a(4/T/iZp"hY:>c3<p:cMP3As(OA/-sL'L^uQrg-fel;u'OnIsRK*!Ya<,"C48d[#r_V&L<'EQ4iPa!V98&-7HTrT`K
%E9p9#*k;*#jFGHP?Ep@1H(qDBcT#Ci[nER?ar;9#5\!8?*>5l;Q3;<Fg5cWj`W!JEFfHt3$^MMe68;,bHXqMmR,/)K_0poi:F`qP
%@*gRXe?HU&=/'D-5F>]WiPUpr@-tCI>MtK;]\&t5e^c^a=kla&BFb^.i/JJ=i%`<h<(ml[LR2kkQLZ(+p@(UJFB.ju.:Ue>UdRs$
%l/&J@`g^'2(7Zi=5%`<O;]<P6UiFr/R>?i\$M2*oGjD6G!Q0p#6HHcu.1Rk^VK6:-3*r&u:Rq'p4OA[eP.5BW#"$1,q8+laM_Ie.
%P.\C0+nXH=Esjm,KU!7$G(9jM\4L1FR"2nuco?)dV@9==Ih;]m3BDO/9+IbD%/agS7E+\adUW>#UeG-\S"m#rD8OR^_4s^BKQY]u
%9u>:[0@jRV@Kg5PlK[pm&b`G3"k]RYZiAWtiNfUO,0+eG$3ec'/g<5/L7*f.N2jjQ$=<II*X,i77QRdoU@S`bL.<mU7BGmZC@hP6
%GEgm+$;OBjbRf"/Z-Ol7h";T'gP)ss,mQmCI8&Ijq*h+AE+-Z;bbmSB,3f)IGDpku)/sn<=C6]!cchQ>bZV_VM6P;dbki)ur8"?0
%8#]#fno)Fb5BO6d(2$K604t(:QAUX99GAJU[Zq%i,&,\@A*Xg^=?_De<&_'^ce2T<5X$f,[CG&`=>_G:0uuN_rl%U.>`SUC36f<?
%fceKYLU\u9iO)p&^Ru69PH>?]8,F;]`V,hl-j/$+[(GRm"9f8:QMERQMJ&57O9lioaQX1kO_T>G9j76>4TUPm@jV@@>o6;=#k9"e
%[5a;Z!@G1:CTBjACH'l=0W[$p@e<hd3Sa!7PON[$'FcQX`24@$:@#T;OS5Z")jckhgb1\?NC.4C*!RPf+.[7TMi2T];QWC,@9SEG
%FIA6#0u`;89[<fEG#c==LcZ/@Y\&lr$(6n(CKMb^LR0p-M6LJhQ)*!da]d>5L"#[4W+uI5anh.-3,CJa_?(;:Jetg[]''im2(SHi
%<t3J11KH,pDGdS;*Mc"n-cnT5Z#88!!R]S*=]Fu>q7<4.ARXg`UQ=Dn"-7\mM?Nsc?rr&J\ur&C.$\C;PVVfCd-8C:dY+t%(hm-m
%=68WAFK9RTMjB1i&SP.D3a:.BVIO\?iV7)X+EH#$RA)amNtDl5'/HsBM-dc_c>\<C[PJTL0J-$oF)gfVNUSdF]M$@=*k:[XXZj3E
%e@HB:`O0Pl,0R0"Z\h5loN.qH)Xl>c1JgY)OTY8HIij@A1neH*ai$[q]XF>t?`m7S:HA4,`q>1MNf-X5,gh;fZObBMFM?F.%/%p,
%J-Ik)T%%Vbf0"e'4l;Hu>pDFiB4=upV51b8%NnpQmkFgc6r#Tt>&J<h2bpUs8W@d;R2W$`W.u6#h9%/7Qg"FG6_%;0NeAp[aFfAH
%4?6qP]D2UE3Z+_[\?<?UPCblkjI.HQHZj#)er+99:>XA#E3g%,pIo[o!U3aXG='kLU0:\)Q##`L:E^;QbJ1"pQd)rQ=Xek(g()_t
%bG&j]PPn+*1%.EP*[O08M(VCbbSfCtY1'IS9#?H6]?9#gKut@$QIJBU7YQ"+1DZQYEea@+(LUa4Pgju^;G'gR@h::*X,+?MIS%2S
%Q3s!I,%d<08;OsM15mo/*8BBZJNe?!'e?ip9#6a<PC&cVlVuGs\@UcL/HSOM6VMfhH[-GU^*)pPQK3#Ch]qs+Lo*_2(/VIUo5Zh.
%30)lpnd<C1_.LEIaBcI&V:F6a7Rk)T_$eHMETBVl;.0@QoMP=jcu0MKRnu27cta)\UnOe+[ZEIME_Z'hWX3Ao"/I@:&]J.#0sks8
%9\LpFL?MH4*h10r%dYiXn>.\Y5#X[WZ*/hjQsNHaU?G<0'e#;>M\UR<@CDH<pO4Ql()8ifYbb_uoK<QPV>SIaLP=BR!%UEJ+!"jp
%eAbR%2)ABID8F'VjgoaOJ?'WSo&@6*d$!u]r=AG..Xb8,LR9Mb0\Wkf@cqRUl&V!_fZEkLOBp36*+p3M:\&PR?^\oqRcrhc"\!Ek
%V'pnVRb30:K2O?8[WCoh`F29IJH)-7:RbjReP_O0PV,r@T&aZj6s.fg>;)^#.cPLI^'*3!BT5j4>U+a2gtMKkX4$lI\7R[n(oj-;
%c?^'?6Ak'q7:9(l<RT+.:OuJYi"]jg-m!+c1q'`.iVJbIegU/36.77V.O"bM=ij!EQ%rJA&[7.>Td]P*KcG!L3L)pM*ir#Ss'c\C
%Ra&AZ/>dYY$EdU58rHYjR$LE+IpN9RUl3t)3SN`DPi@0X9(DB6Rm1$3m]NpG8(1^@dFQKg8X^Fq(=='BMWP)=&l^3!"'gH?g;B>S
%HH;Lib>0ia?>AVsc8aAP&i5k`oW"7W\@'Ngam5_09.2s"bTd<=Dc5:HS2B.j:4#N6q^#boK?.W7=8/P$Y/.0_q]THU:eWnH\r$eH
%)=n^6XsD5kKN'ZB4%K[s/8n&ko.[$)boE?jR&d[L:<lML>TrquX_WA7QkrY6P&g%4>/7dQrVJ3j\FdrjMEO-<09=MPABgHa\N!?I
%d<[7.(G^c@e5(eA?(678Z/<.S@XbcW;q5nbq`S96jJc:"c1S+Ij&R_O<ZUcm@W&mM'7/$lT;\#rBM0W$B?$cJ%\>f:/Ra)WQ/`>[
%&^K@b.E?SpCOW9]:4g5l:$G$?S?2ZKa*!M;Tq&K=YPTbENaHj"FlOcC:0(i"E:#5P:9\.`pn^]6!l]s^IOgVSdT3?>k`S<N]0tdf
%WoQ^E[<#Te;/28h+ab]1E@[3m#*(d_Fh%+c+oBg>s*:T+99q+ZH#>)%]pMXsQ<T/m:K:ad<64=/1Cbd`D@LV)ru>[o0Ad,t')UP+
%jbfr73&H'IaLD"*o&!GpQs4oblgFB&^Qcd82k&jc0B$n#k*1&ZBZc?R]nFnW^I?0l\YDg696#?[r3WY_hRNLZ[Bf5g;B$upcpg'=
%Qe&[8r3c?Wd^ZfXi^2Eej&BTirq7Wo^-L+Yq*\b@JNOq:"lBsQ99gC8GR06]Bn!#qnrae:*h$`EW*<Msil<e&\%JQVQUIVB>@DML
%h.p>3j-Qi,TN"_7e6>llDAfse"4p1DS=DJ?#*3)BiqP`dhGjY,-OtcR"&ZbM`2CPaNq4D?Y$=gJAhPHMHkWhD0,a;rO/Z("/L!qX
%-`nKprKi0skfp3>Q#6VB^mf]?;@f[!n5T)TXW?8V6I,F(%S(6:p8k.(Fi/4lQPbXiC,dD16c.'VAiQ%/[I42I'uQ=4;[dp8Kk!%h
%CuJ#=*4fl\E;Yk+#;Q:oHjPL"-@@sV_Ptej86_EM\.umT6Qt7]i8^LADKYHu&A6N//Ijrcg>FCh^)k_\W=5r5^6HH4(jnN#_,D.t
%4G:PIqNmWOQR[6;K("IC\2D+W6PA13i-m%,7IUuo[iG)n#bHA#<l;ZE^f(_j4QO:V%=CCi^b#bnB7"?DV\HZ&)f@+o<!$D;-1DTM
%mggT2e,ab:^o[^11>qaI".h"#j.QOG,2e;h?6\=Y!;Fan'&ZdjpSn'g!)EW7$V]=Wi2QbD=hF@A;uV,,jM.hr4W`V?f)@SUrmLeS
%oQTYaQh5JOIufBUpZI7F;tp0:k^KGrGCR\_>P22JhFmK&28:^VEbg-%jL50W>Ojij^Rp\H<rBrWhMU3_(]7%An+"d%rf#WVWdX2%
%^XTtrm!Cn6^9.&K-e_5Zqt!_C<r+_9s&/\gU$m.4I9Yl]e<eJTk@MA+jh!]U^/O+)4]K-ojBI]8')>:^n+"d":5SH1d.k&f[jAV(
%L$o`N*Y3hjeG!8[IIEEp[^aX8n"&b#ZJmN[mhGNa%rq'fp7<pSn!*NhH,6WMS^QBT+mkiChYX/9D.2m+Qg#:Z:0m>^eFig2XEU[j
%gQ^TqhBlM#p([0p:%/&1oM/!HX=C_+]rgK]0-.)dd5qNFSb.=:H<\]WA\2k@Dl\/e9==Xpo1h%/9=4R/o.JXtq"R>%4/KUU;p%1e
%][p*(gHsaGE,l>3ViLM!l?K4cpO(,.Vi#[F^Maj*CNtoL)VtPf*Wk2an'7-hP4,9@%[c=Rh2Pf5J*M4Ol*?,KStb%]1.]+8MVSPZ
%W!q[OlP>KG9S1;:em3sV;)<5cFVdKMP.eS_]"M3<dMsm-DO/gUf-_cu1;6X:^EpIZYtZh-9;#LX.kR[eQKMi^QUH+;EGi7)/MC[Q
%r/(f5m%qm2bq&P=/l?NW4Kbcq-+PJ">#]=P"M(RkVm8;CP2i]g/[P$,'&s2D9_Eq&&iXd2/pYWZ9D&nr_C`W!*_f2V=&0-?no[ln
%q^oV>d;T7MGfak+qX"tnHDthH@F247db@-3;YqoUXj_C&_X?"2<WdH>2f@/_4Sa,uo&8$PhNkaX`8i5T%4>DlLG-L2P?^:>JsY7N
%1jiIfUpl\"gQIf=-9\`E`Ia`hdS"9n)(a'iAZjo:[*?a69;n3&[`hT[qHbr3"m4[a?9#F<[ObB0Q7dH^ChpPs@sNoICM\e/H>@>4
%Ct>D:?P;*^D7-$JIs`_^CKPus?38k""#bVMCMW.Tp3eT>D>dEWH21@i/s$bT3UrHIFt(jp:.aSP?+WWO!b^PiY$E:j";TuDXt?`%
%NJiU>BkrVB+skU&[!#]:83D:'Qa4&[QL!;7Y-nh6%Z0^%X3I)K=MC-#p/W6-Hm5Q'<7*)PX@lBZ<$,)+LR^9^qZVWKbu7<*;5@hH
%;VDPM?oTe_D<-'O2t5'j7XM,inpG+a'+%HJ<\FbrW,k]X^Z;_0=3=.lin<\07crYUSP>@+Or]&<AoAuL@Aht^fjG*k["=WV2It/"
%J9WMTDlG+ej8`P5fi2^H1KWS<QG$RdERBS@/"=pLG*Z999%b/hH/6RK^3$Xu/I>>2.bP_FFknl_Bk0#'LFP&3Kl$^N..4Q.[Rs.J
%g%eOdejCJLU'ISS[Tl.VOC-/_%)p%E*kKu4e[*eQ^RrtRQ^Zg@-MA3c-:.T'&R0Wdk[,u+CkduBra0Em]Ui/0U]&WX-Io]kZMRP:
%hHK[N+bQ>A:"l@8"e-fW;V(Nh^fIpBI(kpKG5M]fK>ZhUs&s1f)&4gtCJ'Rg8MB>oD*YfuKWd>n`SjbZ-%!m/Y,Gr\I#;72In%Zi
%Y$:H84R$,:i\dXl[3V_LT&HMi%F?qL1@h8bN?g02>=i,/ei!,$.iUL_Pcg9IQQ"^,F,cGun2YBKlU<jKj>h?U>Z4Q%IJb7-%BP4.
%dnAMC'qsI*BhiM\!j=X9D>-r:L's7R2D83Kl!#/',&U7n:=g^pID-u/Vj]p>XK/r9Xef)gkk^IK#.'c>d_3T#VjJiu!oPA94]O6l
%nol]0lUaSV_WR8Ep#O6!#;6\TWD]Y^Klp$jPGG8Ce@l'eeP5,':]5#Rhcdn$0D0'60<nMag=>!-3R7V#XsTXO1W/h4XbITZ)<=/m
%Raan+r_p.,$&q>C?]*B6fd/cC>H\s3r?);mkuAPYg%jH.Xh%mgZhNF\<K0ig`;WZ7(,$=J`_36+`!pNS"M[@),p:#QH7;gO59]Uk
%,u6+tri?==[Ae/BG_287[8j3X;jH(2e.21YRa`cX]q1D:<hs%t60csp:7h'Z7r:9Op/Ie^1$\9CUJ<CUce_<Q3i/dq;i3W$W97*9
%3eaN98EWmF:*Jom&>HTC2%6XS%X#ojcf@#l1=W9i4eF4R.7-1h,1P2:p5?L.W)J7.\]2)[FUCt.n1?nrqU;D_IHs\,r:D9kIE>8h
%I<o54k=^4a`M`=V\+k&[:Ud7qF@o?<2q$/USk_#)Qh%M;Vp@<=dpgnej#qL^/N]M1J&tGiFZMnTQg1qHVu=CAd:mAkO#NNVP+6E.
%'W7dQQ@5_RK%&;?mVh`p/N5iLaA#lU3lRS,[:t?&<pbBo9n/5TFA&aHVqAA`VF@)*Bh_683kH"fUo(7NID/RIQI'_,DhP!i1YlpK
%-?Z1;1Hh<be&_R/Jbi?6[`Gh<UmK001oAUq7UoU7e+J^?1dHfm_*&O1iR@KZ!n5R+)/o/D5:\B=Fm8lp?!9KgI3U?rD.slkVmc53
%iqu_Y>0>:lNO6'WV)?^tBk_[qlj>k?V'R[0"mLfHo]L@n,qEi7Q'\TEZo[Rn=_ZATl5O#Ca\!N8IE>)S<P#k@Q'SB@H6XoA+r94O
%%o$b/[AN[_,c.UkS]'Vo;;-WMmK7_B8kVt65/KZ_>&r&rM]Zuf<g0[^3U+kj8R"m"5LlPo,:4uoBkp$t[%o9"4WdSMcGVr$UoblD
%?[_-/>=R>^rC]U`e_0)X4]J4/,!DMAdaF5[:C1_a8D@Eq-qIQ-H9DG-5GK<;q<1WIUHtfu;`sn4g<l4HFopnS*GsnOX#ReWUH^CO
%D;Am=qj22Bb!rRiCil[Hn!@dr7AG:f^I4hq1O;/?UFdA>+,\Gp)"!d3>;/,2U;oVS3p!+56S@)-dEZ+4e=okm\ieK:;_7cmLde4B
%FCKoi<cgr&gI0psdA[gc+&^Lc'O;eQd2%U7XRd3b:7^V=dYU_ekk<G][S4'M`Ks8?W^O=O8p#qYO,$8JC.-C+(m>lc.1tAX'%*Zi
%I6JC?;]sdCr0KaW"esaM+56;4]!#<Z3n9pp3.@hoV`=<rMF1Se\ilm`,n-@2WM_F,'_\FSZm;?i(/.G9%-Ocp^,cFk+Z0$&QPq^+
%B(H<X/SHnt$68itXTYb@pF3)V9*^oGjOtri#W+usB3e(N^EfJQ^fLc"0*,a4$6;1?DY[p#g9e\CBg8XQcoI8EI47BR^/4daDr#'J
%XcW@m<M,b7b:XEPC-J]$:?i.pic>da_)AjsT%g*aV=.`*cV5,ncj=Tlk=.^hqU\C)\Ok<p)$[)3$uk"#k'F!hGNXS/6fbdV34`&/
%r0DRs&2;km?NSPQFP&k7o$05:4.Edp`1=.WZR!TP;KhK.2dl;c]$>^P!Os2Nc=2DZ4$g?Q1F@(:KDe\i-L@9PBm@f]j4W"hOsGI4
%3NIaGAL$tSar*S(No\dH6I)=ZO!H[A1<r7O\th,f)U:Utp6'=tB?o\CI<b':lZgbT+YWNN+bVnE7PF.@1n/G7?c('pjZKA%s,q6=
%+#kq8l^)9@rL.m_(UNOmCaS*/&it:E2?P'9Mk8dGbuD.rKpGfR`1!Sl+Hr2bP%n<$#.S>h[nnk/`kGcp9;WRHA<'kBq%@BG9pMqd
%1(R<X=\rr#T*dE=eL:A3NP=JA&N['Rn*_$)?38I<`BHt4k%2,9%UR#r[(JWC`N$O]R6cI%7JH:'b)FLM46WBZ%'<.-&MH.VnZNS*
%H`/Z;j8J)=`N1,H.TLsI0qTtS(r#e^:E=&05u1L/]O[C0(-:ZXqN,,<Ou#(Y:K<cF0#?#'#dX_rSil;f?kt9`6p:44migkCr0]5:
%a1gkHr!l[%0>i3`pOC55rI5Cl^&+H%K!QKX,tVVsjYu9Xh^Pr2J3SYnq`sMEi4I+:*7J'`s7h#+OM?jH1LdeJ"b46b@6<gJ98GhF
%g5`[lkXlS<^,b$+FfJ:lQW&<dH;]ISAao&AY4N5K97=_e+#1Ze$%CD3?uRNN(nW3U$Uo"jd$I"?R!&4hDtL$JMH1QG]5Yql$OLc;
%p/7eXP2NREriJm(0mF`Ug$Vn<5,I_Sl;O&G4B0i#7[BLRY?/c*>EkRM8sQXI/P-D-/uGQ.W6sZh<lpR$&u3HccK&QMUo:+U,`_CH
%7#g$i.[e"^W0^J0brC!*:_RE4=..Mh6+rps*@2Gp0*,gP2Nk[tM,0'-P^SErdaRano7XVrVcARuUtYjN3_cPXbIg;CF*];@X`btV
%i\Uu=lI*V8S"=SI\he]"f^om=l7i2`2%@$r+)<ulVU^%rK]#ar`W[u_pO6gMO0pM\p6(etNA.3%HRVW]P;<%%h"oG%^ru;NQb)gN
%-F<#Q/M4(U_)smnQ52HjB(API=_T03GL$4?.P4'n$P6X-dLDatBu.=oP\q7Po#':(dZ)\M;8tss\tQJ_g!*/^\k3Og!Wt)%Bs_?1
%-.^YD,E7Y7\g?,UdZmllEaEViBu2;h;(3V>EV*RTp#o/V4W?B;da8\fXq0?%X%&]leS&_f>GC92N;d,)BIcOs>BFXMIpOlk'r0*1
%@^H<6A(k:AdA[rL@d[GRg2bTYfYOC"D6[c`5'_uRVcNG9BLQ,TRS*'R.QWih\+'kU747P`RaOhWRb=#O#qK97\)J]kpu1Aseqk.E
%%:DLKoob/4J3'5lO@Zb*A1HL_rVff37%7RHTS5d51Mn,.*%oXpD1uXH'Y&lHV_<I3Kro*).jaCoC!?>"mDX^@3:moUO%<jDY9FH.
%P`4!]8V/]G')E1C!)"5T:[fYTCTdjF=8#!NWh^@WhPCWTb!r?B[D)I(_U(VoPV<tuA0hYdReJ:'0p`VH(Ku7@-#UpZOY!kMq&!#,
%e09\'2b--&.Gqp=&g\)A'0H?d3%9Q/%sq\g%U*FgOKE/1HUnTL)NJVsa^V2V5X$G\qoiZ((*Ctd'C/9F9A#-<0JLC2cjC7#U5+kQ
%TU-`cl!PaT8AE5b9!+P'67U>sqomCf'IFE*lM:+OF?;1d4gO!AF,/n6`$!TZRhp)h@mM]>#l'ST52%Rgh:*`O6I3i1"t/r,'Fpm4
%?9@TjTTE`m_;7p]^F!McpNB8iI]6_BFZN(oSDs*a/N87kb'%D4A!QV8imMo]pSS/kWh?-:.jFppVd>P)RS+tdXBfA<Vgr>N:?>G"
%MCM57GPTffonYU$mE/ioWDYJi`t\cmiaTmsZ+O:@32#4&'E]#nl'?TgGWnQ.Mu6O[/JVS;BiV0m^mWE/#[NIk]pT-P,Z^ejg9Mh<
%#$%nT+i-9Qp_P`/NmuruX3UH=,N8-45qpWYng173<5Og&Trq(X;]foF,,uqeQDQ!65D(.3l9t(PnK<DrRrO!n/uf&<(^U(`C.c=]
%:FSd9LJ>:I9BENL^k%0.8<.<)%7gJr(Q>MthiKXi!0@QCRi%#MV&p+c3Ju]b;-6Hu_Vlob1W4N8=seC6U^Ikbn\i#EhPDZ@I:D8O
%D3+n;!f;i[<M?%eSge*Rh`-2*hNNPo!mCNBP@cNhaQQ5M\jG[kac2O'#icT-&$2Le)iD)fNAPUB;Mnb)KMI_,9S_n,)Kkn<K'=;,
%p+t]h&sFhfN_kEaRW-\j&tH$IT6Omd+XM$5</"+n$`S&,O#Sl)lY-dlgmPK<#@g*H6b>VK1ESKse5co13%LmpcHt#W%&p'a'%7+q
%%cgPRG4V+\656^!Kf#d57O.sT[EpcsEHK?3!u4eD2+`DUF'mi?9@T#M7H731&f$sf\0rI=;c9iiNDqRQP?)]a;$FBh=-V]l8j]'M
%7HN_#&*@Mbdm@Q=ZcOABM;(;pq>Ja$g/bkd#q(NA\,h)oOuQMD!gd2S<pPj%"&[4/![o8;5ZZ]u1SKF6*S.?Unt!b(-_XTF+7&Kj
%`4"Ga3EMA-;Y;GsPf"20*1#0GfWFKP;61[dVWrR+[YBs0Kr#lgiOrlE1f%tuBr9lUW%;65UC'mBeNfskA;-Ms#@fXC=u3E^@GW33
%T%#>_RNbOS(j;HMKno"2@lOW-(#D$mb,?+LPIcn-1LCU=84(.)4!0VL/Wp6;1"Nd)*%<clSffesT%!l*ZH5rs\l&/&*0$gV,S<W+
%Q'IMi`iS'kLmH$<C4eu_R=a4^<"rqZ.PqkN_4<+?hURn8f-0juYC)^6fT`LRWX[mg8a?UP[J,W8GB#&G!NM@J;?ISD\d`o9Ve3,(
%&jDnDAL7j'*Bp2#lg(Sg2c0>@QI$0un=ka7kaED7]gr-sb%2hD9i?u/`;R&7i%L%.Rjt107<DCF654)F:+3,<-5J/!)D[\i(obpi
%'?-60$geq@3DLcLQ_#nOI@82D-7pi!kL1>g1lENNXTfL;#Xo\,4<PgeW'j8'5r@EG\&R%:.$AIdR(*VI!%_9.7>-SeI[g#SFh`2O
%!&H+SoioPr2Tkj:G(C^T6qQ"=,*9([eO&D$.P3Vp&gao;d,Y:b]-moO-RfBs.'D6d64H!W97^+e30U?/>QNC`Bnl#h%[?@s`h[!m
%aZ-8&X4oD4iStAIZsUDCP[6\2*44Kp6D-\F<S[:3P#9k5?BWON86pKD1`*\>SBd9AJJHX+eDu+mpk5QOa<De)=g'UHPeUnOngLQO
%L-`C_9+<C&gsWBMQg4^n<']A1<"$20TH0(E-7a1p:PjlLjEI:!&X84GW-1@ijEq,^i&)_ijmNQ83RMUEQ3a808ir2m4Q.)UEoDWh
%f0r2lD!k5EW$kQ:bTNSoTJK>MLl`ka;FmBIGX4ZA8UWAeA$I.(D@bHiV&<U=>qF0/.fu.9@P5fj6_Y]\-dr14M;rNa0UK,\;FVkD
%.)a#I9-N+DJeBBF<ijMPB:;+.&:n#Z@Wm#K*?q<Uh`s>(#e(esQ*_R:+](NLj[&8s??:fE<i\(6a??d(8-9,(RaRG6Zt?;u+>Z3;
%NoaOa&TYjg_BWQ]po05f4HHS23(;(BW\cm#OC8u<'g!CjCob(".\II<;e!Z<a@+W'T!nY%BE,o*PH$=25L^D`WmW5:'Eg)&gtK'4
%F2>biDN^&XQ:I03JY4-q_S3!kmt'7q0,Krp7`5**V*))?$DH-!4k)qO&of1J7Hg_&h^b3h$F?;1GS*5V?X5UH>%\XUEfbSr7#bE*
%SC5?NbO%>6k[JY=6s3:hD8*l@,?'*%]Nabde7*qg+Dr`ndfOoeWH&Jhj^o"TpH8K>a;PilST$_:fS.j=<*'*Ta<A4G=b0;c]ZQqD
%M?qL87<W-F^1ao8WS3o?pBMf8/?Wl#f0aF8<IuLH-DVb0+3WXJK0uZIV/m$-\-s?Y1/k>0;AlhT7i5`fMCPG)`C#:Li6m%-od3*f
%76u;8-.;tY`;?E@7sL#!>qDoUa)Oe%L_NRL<7U&]%k:>CO[WY;%#p.elBu4.id"eZ84oJE!rFZNOp<;r4p4WSmlDVe!tdkm=#tlf
%QlJ8(gtHlMKAp+M(m,'aIbGTGdrQAsD,Y)t=BJ1WBis(tDV)DR"j+['+,d0"g7,da$?:1PfeS7T\49OE,5l3]AuDG23Q6mq!.N:,
%"b,?H:/.(\K]ONP3ioli>>ac0/N-Sf$IlL-DFs!@\o)pU%/VMC?<akiUK,]/j)pj_6O!8/qF;1(78:=T+'+JP8q^KUGdL@HLeg]S
%&MV`:AcjA*?@.r<1,\!CL/N7R2V*$!b*T$/`ObgP0.LIEoNde@`'lMt\W\40Ljc;9q+KPoN?-9s>6Z<](S0]fMEkdBjH`1l2"p:X
%-A:D-RQnI\[Sked8J"OZ.Z/#@=-[CSfj#ZlQ"=7EBp%S]_tfP,J9E.%bER:qD:>(TY]nlcY/>[^buB.I+N^<h!(3aTP(KhdiJ0_R
%Rd4)'F$6X'XB%]TS?"`u!BQ`ZfHfW@`Ebit\\@-0:NO5qLq?R0oh69k36s&9RR>?L1.f%Q7u=#$H<,&<H*L'MJ<X<pf+>p81V:P)
%TZc;`4"4^&NpC`%W@GHUAR*2Ni)s.\.)d3B,_`a+Ua$K'UUnJid;*L,%OhW)&tQ8Xl,lP_rpo],OtDuQX/but7Hc^+q%L4SKg94A
%7Ja,l,3a'M%u8i$Dmc/tQ.kkcQ?oSW4*eXdPXrHp\R.L.CT>N8[3W*d\LU^Wh'ssNg9%9c!bb+;=&c5YQZB.=H&D/aQbYsDnrd0@
%?0NlE!OijiE7[^gCo_.$&,=p3<En:,$OY7dm)M-BSXsq`=edDX]krH5d.EQ=(#cfo#6.S;9u0jhj1,n/D<T\@YOs\lX]B5N@^&M-
%<FW)T5h7O<RTch2c>m^.IR^=pQ!2Lh;JQWIg?#o">#V?,4`jk+VKG%4>#V9J1NTP&VFYKPpC_3=N(0in>'n\c?4sA@BUqqM<m.i;
%LHMVjD!\IAZrtpSDqbo%1b2\bY\8"`ZNA.k1\6@1/1Y*Xr?<;_XND&ECZa2Y73d4fhn9b-)uX\Q4SRE:D=UShcqcN"p"`V3imqRm
%W4#mpW8:.J3!*uVF6g%s6(;C`?7N%h[(*fFTNrJ;6LCS7E\"@\'pXU*97IZjp)L52I&X<D;_rNJ\+XPQ:r`.`b,\f"Cbhi8l`MFY
%ZR(KYX0-V^2\"#<R]DstBA#l.]+e>Y$H#9t]C].oWQmklEN-(?gu@,VQ,'9,;<l@S3W2iZQ$o&rR8qI:&bH#<=k,g#NN6uO<L$S*
%']/\d6e]U`r_urF5c`S>qN=m59ta3q6s)<^#?!fEAQ;lS-/G8]Wp2j_GG"QjdYWuP8\=2h)SHhb!LDnBY2ud`3]M>QA@F0KeY.FY
%k<hjai2rg/kp<+)<eNWtenu)MWBQ+h\Q_CCMW0BnE!`HeZI1DNb$.%E&pqA3,N%L[86r6XJ4EO!(%XZ:VRhI[fiLgm3k&p?ddfR6
%9dNNkNoO"]]d-NJl0muSo+4Tdj<OQ35Flho.OLIqnOkE5J3_<#XcuGK!f\g`_cnNhb#DkX=1r-B-"D)K9?m,B8YlgT;O75,OZENf
%`=KTQ;9=))fh1V)Nf#QY\%plQN]P/'lu/[s<>/6dkb<r:3%c!,V2C-fg#E]&]JWQcfp4*\EZ;-:$;)HEnf`erK<?;7j\YK)g,q#?
%a@cqANUqm86>n;PjBpmp[JJ=jR1\e5BrTrMW,/)0q\p8LoNnt$S<jF0X0CX<R`]h'TSeqSS@\T%!7_@#lD16RWKLiui`#!u?0\=3
%,>#99+b$H-4n]i^;q%%ErC$JR`Fet7aS1`gjI6_V.(`Eh]>H8%;"mhK"/c#?:0`)=QiB5.#-K/8#,5aMeGNB\b8r.YOP8]#mK5t&
%/c1]GFiI!(Z'fn9CNo[#qqLsOfB1Q]MeGH7H$m4Q?);?&5Pas;QSk$%H%5^2hsosGq7[+5Q_+ccq:EC\Mnf$GhgYIgs8FtIcMhCf
%RpZ3X^V&%Za'\k-?iA%FqXo@<eR/6n^]"!f^\me,^]!n6Is8TYhmlRoQHS<?J+4>[)SZ#cs7=ilF+#VUeLuCEor"GY&&8+o^\Q,-
%s7/,KjkCmTgjf7VYCHGYcVMPh2F%)tYC?/6^\u]$s7>]mi%P*+DnkE`Sek@WjnE-O5@#d$f%9(KV,a(Y.Co<4I,No\k1>+[l`\)%
%J,\m%?iKcbH_GrHjo4YNIf3XQlb+6dkJd@SYCHHBGCT3Is87$NBp2BRKk^!bUZPoXJgW$<JKoW$6`#s[-,D)1o,B\i/O/EJ4_oK;
%D?%kg^QBT_;'o$=?1IH%Q.u/hr$S+cr:8fI9`*)D?haN6fCG6+nkZg/V)n:eb8WM&:Un'PmrCYKnigA<>i6^:D)&1.e8JcXp`9T0
%i![h`CMt1*dDjp=U@Pu9C+B`$,oe!mUt)]l,+<od"ku*nin!B.l9!PS#X6V$R1`+Q^Z8;XSpDBN,Mq>To_<L>nd$#GkdfeWWhDnU
%2SW)!aW5O27<(?h$Qm=<?Z<Q*#d/GXia'O,q-S'.kJ\X'd-O06LRG-e&^']*D^1"lEKE-mCTYe0<BU2^VH6c?rBnPGgFOo^5UoQ_
%:!0Af;c]i_<NT/7K`1A>MW/Aj&W.EXmjkMkW`m>/OJQ=Wkf>Qo:m,;$6Ak#@lE2=_>*XsW@Bc?s#[gUu%tidc'h`Z]Hp.'[^Y^Qd
%(N`uD@-m&8o>TTo5%B*9=$LTJiq$M2C[nAWR('TS+#S-0q(J,I5PqM=r1Mg>kC<;s^]"ZVcQDYQ5Fq,Tqd,W?X80ieHo\](Y3E=W
%JGX9r$hpsY<<V(X`P,l4_`gR&::8#'bF6.dM3e!q*+.b_VkngmaF*`;eB!%-SGehsrO^7N:YQOAFP,%.7`d0ZVe!8HU.+[2Zf46f
%*.1/;>j/TE<T3hW9>o;7@/#9YDm-o>k$RtgrV""o:].qtq8W5TpFlRF?iTLHIeCrms7VeoqP?tM*J6*=[pT#;rr_)GcWiKUOOsf!
%KDPS4hf4-kNmE4Ekp$'$^\c:Uq"i`Ps72ACI!kc,&afNPro*nU?ef]!S3QW?o[B$"iG3r9f>%:/YC>df+"sPRjiBSLqhZitA+0?j
%JNNV>r8R$Lrqc*_k4Rs\pC-^*]XRG:rEB"o:\<b`nb1i)O8>+`=s%ZIrT3YDI.$;ZG56^&n=P2T0>-gngV[BII-1#AoA@_/IN7Wk
%buEK:)`*_.kC;qrs82>sml_(D+*7DZc-t#4k\#87ZT\0J@?5;%H.SsTk*R1;pnWBHc56o4Fm)'AEGe4!iUV-qN*ZIE>LnRESgfp!
%:3o+(ZRLcNgVRu2lkb.SAHi4j[r9"TmH'!aN9/g;`nt\e*&I<Nddd($Mnf)e[qR[+O+,lF*eEe][:%-(e)]bG.4d(MJ#mHY9@$hA
%D&"E_VVu(L0&OO2334d?phNPZNXl"l8!B)C;N[1c^\7&e:86bD<o-LdlhejPm*G[rm?GTID^I'=oOch:QekEkRpWndk<Jp5qs91b
%N$a+*63u2;K0oE0m8+!]D:OLJ\M1>&/FpNfkg6Z)_Kt?a*m.+@,1iiISp1^Co-CDjHf30;reW8B:Zm`QpgpeP$@L**r:T:_jq<'e
%TiU.,=o@n5rj::O,P.m(l;s_)J+Z0^:]to"AZM_P,=QQ-'5^*.fL\)/;3rL,lVLO-f=1GIPmkjNi1fEsO)Hu"\7R)AgtM>hbPkT#
%kNgm+qu-VHm>JjV^Me#LF$]^gQV8B)4ME'U#=\A7bZ0&JjaOdG`P]3uh$2Kg?b-j/o06t?`92X"Ar+e5W9s)L_o+e$eD/C9rPuPM
%:EN]`_(l[pJ#RcP;RYlBXoE^N(=1f"2u1d%B"]`eI]_pCO7VbJrHDk3o.O)Yn=AaO6&"par$S+cr3H=PGP:n,lb7kWs*rg'p%a<@
%lM:6Krh6=Vn%%3q`VdL,"o$n]\.@Tj5ADRakC:uf_!h1U]A\5ioDeE&s*Ijt,<tc/AT(J9n@mGS<cNcBiWA)Le_Mo^ek=OK[CT`q
%U*U,d3T'VAk/SR5!.T>[$JlhJ`%->o'@,"sY5[dkhVM?3rT;D^>lXP.lJFOAJ(t1uUf-6[#^0.GHkl<A-1gRoIj(V[.M05.,usg6
%r^Gn27IfK>lC*So<^V&p4+n6u5oo&L^Z6k%YO]e(g(a?bKp$_X2R5C50GoAN8p;-c/Fp?ckb_^*ot*.5n_6"'o\2;Tp^=5Dn)Jo[
%S)QXNY<W.?n#=8'%[eR?5uj%#8&ZO4_Tg:Os7O#(SmTgYQ>,7QB9dSps6RKA?e;0NQ2Gq-a9aS.Isep.a:%.nhYrc^r/h,qT.!i!
%W"T#kA5RbjBRe;BrL>D7KC8-!DQ[[H[s[3(bnZN;:FoLf4H0orVO+8c\%T4]U^Z>WYPa[cC,=u?qP0[3[?U[gY5Wh?mrYFOr&]DB
%q01mr*rjNXDuP0M2uh0qc[VkTo(C?,ja[6g"9+M%K@U5U+rU,Y/:F^Soh<mcPO^,bs*[DdT=_;YR#gA&YQ+9&Ie1hAI<W6'DdV*[
%NbqX8lZl,kQQK7daX-mG7%L8Zpdos[F`hd;SU@K[LRbeAiHV\L?)Ph]rI,O9O8n$-+U24MhSYp0[DXOn9/'?j+gh,T_1)DUTD,?_
%3LdXY+c8rn;Et-4<%KtDW7-s7>P_dU[]m;,19+u0>"rCu]S&&*edDXoeqEhbp&EDLoL9L$<M0:)37W:]j6*39kG.ttq.Q\"14?UG
%N!o2PkC!<W(@S9ekR-jY%$D;_g0ksTL!F;ZAO1"*p@eBY\K>bS:C.g[f36NYX(Z-n-NW)_#-%(A6?+VJIiAm@q`TCX%/]('"4^^l
%):Hog=tB3P_\s]NgK#*:W]eqBD[o7dkZ(UQdiS=,ORGW$[0Mj)91R>u$hY?g&eS4_ka_RX5E,/-OUcV)c[8JL@=+buj-"+_<%7!+
%]bDgI7M;/qjQj&9\I\AC<XlFiH;N)iPQ(+pl4DNg#X@ha>P`tjh8,$3oMbW</Y0fYM0%=rr_r.09$c/;I\9Zu8,mQ$*g"D=dlXYq
%*O\1uG?E<U/8r2=hBgh`K(MS&$(H@OCm=J\$*/J@o!r[d_J5^i)ti/'<r7R3r59u\m.LC`I)9`eYl=Xcp1K`]B:&+#QggWJ9A%Z=
%m%:e@/R?6m7rnuP\qKGaQa!;ZfKX?^J&5Pf0<fla"kN;IgF$=c:O%\n]3!n$HS+'ep.'2uRbbZ+IcBe'FSGcJhHiopYC5Et[Ij1h
%5JFV)HsPK;iYmO9h`YZA9'8#;2TF&;U,$aNO-_rEV9`RQ<:LU(^QA5g.gg\\r*T)i38ZU)Y4t4-ZTXE,l1=mUJs"*_oC#OSPZrXb
%4.G\$^Q"D)?G!]qp\E#/f=\HegTUMRhb,>+Obip,fa&itJ!c4G,/@!q7ej^@rKK>T/9N$[g-r]S7hNZV06Oi/eC0ll*V&*GhMn$?
%/[CJF7'$=]gY'c+D70##fV2P1%*L*4XVCRs`J@Ta=TCjTGUQ`\#OP*tkYB-CUq23cf+^rP$&E33(Zh\:D"htMA(7Aa*51:Fqm>5B
%D9:"8MXh>*r:URY"/+YQ;%_t/45Q14=F7D'ocJ8nUG2QQmdX9&Y!^b<g]FgiV"/uAf0+"98UEYB(L4VJ8LaHC]tlWiL``/"fd6<=
%ICCdCc<n7)R4:01aG>4@q>D_9r6gE-L'ARJoE!QfV;gotOC)rQbqDekFc'ktd?X"#[kd68XnAAiZ^n76;P.l2'7J9XU;DuFMA6TM
%Dh]V%a??1eG^e$cT8-&icI\mn?Kt$eadY`43d;DSg1unZ.T2^*hd<1e&/3+03:eFfO$ZTV0?4mRkZe^G%r_V=mZ9*0Vs@*2OCian
%,0tWSFiI&VcGk&eEU(VnL5:KC-oH;B>kt+"EVe3'F4g+t\1ga,e.:RRg2c)aJPq^gePpF7R>ai2V*:<%-:/4X1"T3EA2!9=71)9R
%2<X^=F$),P?IClA[$6mh(Smttjl92!M\aRR%B+>-rTOj;CWEQdlkZHb$:j_!7($6RZ1#]Hr?3QdcIuUU<q*)/Qe@Sr6clh0"k34W
%7f3*@RaasDe-J1h>/ohYJc94Vo]EbY4m;`c?04i6p\n`i<JKg"q=DYj-iHT(P$9$m/Q)!&[ot#`Tm'j[o`!n;b-`_Tr]\jN5X![Z
%ZG_Q46:bMR6u6q><IB1e_86!q+i.'^%FXG^>S48;A:Q6t9h2#=cZZLr#17<FIuli*oZf`Xs$2.cKBqehKg9l[B6PO6e>KVbda9WL
%h&lqng:#DaX3bLL_$^&N'kQ+d<bYTu_AFeMs3MkEP+OI(Z_F$-VSV>\DL522akpdu.Y2(6;40Vuj(N!#5"\j>[-"NU%0bTHe@"7'
%,+6ZbY'`hO<jtS@h:subdGf"Cc0#D?HKN^O3_"4,E&S\j+m_mhaRC1;-_tt49j]B1Pa.u&*)+Q8on(1ZAJF-acO]X]d$5@2MGV^<
%R@uX&g)SLBi:LFUTZ1nl*$3Yt)e/C7go47JO2djt!_DYJ#'F2i>e+,A]p8IM,d*!:g-%9e.sJ)s;moWV&]]m`[cBEM6ZI0/?*65Z
%]4e3,e>BLO+]_MX\q\Ut#!57GX&pr8r,/_X2(1G=)VO2"9JsQ8Kb8N'n`1Ob6][+uN`k-;?K5_VB2]2,8+,J^@gEd,f+@X9mZ2Rb
%iNr;r1JZ2ZmZE?m+T*CFg39+]$-rQm0T\H"H/7""94IP6WM[tPknp9.]pPZR7>!/Fl-m&r<hi4WH_K3Ml!SS2Ul4(04YM_*?'Eo)
%I9dVZX*%^UplW9=>6Jg3:(rL/kpr3GHoO$nHd^r"a;W)P84-M2-2Vc[!ZbFVNCl/^AG4@R\shW;GIg4#>@qia=".3I:Do"fa*@<]
%im-&OL(6J5ThW?E*[gb_r?RTP(th?eT^gl7rTI3j_@f(jkd]D,RXWUPTeT*@8CefKZSjabmcpfn9[,:Tn.&5Wr?%rGI4nglCiai3
%Y8?9%r@8mCq,kfYU^]1%Na`R1f#&]7`F%'^d5):NA&a;3KluKZ&#],4`G<WaVYU_+*YC_4_&bU4C0o7M?JS#OX(QD-%O[]LfYuBC
%3(7*Tk_h,G+<BL+ekO,g#Kk3CR2r"$Z`"`Ji+G8jOub0\fhraGrbA>eAOJi\`D.L/l+gZN76A1W7s?>@:8^7_du&-+QLt)<H7jL+
%<4+$3#D)/?e4.-H[QhAb9[]`W(5?G.V#5UG3d8+b"J#Rh\uZ:G,u=87:rAcdff8RCLr#;3LDlq?XI?UtodfR+f%&hq@@Z@Bl/h%[
%$=17BDUs?A]1\ZVSP7YgoqE?3LGYpoo_(;Cp3"8Z*SIF&+jqt0\W2PN76A33;hr:.K,[LONgCa&Vc)'D*e(U7D+D_H<6G^"q43W5
%1rL8;>p!bW4_nr,5%t>]nO=<E+/GHpVB+[\UVPc'.Q\(oHIGXRC90Sho!I%IHFtK65L4_0oJB'*!PaK(B_DUe95ZZnMt'P8LZXjY
%:=*%T?(.E.1jJAoRr3ug"GZ!n.t_pJ)=dtZ4]nkp)j1/UVLC5eduFa1Z/407qsDbYDp`GZ?Er7X07`u[ek@)5nV31%+iL1Y==aPX
%s,+T`MidddSpYVmX]cul.oB5Zc2YSr\ANHeXc4+[-uN\(e67Rn7itTS'N)hFo+j:*iVP06BGG:RJkJ"8+)oZ:`#W8G0@4&JZp`pc
%<A,5kq+rl<JR!);WC8QW.#Gsg%,+$bKcHqf/+U=2<J,Q!N=*/8qWi-O(]%8jh"=nAYW-HAYtec&&)(=/;lOj"oI!d3\V:?gEVo0V
%G+4cr4JU[.A#Q,s^DU3m3kuk$k55\n?#N1BdorP^nVpDKh)s1l\%BQ+TXdCq63hql.gdmr/MV%m^!WgC2LmMQ^W3@d:pS!P0^)p'
%(WH0F.=GO5=3H[\:;=Kb76%A<o0p+"`Xhm)&kS'Kp&FR:UiV1"r5?*G>bMPlTJqFOD?E>VG@:m_i[ldge_N"LD4Xe7B7/)$^%gG"
%h;WMmo^SAfXYo;k>RnOHXV[PgQo#`;`AmfN_X#D84:N-?*ok`gl@3:ZZ.eI$"UnQPmcqmo"PL?D-]R9?oTa+j_<.-M_74lHmOmmZ
%XqA%me_m)N94"<"%>H4oA=:Fj&)-cJgG;>EZe"Ac5uY_(?:gZ#Hb%PcTQQ?EK0_<TF5+YRfRQ7cL[jMEL`0olMH2>]p;4X3jFq1.
%7SHgJPBXEJb"&((#$&b.2+i3VFl$]"0Ha]@=S2"@LhAD;Nj0Au<DHnEgIKd/#RJp2BlM4XBmM^kjc4\,Pq]!96f`]+)O//K=4m1f
%e*@u$cU$TT%qSqkR`##q--2b.gYUO6e=:c0.I=3CWV`MnF?EuQ1Wb#"Ft.nJRlVR((Aa0>TGXY(rtpSS?4nh*A@=U]@9_qPU2m3t
%.kpeN'k0+EJ!L2rCcW\J3,CXh"rUci%&5[Op]dY-^1a_kqDC-a<C\Y=Q:^ZY?'s2ab+luOi#l#MPC5Y7SIT?](5olT*8$1&:7t7d
%1C8YHNL\14WLq:0#IGQ^')LUd`cofD/i._IRE`i#rr.#K08r`(g$$@[YLL8='ZqMdV;f$,/+)Y+m__*MCqL6r:\oU-/6sg6C6Q[P
%j0\VDh,Oi\2l9N^;!gRhb=l/DpJMp>lOceO32s,L/!g0YEc=-)fP%j;[AEN3*TP<Pe30sl@/9uQZ-F/Z93mpCabeB5:D^Zo3_qsP
%T![)s%sK_^@/s7bVgY\Uag>$0J(q@I#Z5&X]DG[K.MGj((oHtpoHbL?nnC^11+clneIF2.6SXV7[of-i#1Ro,j2\6V2aPp+WkMlJ
%1*l:[oLk)"clM9fCVeo+EE7C2oZ^h,hG&<>c-m]SkUT#WhX#](C8j^Dno/Zn$*LP5S;44i0Je.fkK5U0eQeL8>*G7>iH])JITs5'
%4C_"#^*n`/eaS],/Rpp"8l<)g+5DM,FOH5k*G[\F5"enrRR4ITd(LIq5e=7^Ist8>4/\.s3U!OncRMtn^H"=JMGd6T\F:?'$+cXf
%ia.;Vhpia2VE1Xb3Ji[055p*K4*1p:DK(sap)H^75':"sMp9h#Kh]VYkpD81kPIc+oitmRVn5^IT"f5g@i@4M;ZR76'7(H,#*'q*
%K/ReXGFAFrn=,\kj!UC<`_^J3fM2P\PJ/b8<&uXg)M:i^NqPiF)t&bP's=e)T01[&Ni#f!*V!PDK8(&u#g,H#[%\I3]b5%/3HE^1
%@(H,bL]RVn\!6&S)Q[GD)nDk8<*Y@A;RX3NWAoT-H8?M[T\g1&LKVL;bo5W>A+,t1+'u=11l+!E:Q,\*X^%M1/V$'+*G\<K?)SYQ
%?EAEu+cfkgNUG4Pd5kGdAB`VDY6>O*0PY#8KgKXIO>P3_X*GUU1.^HijpTQ!Bt9GlC-M5QCAc!T]#H,%I)OA0!nnLXpui[,@\#j=
%7!$IfA-?T>^DLV0AW[>P7HO%3pd.Q"(IMt$#NKC7Q14kkVTFIgHi!01SeZV7%tYJ8;1`@$r]Zms3fU15Sufe1BmZoL':9Mg(IC=U
%g>?`cdT(F=C8gqEH>JHQXiAr)*dUL3:E#d>o8uiFc;>7gl,ffD1Bn(u-8c$hCN3UXdpM:.n3&<hfX`)he+K[il`nt?97]I6C3t6Q
%MELgAl;"DT*C-fT`&:EHJqgbtoV3#7W489;2Jg`8=)UnW.21\&`g2W(;qkNm,W)hhF(uW\4KAli;,b4`:n(!=J"@<C<dfT.,jM)E
%TXj;p]GstRm"HVillg;\daku[c3'gBh=N\/6ajVp9^^@npr8L@@`WPCkZU-B/ae]-THo"Pj*9VfNueg9>WogN89/"r2:je7;m5fh
%r6j?J\Sh%>58nNG$jm+NK#1nWYOrp%EOZ)r%sk\O$e('>*7k<!$fUOba7W:umBLM;<`]b;,.k:Y/,hZ5mOZ'YLs%ucg$U]dNZG6F
%D`K`7rb`Y,:?@-dGTQQk@i<,nDYXXW'RA7>Hk?N'SZ"+eSSN=6\Q*Zh:0POW4^Fu[`mSlTJ1fGNF1iP1`bdqXc5_eYK#\%^f<4ST
%P$!/kU%'D8$fBQ.gjYkNGZpCa>.&gTPo60r@7TKXHAikZ#e1NP4AQo?HI@B>T=G]fC#8F_8K[5[ed6fN27(koaDn`U0q8=I;NDJq
%lK&WXPj@A:],LtF%SWSDSM8pTesUONPM@4?Z_iV!fC?j2/Kd9X%V-OGHV`WG/l)Rq8.XPG34Rfj*>>>V]:=aNo<[j[Ul2sfcH!qN
%%`8gmZ%V6r]n8o^2lZu2&=>4q=gAfUSjK2^0m2H]qAB./iHY0-\d6*p^i'h4GP)1RL8Qr')X"nZlX`i?1URB%:]r[V^tg,*SN0HB
%e3G,Ci\iB3eb7Y*E,u8nQk$d<WcWFnSqNQc[?kKR9?/^LT<=h;O7_-+!*,`.Pq+PE0/=.I>I7b6c@Ng2DUl=;3-;N&d9S;.)J60q
%@>RZJ@le^4F7(l/LS]Xs4Pa.`.;1hS1I:Cd3g#=1n]eSG5Rfj?7I.eW?Foc4PV(r',V<Vp0--WZGR7$6KhoKL3KTNn9m8rNAVQ?p
%$`d:`97)g0RgX7NVgj)qr,>BPdnMdA-2,lW4#n@5GNBm$.00_M8ns7]TmL0/`<GTB'(dY)#IFTdTI]*#`ONB?I5D]:`[b2;Jp'%e
%CYnb`??k";OPegB"AC]KliLkBb>l8PVI=[m)CB>B^9_qhcZ_J3D:EI?LH:`/'K'tp:V93KU31%bY@of,:Y]lr6]DX%9JQ_m&lnS7
%etA1hiF>Pb@Q"=+i7uR3Yl%t4dm8^2Jnf]!Sa^P+$:A*DiAC7-kO\eT:<Bp('N.\@B,nrj4QNJ"c0[:"UQJI/KYZNs@Eo_V"Lr*Y
%?b"7%YQemHA'*_J:UHIbWEV//14_6J4QRC__9@FleN8Jd&RpHnir[.O<L=,,V-@oE5m<`4fOuMtW1i2.P!rnDmcO0+4_5JO:W5;8
%mp`53WemrM:WHQU"TU*23pHAQ60HD\n5HqCEDkWH!ZkE(r7(L`.'2r.[pMSTl;-/s35f6EmU:qJ2jk47d6,p7Gc6]"fs?Aim?<9Z
%Gpe;ZS+ossrtoM/9V<S??jL2<AU&H9dhdfl4GJ08X*O)XVQLMj/(GD!`j+,Ia(^@`:6/3!2N83N,r=P58FdU4$d86@\nb-%FnZHF
%j*_p+]"OOT:>@'r_U*p7=9\aKEQYdA/q[8$GDMmd#$lMn=KBK5@@2.%/[Ae>%]q(5gM+`[iJ;'L9+a7L<n1]hm5I!8AJI@t?+?+8
%%8C6BDhGDV;_chtIVM)%(g_?d\jH^9d2;#?Y8]S2Z_REZL_BQ[<53(dD14?56Kdi,a6gDHZHU<\3Vbr8_7E0$#\](jNM@Lj)[Kn+
%m8:<3bJ)rQPQ^qeGR]:S\cW;Z5!A"p`sK2heW=qMPM6SRd(r"HEBaMP%:#]J%`%E.]Hb6%!L-),W,Xjds6:f9*G\p?fIEJ]hSC]I
%8Y;0JE!e-\kRQJQ=EK,.I]P)Ac,\hV]:NjYMY9"kAt1k&8!7:gr"m[5s&!EX]'TpR1`<e5@gQKW&B1_n\i^EaSY68NRc.S#!Y=tJ
%D9\,3?lW2QZ/lL20Q6;"2BXTl_Flk3^:-8.$P;`lS2XWc]1aj.=Q\2k/$U4HbA]AeF"OpN8j5..=4fZcHl=T`G\hsUU5,'N.q`gM
%GC`q(KE.Y7l9LMDgfUZdC;4YJ-;_bN3NaF4,Q$6`>k/W15B-,CZoNZ-EKht80TG_/ktX>5atL7@P]e6ZckspU$En$];Z>VPa%BUi
%)n`>:\JanU,%r'N:oc`>9sE"+pJ1Goo/Vr^]lP\o/Z:YNag9\B5^,E`#:g#2]<nRS4XllqJ.oaS@,][W!LYq)RTurRCrB-lFeqn/
%8>2Za/?M]!RELCH@uU'8iFs[m\D:s]hDlIS;pW7aRrWE:c6M0o2P\u0M3a'Nar-#/5<4aE*#.EIZHYtT+XDi.,HWM!>DV<2RKF-k
%]j4AZ^]MCj6RT8CPZV(MDW7EX*jhq.NY<\$0\%ab^HhpIXt,u5#''IMatSoO+LX8ZQ[*[aCBe(o$+MnP6nAX%"8D+('^Y*f)rjXI
%h&mR&2S.%d"3_7r+(>r&+>'Z.8VrW>^HsF^-Ui[n-3km?g%?>)hU7VeSM9OM*uaH_EN\A938=9ed[WHZLC/.oNj6S@?@k)=NYq-5
%H!%o4eS-PT!+IL-,p$Z@O;Vrf$2=]dKLY26="so9KuuK&V5LP!j`HMBM)&4n)e9290TcKV-Pd]"]h*foN%%KmpmQ/Ki)qV9Y/#'T
%J+f6?D9DXa7CZPZj\THkq<rt?Rjg#kc-G_5lJ^+W`9%8QJdQ/fioi@mj1l]*Ab"KfHHB5=SoDgnpHed(d/B\>>Bm7ndQrtgq%'[@
%l\'a`<(KL8N1hCIPVCZeD90Woo`u2G_@3]A3ObZ`3]CM7kQAQ!3>2Dd9;+[36Y8<"#a*<F7LDpF<W!5J?;V,[r4H,NFW4D,O0\`i
%+9h@&E3G..QDJCq9ubE1r#n+UZ:B<gM5?phRC;QnZtOR+$cW8)elcj=$k^^lE['[IZ8>r)KT4MANc7R-=2j)HmgS4BI;N:$4<&9;
%VYn&gj$3oT=c*5?L1@o\#X;%R(b:e5i@+@0g%g4uYN;6*JFo-Ha8EnH@?/;JndYutES.;2qC'-f)Jh+GWimPjTmXf8"oI\UUq1t#
%*kL"R[Wi5t/+->fOWpcre<6Aq5/i/n*TnBPT+(RP60<.!*igMLm!a_3+`6h\=FW^li\!Ne&9lDN_9;Pl35B$O,R2kcE9ZArFZ=ja
%*6W`#j+@WcVBpi.)GO&D30KT[QY@n1I[2pFa2r&]j/ePqjF+s>5>2d0:+G9FB-40WY[G\g6b+$Z2/PHA_4^`id8(::.2s\u./AKa
%af(X&_a2"<pp4c"@M!4\o5b.EWk\l7>!8KsK9oQdQS=ZClUubPCgN+%k!%X7%)V_c2.?V*.3<%6%c^Oh*3gU/9fTQH95dG_iOU]Q
%Db4c!Cb(b-/W,:e1SdOme<QFq0+D%Z3i^Ge`B<oR@RCNKrFiY8#E->'-]1'Z*7lm$_tcY$jU&uNj"29"&],/'VQ%lH-hUZER<nL@
%3,[;=Uk[2uisiq0(<0^U-XepA\PeEeNL>_cS>kZ"Z7Q*7=p;]P%G6mqLF<#Y4K;8d8iYi-?FZ#%:%a*82%Fu:R3<qg4)<>H;[b=h
%/_7G!C,,#WdQOiu"ar,V82-I0f=`bXK06]Lj!n)]?!]"nS<[]V=.HALH#@9"hhqsm:t4N5\kYt]MFjBtehf]Sh-]&o\hjmZEH\Z#
%_mCKX@T0V=9IGd=9%P?Zl9m!F7:&n;QSOmc3SET/I;l,01["(Ng"\*=&=rkM:iV(TI%n,=K?pF]>]%GjVhSm)dBjW=\D*FpDi.43
%I(mVC'"t0AO$YW.bA#fjFq>_YWbU]pPK1Bi*kSDBgE]e1+('\8\/B>I4[.C!l^c.nRjbY#Ji@4N),su3(rVaqf+J@>+BH6JCgu&j
%3";AA_Jj:kF$SOaILhb]@,9&.dQ!HkVq0g9FP?S+*7nZpj.)mq5Al'cbt!F=E*fTB6i$".!T>M*e*HNq2LQEDa(dman(`2#K6@l:
%)Y!*nc;AD8'o_D9hVbUfDZIF7EeD=dKGWkB@@4Og[)qq?e?)/26fI*0^+b>He$Nk8>n>DUGInCEph/59AebutKI)O^*fJgtl"t0P
%CZJ6LJjM`W:47MmWoN-3:5^B38H86fr#bM847rMN]'I-.LZh=dR];';A`\8n(Fn&<?r1iG4-_Q='W"do,c"WR=`o6H1amnego@ml
%F_WdlCC'$Gk(rO<>+QK(N%I7)d#LcGkSV!.QaOa5o8]7F=.Cm5JbIM]R^KBX%f@7#fHW2-@7F`>[bJHN6?jAtRFfpJh6:Q$G.=on
%#eo$/D+o1Pobq(c:AVr^jUpFN`WS@Zo"89Cr@$bJisQ3CN[rrDiY1Z$ENmb\AlW%Q`,NLcn@8<kX#pJl'?@Vb61/&f#&IX4X_ip=
%mSXcrQ'QT7dGSdgh]dSkAQ?kc6bq5",h\$a283kWs)]Y'U`<kQUf?K=)N][5'q7CgZc!2M7g"OhY"]nJ0s9d^BHGZ%W[);j4#]1W
%"j58d4W>M@h8ech#`AmRad&,,!OdXMf!]DpaWd;`$d+_Jj#"K#1M)!ZmN]@B@\&^>/OpoI8IS_Bb.*n3B3,4YN"0e"o_Y[o/AW9.
%oiR"G76n_q1*hI-#YQ8S#ZiVRmi9;\qcg`%R0dmSk8EBCbu7\7LKk!X\=L^;Ibks:Z/X$VTu,pj]NegK_8-W4b[M@L*i;0J9>Eok
%0035F3T`F<+@%<$Z,Mf`_<"Ti+_P%4][Up)2%a!+;]o:#d[:FaLkP$4Xp$V=@K;0ah&YIu_4P?*IT/-UQHM@T3o8)tM!H[ZA63K6
%g;OND"9_[QU(hrTs(iKnG2uY(LA;SA;!UmE'IhTmO,rUhJH=%FDEf;sU$@0Idl2VBPf&tn%9G)-POO4)[W"PQVN6ral`bH\m"3l\
%@(85Dha$F`$V1E#_uip%P09s/1E?./i"8M6*tj5%=[mdr+VJJdVitM@\t;@C-*"muG\QWjh:75go>R9OKYpj*l/;6U$U@WQf/XIr
%;;=#g\Ae,!WP)Q<@3sNqY94HB5^ssfkSG"<PV\82^es'ECM[3\9c$(/@$hd\64,U1;ou2QboERK,8%j[Uh"l:9I+p\WO\?E``0](
%&4BuQq-U#MLAs1GbIhA\71iRL8ZA7?U\%tGV"iPlnB9Jd[\XNS_5UX1Di[76g(;J$pTB?=AFKk6"b_f8%Wkb=oa6A4<@1Hij3:^r
%Ja"f:+:+Yn'TtN]IFXJ`d-7tfUG9JOW:TLM[@knD9]o6D,]I.qFqo?[8G:S]bnr[);gOs].=$K572bbJ+]5C-[b?An\iJHJliH-0
%3('kp#((@_.s$((I>q/pU-o4G/'CYPi,IN0+>19^&S",\2Y+sLKcBIbjNBUT7lsi%A<8X:dR?$ZIKcl1,Q;#&)"3/9<9@aL1XF$1
%Ms2&dYdf&YJ@r&GZZD))%$5HYs5HP5)EN5BVGCj.P]3X<gk3l%5I$5&[k!50pb$'/o+lE!@4#r:;Kr/7/@36&>d]k6J2);9&Kg`t
%iXKa\mZdNXc]JC)^f[gkVa8N0Vqoi=Y?V`G!N])*GkJqL8/@*'^hm"Tlo,rCea*/RPVDo5.&b:_Kl^cfLW:??Q"]U16u>u%Z3bbG
%nZlEA0JYM0jV24qHS5-I5cd`n(lt,TUB-e%l$Yq73qCF]=&>.CN=09\J^jmuXj[P5>`n"k3-&'=V*&`C)GH++1Hh*kJ6h@D(h^j!
%*IA>iUtMrOIQ^K_*"6'@q?`d09YYum:)lM4B?6mU5nW*Ni])IrCK_68C$-&j0s4\J=dsJCicpXP';SB+UJc5,5&8JSY-:0N]AS3&
%D%l4.%@Q/29t=1g9t7F3dja!oAt<aidO,\Z3E$)lZ1S2C>o]Yl:7Wd:c?4n5NZ2hkRnt+g)%jkos3Y8([YqOJKNlTAUi>?^Bk.iZ
%S%7Fq;a'([$t1;X#9jX]B'gp:ZuDST3[]cOoo8*jD"H=!ShH$:lo)^l)Q`W]W-Yr`G03cp3cnqlAeTN2Maj<FH[Lh?HX8s$)b)qI
%o4n]N?[J0U5Ga^tbX3c:5*@H!;Cq)e*"r?4l9'>3nr"<Lh;T#@A^9B-/[Dq32`@]J1(fWK^NL4u3'4to$8dh8Z;,ai;^dc#mQ4iL
%`Q3V6K'^SQ!C=Y+`UV$4C3#iUZ$rs1i7TUkB?n&Tn(a$rBfK[oOmpUUkESs5`,T80lN6EMQU$/*MfJGfj4f(k7@-uU2&Jff('V-$
%aO(<"A#UAEhWt5lbGbK4e8<'60:kHaWi3ju9OF^in*'H0S5la"m!,Mdn/gKL[t+,Fg^4V5CH%8;`PSQ-W/dZ"GLDFT0c=*J`&@HV
%!IHnURpb9CHVV!eCj`4,s+2"Pkim'q5[nAjOC8ZH5mqp[('?t`@_t?_I4#N1JjnH"QK]<XWhs7BP[@R)\Ypcrp.o?dQ/:sFlbC6K
%+o"5@IP#+@r4r`NAL-%'+N\Q$$&F/1=n*\8c/dS3Z8LXbMX+\"#U.sbiSkL:T&XA*5H;Oda\!6Z_I]l)(j6ZXW"X5NMUZ7OW8fCp
%jt<qSq1FH8k@:gW'iO.<r9l_0Pf!s1f,uKJ=RchhXo,`tH&!H)KeIbd!p=AYQ'kc1"!8Mc4ZQo-Xi+PD\CcaCn\iE'pC+["5_L\n
%2I[6(`"T142.pQ4%RsNMCNZ!\cSCnX.Q>1@)89Z5=rqNbQ)#,&0MWm)ZE2.BfD?4oV*i7XU<l$sJ/X[D`8J4a%$\6V:6'6`)-_r/
%Bi&VcR#//LOQuQ>[s'aBFsP\)SdWn,gdqO<>WO+i-R3A,9rMJZ0"U`9JNXVu.&+ZJ+sjJ9(B!kHhc`)sP:Y-N!O=hl-;lSd3I12V
%ac+lWpKHHd)6Xb94#c,\$j0pYgE#bT]!_g(W^B>`e]Ibjod@jK_3"pN+Z2VO'Er``k[^>*Aei=J%a7#J2gO\OP</L!3<K(6QYunq
%Yii<^T?)#qh'j+]m.)%<,M3&[f+b[)*.`r<XqFVQ?/$&'J>?jBKZ[U,">PBgi\O;6c:;QJl-a(Q;T>8`%flmp]ZlmhoZku&k/tuN
%.CY:n#7'isB?k?Pd^,L,5_pX=DD@X#b:qK^Xo8^QRJ;sZ-,OpD%81$oZIt=FG-\;En;g`QJ$j1g4AN"Bd%YCVfQ5^j:pr]\A2$pF
%Tm>4@mi8;6.F58MFPA"dQ/f0$)0c9C@mbK"B.8[?K53cGFkD1+s0',g[`-ZSA^-bN`ap-SK*u`&h<-mY!Fgn'L^7mZaEjW$cTQC8
%P_4?DJJHCgB'@;J%f>!;[*gfA,?M)Y"^J;J]bZZ-IuAS<hMiB\E[p%q&0@Rj6#(Cc]Tc88\LrdQZ+AE\`V#r-U$RA'OBCHW4V0[A
%?G],&*);5.9a&5i3_Epk%R"+K8)nZQ<q/FIUr"*3Xa1bk%OrB=N6pjBeAl=PK=EEuK&%in)WN9JW*6=aRsL7WI+Y@`gfTX6ZRBlX
%>K]gu4dc@,a/aW4N5N/m9B7)2aC9##]HpIS$ghDj"[I^KKgK'k;Wl%JT:m+POlqcEOG9=m*bd8c$5=OekhI^S5I*2\/ts+/9sr'B
%!p<RP$m]E?".=(8>]M-3_YNKlWNOI3N3XEhmdm-1LNHV5R=h=E8VZ5r*:eFbSmg#[69k8HBKTCPjLKsMDaVFhQiV'^CSa(7f$IIC
%fh[5pQ"'2(,d5_DiUF%GE)-M>613,O6th8-9u=5g)6ih2+t&:`h0X:TN&:S4m>HU&/trEB\T7(K\*+i,WS^EXDiI9MGDa7Kdn=M@
%kUL=U`)T3RQrAQPW^o'EV-Yp/:.DUmcjCB&E9Q1VUTd<tZQ2V+2SFuTRNsV7Ca[T9j9T.94Z&_9)6P4o*Ifh=gBcQXZGop9H'_;G
%8D1Pbbe?>bUml!A&hA&KHaiC9o8sX4S'47#K9"?6L&Q.0&*ImL4;O$oAB)hOa3G_'r*Tnd)Iu9NOV$RqBCU8%$Y5I/gYHu9nRFI*
%(;gJ)>V/?rNQgM^#jom@6tNElk,I^jMN9f5_s,Op`rr,Fc<sft)F?_gJdBce7E_t#CJ*Q$>an/gN"=EqN1/k_a4*4iP9L9.Ps'#G
%1I1/C*0N9nCi;;8>#+:<\i"IULZX;(W!M0L9M2qYKkrl)<<Od_+5,rMiaT__K7j:^ctc/[Wmu]hW*hUZ+VV<C.EjdN&l53`h]red
%A5g?edn#0LJ[E?>3E#4[,lfV@K;tk^4cb6(Z0Hhf.N?DW+gSJq5e_B#V]$?"H.OlkVUu%teS-O-S9Y-sXV6L>%n@nEB1tC4FAuuK
%GiTtd&jboPPoH!EXg)Cqk86au7l%'cb&2)!hI!f]3A464PTh[Fj]`&;rHsEY;&i9[o!q=P5FUsFaOm_9^`Y4(M+L"`N_#K**:FYY
%8t'ln:gYDf=VM7J);JC)7$OLBo[!+08G-Z*<8#@7%'661,$dX%'j4i"CQ)1#G:'4YWdR9]B<IC=m)[j2S<%SN0!1DE7KN`KY"Bol
%QIeE:0'Qca@HG/8XQ%;PAPjIO+-ad?S0:%%*JWtJ0dooh*8I;C</V*:D.+X2kp..h7?UV['+n\ZI[!QZkg,:FD@5*_3(0f(Hl9PZ
%6g/f8VB`J*XCnj3ih1HQ=+k[1Upn5J5p[P.`eHA2Y`+f,m;gc-$\YBYFUnlILCF5G!C:dr&\g/nkDLWu4er*Ml`fu[@$#W7`n<u-
%'JpGegbS'YKEXiGLK)S8^;Gt`!E\e@Oh6M:E.k9&NjJN12,9IF0r(Zs4,8J%kSD5m&Nc8PZBFir)3_Jjm*6h#7r)cJiqjlscPg^J
%2P^-17Z*PaAW%4/85L@e;^KM.#=1-p3Yr'?nuq;\W'c3iU2jW8:[^/U!',f\>N>RA$=Y+jV;.KEW/+`CI$(sn>B:*E,5HZY4<^0o
%4<YF0_6.3b+\J(-4B?t_bI7gL@ON&rKoNZJ3krj%X=M,mY=]!@0Ua($-6L0tWlL2^*oTaY*(lqI%AcdKPs!7F)Sh\+%--$/8?b*$
%PN"X/YF\bQemq\T@L(,n@SN%3e8r*na."?i(;Fr\YpJO"V;%'ZJPQ>KZ.\[/U!a_3-aCb!Vbq`/VuT(jZdH$i8Z1`HYJPFWVh53$
%?3KEqE*_oUod4?DTbeMP#>mB^k';NR<d'fe1UhC(rjG]K7\1ECF7*<gKK\Ym'?EpGo*.c(f2oAi)FA4O`F1)pp3f,77tOO]."iTb
%,YEV,Lc*UI8(=aM$EZS=&]`!o;m6nq1\9="ct#^-p:?EaU;<eb$ZW=/kX7AO:-dfAB7L>4R)ET9o$hM4!JF!&NM,.9C?7GOjC-jH
%V;\uF[gh/Yh75?O!-`c`';`gd9eDu,@4C+RP`$MQ]#8L^Yk02os7;iJC[4WV!gW>/2BpRM+][C/H[U1=ZNgn78QOjU&RCf%8^c6B
%2e2s"8TG(5C'uW-2HA;-=E5_Zr;$I&3gJE_.@EL6#3'YuVln&)#ZM\$DaZU`P_O^Ek3!ML/@iQ0rAL\mA?.`WFg8Kgq?Tb]+QoQX
%bA+mAS6jPWRH;Bq.Qm[3HQt*?_dO8t3T3SU;Tak<+?2-i>SX:"&rIQNTUD(5?>fVrot)s%.B;!^.>R:?^))p43W]gEKk#N4"(a0N
%+W*l19coW4WXkW+S(#Cj&VdRkQBAi#YQfsREr\=V_ptUqUWI145att3diJZS<2#4ip]KYGUTmb?8])*,P#CR5LOr?JS6DU4g>/><
%Pk@RCooW?sW<<S!)Wd2M,%1jY+N^XLXmPN*`WH:QOWhfs#id(9mZmu'(CNOkQ("$Nd0tBU0%$`\>g3TM68<:O-J!QDcS7I9rd7XK
%YcO?rOP.MTb+dO\]I^H1gqf/R1tdcpS)i"^hI1;^"Ip0&c'/L@gu[VMp/=*!NXX^b;fHWD3PfB7N]f4f6Oj^a:)V5"GOHO,*2l):
%7SoOK_P0D5PLK9b,uM6/MF0W`78.q5Ec2X;E*>dKoG#aL!!j_3VEFDlY";^OO(?2#`!I3a3+Um!N'5,Yo"?L>,G!)n/I$2&\#E5s
%;S:>TE]5H]F?i2#+jKq@?XuNe]ag"a39a"(l>t2B-m\8?]<-\u=M>ZlA>U`jKB:FJh(t#4mb*a1j%f,,9CL:E\tLad0sb9u=Xa^m
%ae)82?+SKr=[\p?;Nrc7.C1KY3!/aImZPX4l/qFOVi%64UsbMTJF?bH<Jen,YWs;TI%r\p>KTtUl?bCL5bgln1,@VSS0_9#d@bM/
%.*!K.j&V_1/g;.EK?pI6NdoN_rY9RW5@VZ?b$m<03Yj@iV_H;-_Yg_f$mu[7A(R27+U1DLn'[:@F%HpPi*cC>-Fo*;0Q$*B&1hqr
%OIV@bfiZ[M*2!F9,;Em[@[Ki^0rSMJD>(oDK1\%(olg!$3E5jl:2s<7WU]'aOOo6I;SpEsSV;ut#aS9rVum3,<'P=?P;#ULc7KCr
%#sulb0nTMDJ/cOJZ$K<cK#R$!0M7?;mL)Dg4I7j)K^5sNc(&)4Oj%$o=gMKSPhc$UZDl4/7C^d$0ot^qKfp\1Rr_@lW`kb]T5qP7
%`,f3QF6WL6b>rL-QBAEYqbG3Q@rCW_`-e?::M#/`M5Lsuk+V)gg#.pQq2-+%g]A3^bp+bpU;kOJ1>$Npoieopju/j>ifrV@qOFHD
%8#;gd;[te8\VkouN4FZ(K>mmfK*S:Cdl`m^R7q(0`r-8sca#`Q6-:e=(-TXrd)`R'WOl@/^bWCg>am%g#ss[*np'9$@DSc3W-"'u
%!QS1Pp78aWBme!KbTq+Ar;7f'&D:8o/nk0q,^]&UDIECt@6LjS1dW?cgI.DG,1c*RS\&%]927D.4X(+C;daXFha3<Y#r<<]@WcL[
%6<6pW\-P&IFX*;b<'8hX;SmcGPr.kMLpb/qWtG2)H6are&#D:1_rCp%mKAW:O!%GUCPKcMh5j<`:k"$n6GK=539=om]IJe*Ci4fO
%QgnU8R6hTMUT5YH.pOI+:e20*<AjkLaK(A*_NBZ>ZKd/>F>X6cIElEV]/hi^O+JOH5@<$GYf@V)Hg3qXa\lZ7ZO1k]h$o1nnJi(J
%6!\`!,C&d0j,p8_R)jEth*n=nd&Wf>`Fgt7AML;X9afq*^)K!@q0:#3("E\)J4E;8%:1Z74-jmGLL](+!=_s=j"S@@NU=)&?utn1
%7heF0rkbB98hGCG6QZ!O\US2qR_NcSVn"u_fHOeP*i"no;<X,j3<j%57:QAVB]K^pGM,>,(XD8&Kk4:m8(9!OI#\K``I*<sd^m(i
%^2tR"PCHsin"<bj3<Tp5Rs8T##h4/4jq5,Z&XM5r.59FZ3I9hr[mUN9NDej`K544;D/Y/0^Ka`Zd[!L/mdW!!C!NRq%<%3A1P\SY
%WHF/`AkqkkFE[N#"O!=t+[c$>57f00j23>Z:8S1MV_&.I+.>?6b_[MU)]h-q@lOfL(+c%@f&gA-CCMN%e]K)'o7WlL]]72GV3%4?
%T/=/b^"?W9#]dIEZK+%t:c5bQjKYrN-le3u-h/j'3@kV,bNFdO/<@H2M<-R6'!M5OQ)i/q5g'&dQ)bW6)S41Lgq]2U0rf3SBN0[9
%mqugR=lgU0Emf8cPm?WF4KVNR,*aZqAQ&>1h-u58AWY&kJIO(>:4kjoDApJ-&i^)Jb14@/SFVBl(8ngEN@Hd>\gZZN_@.k`<bt;e
%GuQTBr@O!WYNi&V6$^'Ub5Gd@]oE7EDu(UC)>r"HPESd!T%mQ@^luC`/34jQ-Dm!uDR%<E)JjF8`CH]F(T/91\Wikt\&Bd&9Wk!_
%@.GPP*!2>iWqQ3VT2%"!GE&lg!G=*P>TKfbl1OFG<-!0KL6C0-,\J'*,^I'Ja`XN&:';Bf7.R#r(@qBG!Qh[.=AQ_1nAs;@#*+'^
%*-oq6\&]k/jQ_1X:<QqIaSAO476VnK]gpdU,kAo]2i1e!aoinY!cAQ0a#/XBdl3&P>cKO>EN8esB`H5ZY`RdX:@&X(P'9skELK'<
%nRP/g7.P0jnS#G+Rg=g1>?WbtGGm`jY30N`Fkt_V^&846k+g&\OiK?4I-CJ32U;bI5).+<,gs34k1N*D;9^uU(i$bie=?M,O23[!
%!B#qIMeVU_,c8*j:'K(Y/u8="I74@0NBiqF?dD`)0[F!@)iZYW$YSm#-^sk9B]_`*nfsM^pK55TS\R/-]]kI'<*g?`>X+`Uk&$g9
%8HK%:4>bY6R31^S/<G-_+EMrUF3OO@Quh\mQq'kHITao,L7%--0j!Bl1!G4$R:0EbVh,MLr'6Wbehk3*07nI`Sfi6?-35gP_hiFm
%C_+?8kA-rK_L=Q9j_E[$HFYh&5qghGC3[9Z`@b5E7AJ%3Hka.sGs.A7[l_-*&#CA9&]79`C?[9e\Y/82,p&$tk;!lYmam;!SjV#@
%*XY9XU"C5dc36/54Is]:bre=YLF1ftEceAaQ4nBX=DjDu$OJ\D.i2VhYk%Pi$nLN0li]p`XRc/r_6?`H2Q+2!>du!Onq<50=.bTg
%7&V5mB;0gT6ip.JhiO/;qrJ,3T0I6lj-mR+jHN,tp::<L$VWanpV'o7X_o]c]Fs"%@m:#8/h$N(6o@Vqf5;l0]O/0XS^_*KaV1iZ
%W=bKB3:aW>n2R<WSct(c4h-&\=sW\75S0GB'r&qrT79f^Tb'4$69^H))+TD<5`g1VW(*\>^&[58K.O0&mK#!XIXGHooFL2*W#kGJ
%#ST55LuMs,a$F[cXa4HsaWhuWSJ,j*a/SlrVp(/o"$+Z(Ao>4!\`3[M;m(,'3%`q\0&Y)]TtDKe2LZ3#q(p85B*IHL`03,kHna;?
%Ep+Ze&nINI%pZ.++V2LN>]>c;+F4,DcA%-*gO_e-^,VT^RC;7J(Nf0bEK>Z91$o?$hT>M&o'n#JHPDP\R0jW`KEjdYceOaQ\a2?c
%(+2PE$tOBE2Rq`dPD#dB9S!p+"dC8hT9mGpER\k4D2rj'02JT-#qTmfa[Z8;MU)SX=U!&N30<.id`NgS7.JYfejAsD5]Jqb]5[cH
%WLT9i9uB&8]S."@*hs(U@,fEu>I`!3R(,=1+X+@'icC(WB5J#'cM&$`qdYjMeNN&HE?g;fTpR5r?Qa?s_KLmO]Q;")Z4UdN![I-G
%Q-s7*7M4frI'MPQdQ9E%V1K&5I5lNGkA]0ejuut_OT/('#<'<6_Ht#JXF.r3Pl`)=,]iO:?(Un@%S>e]\aNWbk<gUg06sT2UTf;p
%@<TT)d,:C"M"AMbeY`)4J90]k*h/(*c@--[c3ZF""ZJc;^;/m%\WL%c_OC)OAb,9j22>VbI__G?MeV$ZUZDq3RR^7bEumY1F!TjT
%An-P)B]_)(7!HUXREqK2N@mO8O,@HX&RTR`)VfCRbe$AlFe.ooR!7'-]4^!>0^foSOm*4)3T!pRhECc<k*PtQ4'%V80DB1[e'DKi
%qpX:8pO&(GX2!39Jr%,E(J@ULZIcmXa&!Ybr5+c?cp%#L54<RPe$TQ+]9)-YW4S42C*-hkH.A!9Q&A`3bJ(qJ@F<5uI\49BV%p4T
%3:0*t1cSg?ntmQn!9TO+^t:*kXng&*ntLJ=?J(H>Y.I!*k.2DkjO<g=p@?Cj:sNq"9pJs"$pM4*(WadE_T>6*-Y]1hS%NN/K2?(F
%Y0#b[OMmYn8:nf,-U^hPOPP2PTTZd[bg_H_N/L9Q'-`'?*5P2:VNd?N$;W%2Hq##6P4l>ECE,>PY=,D8Y;M7YKsqcDa!-Yl5;Q$X
%H"B3#jE$.RHLNhF6I&elpAdhhK:GS%3j85\+J4u$<G7@74RhBP7M+>tLPB%&EE51CGi/-$4cW?a-iWa^0mK5H)kG\H6=MP5G`qpT
%!j/@63aMrYL6bgUEr8b'&.I/<E#dJ4-f^]a\FCik2"-FM&T!t.%aQ<Qm6H[&G.ngtdf>C!hCK&0D_6%M0d/#jb$8Z'\6PBa*;H[K
%N0Ch]o+t!S+H4W,N;Qi,e8)cX$-e?UB9Yh$(ZL8CO%VdT(8o5Gi>#$]OMr_Y)%Ya)%s,_3L<-J7RF\$gc]q*R$95$$'T\L27XcP;
%icBB:&oGX8bnJ]Lg"\phl(j0B[Vfn>i<bu"Y&Xe_mX9Z)#GD]aE'S&n3/M;a1BLi,`91(FC<naFK(s`QKorSr1%=/?_ih5WFLXD,
%]-2-D_\$:D*:>t^_;U/-0d)A\,0^R0_eX)`Z)HX(F,1aKLD*S8n>`TO`JhI&iM>kb%'Oe._o^]T@(tjS<`."$,[r`?cbse]B*8Y+
%L)2OkR']3ECL>he[MTOlL%@lfOLiO$FS__c+(7p[Z0QHI/Godf5IKb[$[6e(Z,5$08uuu12$@%S]1!(9]RjcUGi5WR^nWXCm>_L>
%$3aF=3+S!T\#Y^p6XB?RiqVZ`ORRFGKH'%t7eh:P?3D;o_N2>@i=]LS&?[bXELIhO5n=@;[gX:?5RJ'_N`^i$?+P+K_:.CrGG?Z`
%oh")X6`W]?(E7/;_+g_5)KfoJE,b^4`JtYX>\ronAb\UiJ!7^\q[B'jcN&SfYIM,d+M9WL>c05+pq0)u$Z8bQW8JgA():)c4u'mk
%FfrEN1t*oc*8sb%*gB/>_7(CXn6ij\1THPpfn*-KG9W.n,'^RXOmbLM&_o-9!Q!4dJt$YY-p4,I(fT1C"",[3*k3i0EStQi^oc3(
%X#)S)U4HNjWA<ER2"8BsA\l1VJ:VnXK#Ifc]<OD66,86T<Yc%tfPltgCQQ>s;Y^G$]LoFZ%X;+rE+q1h!KVW"fX-]*!=u%/2:j+a
%\fp!%5etp<,T,Gc+Q1A?BJI;nU,N4fHScao_A33ca;SIgG[N'j!;EMt!0?*MpoHa]GEuA7E&6)"lIMn5AC/H]@^GI<s)o>XiP._n
%CAbOYo6>pbTUPkn`]t\!qKFZ3T.W`/mgT,@=:NQFp5h.5'3cO\r>g/mTt`ti9BC2nRK7D"G2(fri9:AoQQ.q]';/RbD`;,J:FK>%
%;Q[NdU40QjofK]Q!RU:7(A,4CbA64-RGSD?9KHXDm!DsM#"AHe+CjDTnRKS?)8'l.:q5u(W5a7$:(lr@O*Z=ih_h"t\[RDBW.KGe
%7=p84X,HX69Z/'#*i*_<lim5<_<Da"H^I-Pi9=@:mqBN4!rBamI!;?&fO.5B8!n5hSOMJD(uOb,#ie"=N,Q1`AOd:BKrb_0X5fn"
%<<R51K^\1i]k7G=!.<OZ7")d%Ae-s"iW^X+8reW"G)$aphC.)PpGST[L7?)6J9t@=Ih;n97JHM]#2HfngY4&;7)hAl.n4ku[sR*b
%ej]:uN6Sbk'C>,SDsYE;G%RndqO8(Ne?lI:9k.pO5(`&o62Ju*mq*TQU#+R7ApWW%dp#:\+hd^Ac1I<3>Y+=',/%Q,(XY<:2^Wk:
%<!Dok6t`1%bhM-&/*A7N[g78rH!>o6S@><5U3WNh2U,Hh9>eDV#VMXV<diH0pQ12hk,fgP#uDfi_7Z78_ErOs!So/BDS+sdSAbXU
%H)m)VNd"eHDc6%UGXE;]`*7M#1V?F%0uI3N?6d*u>6o-oI1s9b!dJd-$Jul@@,\_W(<6tFK&&RSQh20@dfR@Bbr*seoJJP6RgpC.
%F<A)/&\I5dnj(Q:KtM]e8<udWL+,0&h(uEj"^8H!'&!\cZcdYL(9)Y`@!`4I_93MA4eL),\_Lk7:GaIm,&Xka)Ygr[nM$oK7k=B$
%mB$.LNR1n)KBu"73\ZPs$8J+$=$0fgX$8b$#$*gKq)R/jWi)FLl=:3u\`gYea-*oo3B;=;Jg)g#S2`Cmd!N0]#:m;GR8hi=-k.@]
%BN85=>jiQFo8'BJeB:,9*D(Ni7!oNbHl%GrW\,H%l,350,$RC<\Cij@)ZmZ4FX%D63$N'WTXsPRf@s-RH?CXDQpGW\:$r.Mf20n;
%=X"2^)$!CZiS`b47(8k-QY'L)APe>`,Co74>G@$;$ZejN!&BBOcgE<ji`P<l_M8,::ZbbMP;F]PiJX]:N>2nBj+LM:neQPD:"!Zd
%Ep\6P]J`DfL9*Xh\/=9,a9D'en81b]\5bR/=.VYYcCo-q_ubMF%+Z\?/7lCs#d*pJ_Z/PX![:2YVZq9i`:to8T;.#lJ]!;s27V59
%?lB+BitNB3eMS4s!X(*=+DX*p,Tr6M^RAL6_6GPs/Ii&qR4/FP)6(GN4".-M+d2-R*mOI@LGBu80"TH[,X)^[c%?Oc<`.]b19l-0
%X`Wo14tDP\9,q%&HR);Obfbeei0">3"WUoW>!mqE&O@l1[P6?qIAh%F/-nP68_)<LOIXo6oU/YFr"8RJ%77lQQktTNd6hGB^>a)V
%ks?V=JTrL>MVMNM\k,<(h=UfS)JiE1!7]nicn4\n=>KG:e;qn,ZWr-C)ciC;e/gX1JO!\-GSVdrR3e#66rXK[>N.#X-(urP_d6dh
%jAcsUSfNd0[N\!qKV_$>N?h\-Mmr^WkPOm1jn4,s=o\=gRd4m@rj27d^ZL%EhhSp/r9<CVem1_Eq2frPDGB"$`1S>#1?!dN_;>6o
%,ug48F8c%rT=YC!q,QsFZ4e1HLUUfJW&WL;,6_!>7dR#_AM?Jmdp"0.U9bh[G@f04MGn=UFelbZ<dC1$Gak$Zbq"1P%d&C6A_e/)
%K]Q^Rpbc:a&R\aeRY4b2N[#&kMajM/Xg]?g+c4=dJEK88`g3^Ze0421OGetr!"mJ+FZ[gHN/e..j^oQ^Lfe_39fT3_)m\iWac+-s
%_%kk&MlG(=,76b!+a&ne+!/9B9JXfik0?Dg<)6^:H8W+,32Ct?p!g)be>Ed.EnCs1;KnjU[0_r6.>]1,C)(H"4`3/8_G%Dmj&l7R
%^b@/sNIGY9J^u--TWZQL+!OR6U:uO*[Mbq>'QDop"b=C^(V3[GW^N,>"-.61EHsJh(Q$;h)Ej%bC8t,EPa]]E&d$=Rao_,XT+Ed,
%[6Fh\;S=r!AA+CtMb2bCKPErA9ajf464o+^q$H`)YY#:q9U*Q9pQ^rJ*b(u:6;jZi0q'lX"M&R.W0J&>#E)U34rf.dgYRR*=?TZK
%p9-5GG!ghM+u7:Hc%7Q(J]ZN/"UKD],&l-D+A#VuhZ-K</;TN"&hl6&J447<CQ1;L0OQAg))Xdg'b^pVPsnA3$/VdL^_3S3Q0CPU
%h#iFt#QN.9!r+Mn^]LJ:o@sgi?kK9Ql5+!"+;>,ef5?,IRrMTXL=:5)JK5@kDo7&Zn3<"mJJ)Jb0A*3i76Yg2Bf.qr'\mC5kc`oO
%9dTNGb[3s3J><<!gVdG:;otZ3Y>tXQfb98;9=iii?f;BHq^o'A2ssa6.1/.96%\e\c)U@4C?bui=3,BtI\TDL^jblmI:U]p(@'M/
%YgV=J-;_J*Vi(+NNg'*>XCZ2TK+7[bE_X77"&+)_IKT1Gn!N"*r#U()Da8cHle2[@%E<>"1Ob>YjbmH$hp2j_"7UZm!Pb8dq\noB
%)664#2;G[sftO(Fqhj`eSD8]bp'n6E^4C]bleCl5hn])k,[t/0:%^ZD@GsfNr=%17R(e^=4INoQqPH6nM=_7OmsZY\)X'9N4Q!sM
%/g/*Lq$,*QhJ'\Z7c-eO!V-[>`<l)m`tunk`UOCrDnfe0:%@n[EC,&*iEPaZ?R'siS`'A_J8aq(O#t*8n@cj_heRQ,&R*AAhAbt@
%EejAn]6E&`]n,S\*m'9,'tO).C3(Wo)Vg5pqZ?Kr\$t/']n,QfBCas4hG7!q56^E`AoEK/:M0'.OM*sHr>=3,`85J]p);Rfm_%Dl
%ogY))jRjGCS'i>/.i]W#`f8Pb=DtR'4^#Hfot$".%FlDn?E4Dd<3Jm,q]41%:2_S*:2aNd7jpD#di4P.I])ge$IUFmD^Zl,6Eg3t
%G<dgC&FH&b3q%W21":u:bR4P_6dC+"H):;idLF?gZoTdXmR$Ig)jA)5kmldnQ_58AL#^.W^N!Ud0OFPeC(S0U'JE,!#YDl:imitu
%1>p%=1:'WPGX?Wu)5JK<EM!Nn*@3!1_Mc4Qm4]@#I,j[9gAtOKHP_-tfd<Nq%%Zln\ZiF-=r2LO`p!`5b6?afs./VkW4Q3>T7nh#
%b[!dm$&gOs/nq80\_7M&X0d6G3koXGi"*7.D4sbXDUAND6g7#+$8b.?l2p@Y8oErVT:B38:pL-ch'os9g[Jl(I55uH3d&B)E>!FD
%F_$f0Mm"WR+j#CqY"S:2VmrEq[OsUDd\T"a8_-<`?m4aNl:Nqc,`E&./g$_.*ji\9e:i<MOe>rE?&j68``tK/UnN,CFj16A9p2'Q
%\%GhSo&gK@DC8%XmblS2#Bu;Pdj>p+FeAc`Q*PM0luI)fjZ+sL>m`6DY(h96^?^X'PoOgS?G.bu)G@Ss/r6[Mp:/X*L9?86UJE&3
%-.hi_U-1RE\fQL$Foc^`8TeB4d,=*PCNY<q(Hto%-'R`.n@=B)&cS:8MMn(,CUt+E?LZa'd8R.U06XL'bk&$8pR^SRR^B^5Hc$$4
%9lT[c'5sl/aj!PI:\SB!#b*?fZQKVl2)jc4A#?i1\_9oUo$]%XbhU-[<mp=BR0u\"4[?^nF/:g%]d,4<Y+4#_RF]@#9j56!`YL1.
%[d&:Ma6fV_-:@n?Zg\.A9r'hkW8:XeM$B7j3=C;0Ep7UDRZt/ePUf"e"Eu4?QZYO#&3HMK>[iYd<8n5+7GBY3ML7ePU/ss44s7&s
%JDAGG37'4JG[+.74%mEoa/'5Rk.%V_BO"#lT`+9[j-!:-3%lm8DHG!_nt.9D(Gg"<)9%<Jm>@&%*[_Mc5*+ODm)?l]2;G64Z53tZ
%,BTjJb=0>1@LPqQ(CSj:P0GE&7Dbmq(4a1.K8W70PT%EX"i9R?cg1QB!k54+i:\;of7.)3`Lu*\lSoY`GHl(/c!i-6d'm;:X`<CX
%i\+oL\tHNGLpt1%S]KP<*#fOf'6nk;>F3>=GK[/uABJgrYhOduhJiYRU3CL^ppr/gLD\]N1G6c9JX[f<1`,/;F/Sn.N!A4+F^m)l
%,J<CeSu\&3(Yn]qb\3t#(Y\RJO?h@a!o(jgga)Ao=BcUM4WDC_6#G0"$Qm:8*GJ/ms,c%-"PPcm#<7KmZXq%@@ck1.[PTKb:#B?P
%CggJG4F_ou8J`EE`u*P\U2RRsCmf"FDn64_30S^D_O7\([5_WN_QcP5"hV/UEaJ*95\;8%%4A^;YnOFgP?SFX\+?t5e6;Q#!+$Wa
%QrsgiGd*uN`*,$BXHGe#?7k0QI7:XnY?%7k&RMT'<f=D&^AYRHC5I9fOkNC,Pt=47!8oJ)/TONiHT+R!D#^"&hht>^?pG7Sek)e\
%dG*[FL8X,GY`l`PZn9AV(RUMf4Vkej8up`T%b>J>Bj!FRMHi8I'grd2/f60_[A0li1e>!<NM:^_%7=n:mC5MsNM+O?"K_[2&_UIj
%g>L<N)h0d8ZgEdF%Jm0@gI7_Dph[R[B0X5(20q1AVAFR0jB:hX(O7pSZfM[g20UsOYpX_Ge62-4(NhX/ZhY*%201Z$J/<8bOL(;3
%;U4kVcGo'>S.4Cm83'K(D")$=>C5pQ"#h1:-Z7MBfmqG@Yh<F/VE8VFXP%bac'gI.=7@EY#&(I$5dS:p4mnin:Le!h1)p567@?#D
%2B8#1A(HIhF=59:@(+hsZN6HdL?/K\#%+gqpp,I;m<?3Zct0oL\EL4!QX-o@"d]\,Ci&rD[VVUJO#pOrA6JVO(L&fEZ>lll>1R4e
%Tl<f5lmKTSTAdp2.m*/ufmq5r4&jd)=_GK%Uhj_<56/i`-_&6`4B^]T6g8mTA3WMH'hjqY_$q_AQ>Dqd09iP0ZH!1q=bC8*#9[/h
%A=Yip@:VSkOYoP8IfPTG6T1B#h&*Fea;uEGA5//&*tVrdOGsdcpp&NhUP?G_AAsVSklZC9nZf.2g51k*4k:pM)a-+;Z([XLiN]"e
%`u5tF`%b#/XN@^[HCj3M!6:*]37cm;OG-uqfYGN#4#Y[>=<O[]2:g.,pg,=(p/B%7'4XTL>f>:@!+UWtS+"!lj'n'ka2OJ_)^<gj
%()sL1I##\0'h]pd@)Z14m^H5KoP.Fn3@X*S'WZZd`=&\3Z)1[(%8EY[c&%_H?'s9cVA^+`*ZYSkCL0_lh;(N\"j_Z`@PnIJ&^-#u
%&R0s[g\A1N9I%E6*"#g%ob.]EM\YbZHs!*Yo3n1@*s@@]@bmhA'VD$IX\jZ[gKja0/Vk,]<g5fu2bMuA$oY3'R%snLe9>Um35WKX
%/o7;4Lfcfk*2O:HcR!+"M+gHBM'tsqeZ8tJLH'lXh^O4YW=OFrN[>CC4#0[L@-(Wkd6T`4l;&$A_tNE^^%c[feV?g_WdTPX%LfEW
%_CN,>IthK37US)BV/.@ZlqZO\e_Aj^6oS%VG*:6@&DI&>s/P45#hg2n)UVoWrSY0>!hX?'.r@/.lDoNLMFU"ID+fV*RJVm8LZIj$
%p.h(QMY75m:XocO['>PK6un7pW9^][q8TidlKR<A\ti!fJeRiMHBJ#0N*r>ca[i[oO46Pn[mq[j,0--/Jg`8a_,7YnoHflWEIZ(5
%1A]P[p<_\gH'T@J.XmspJl?R6*cP1S<D80GoEstH1]stfm%MY`o=-0KiM_-B^95u44Ed+e$eB5\WsB_L#QbSP)#pZ=6KeJQ\.A.f
%2Dmm<h_^j(7Mh[@P`fX^1"XWpg:\Gk4E$#BN8]634[aXe4Us$kd?p/-FJJQQ)S=b+-&AU$m8V_@m6koY"KE+#pl=+9,h!2J!KB;&
%UC#ha$nHj<\EQOU*SR.,hLMn/-?IOgOCCf^2!<=-\T%34AWKU$0O*'`$F2BYcko3f"pKP:#e411>#ij5WIGm#$ORJGgQMGfNal#K
%-L_+3s+5qs<gn%WTUB+^<i],.e/=_&;GTSnD;HG'>G4ODVF?S7aR9%daH@'8ROJ5r=RZfG_GEnV*X?MMo[u9VcE]o5GZGtfWT5-8
%jrr'eM.+F/!ZCe@:D#2d,Ggs*a>=3#(H>Im[SV[29NmFE,b>1(/;kj5X5"Qg.dAt$=">#$#U5$joqIFqY<c_FY#=,8l*f3RP$OKr
%I41Y[<2H%$-PhDgBQl7f[5tckcm0EY`')mLjE.qnfF<YQWh.CaBa01MMnn&3ReBM6S5gjWZ'!K]I>/_PQfbCVK;S7YAp3UjR"I7I
%7)4rkZ3eCJRa@^G6ZjfK_`?+4rg`"'P60pVP&One-&J8"cF$j=2!3p/2'Arp6r)Hbke%Y=D^G$PD?#^BHE!_>-4p*Y'aQ]#K%`(\
%*&"8A%^c4rTYA/;BrPBapu[W:5itq(c/DTap<EUe:foY2AH\%[`XX4m5&rL=imsK<8WJIYs&p*C?LKN78!nB;`kU/1kWQD!B9f`D
%D#G`b^-5[eELu@*Ds'8jrVbonnDA^Xn9<2s^AdsFhgP7]O5J:@m-j+UoB+l<%iTkBo5Cg^oD@]8^AdupIs?G:]C0(@s52.@f+7bR
%"/U.Pg^a,PfCNm)p&G$`k54h[GuO\<p%-5-qW43u^NfLbDr,p>h+tcQ2a9F>s5Et"JZ.m507N`nh%-^Hs3#n:^gI-#LM+??rIATp
%0)YVZs*<GSo*5*AX)qRLA&[j8_$g84h4#MC4Fd++Isq=PqrdQGs4lT4iUr[YIt'Wl5Per?q>C6fmJ!7Ko7mj=Ss$t5s-W"ep6MXZ
%s2s?'#hqn9:_!%p;/g1Webm`pMObZ#LU$iY*d5#:qqiCjPsQ5bV=oANkPjmDdA)`HJ+DmZ-gRs"Zg6H!H2mWM^I<YO9A\P.<Q@nm
%hY8f(K"(L;%el=%]shbiYK@?L#a^c[>PYGQMVo`mgQ!ph'oI4<aC="\E_SDb'T:KV>1D]Q`0/*bM-2=90+iEo=kq=\lE.-Lg"h#;
%?/J%b)IIN\nYu82]Ds,_H?_RGm>J]&7`2f;5P^2kFWK#@\L[&Ag3@*<r<7uRCP^X++WbeNRt(H7db^eggl^_jduVk^,c_n^N'/Sf
%-AeujaQ)tBn_u'"IZ,t$QLCOT#e2-Is%^@S,QS5aW:K4:1g'?,l>aB'H,E9"WhXto#>2nSSYkM()UQcXPWmWm2-0PFU)m2pDBO\d
%k3IV<7(+$I)=GBsJI.TX!ZQqroOd@Hp75Rha)U@TK2sB[-^tXL(]XL*/,%M3s1E,*?iL:2D8,9CY1l(f5O6J:f71WEqs(ZZIPPm?
%]5QR)iSE99je%@+5JG_KqUqOmGOlSoo*TK<K%">eJKd6l`(3dNedj\ac/hS>aP;[.`Z0],B',5%CV,r1H@3h3ejKn(96ir&Dr.MH
%VbZ[IcSOO-nYQ-B(]N\m?hj7Xk.iqU=FWD6l)3]oJ,TB:E=RBhbNEeNs3pl.\NP6<o:LI.rU[e;IX$>9N[=Ak+6T7;^4$%Xq]Gh,
%rq42'^]23D(u\3P)nu16(]WZJrqpF/+(+pAIK~>
%AI9_PrivateDataEnd
